// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package boardtemplates

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"scrumlr.io/server/columntemplates"
)

// NewMockBoardTemplateDatabase creates a new instance of MockBoardTemplateDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBoardTemplateDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBoardTemplateDatabase {
	mock := &MockBoardTemplateDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBoardTemplateDatabase is an autogenerated mock type for the BoardTemplateDatabase type
type MockBoardTemplateDatabase struct {
	mock.Mock
}

type MockBoardTemplateDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBoardTemplateDatabase) EXPECT() *MockBoardTemplateDatabase_Expecter {
	return &MockBoardTemplateDatabase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockBoardTemplateDatabase
func (_mock *MockBoardTemplateDatabase) Create(ctx context.Context, board DatabaseBoardTemplateInsert, columns []columntemplates.DatabaseColumnTemplateInsert) (DatabaseBoardTemplate, error) {
	ret := _mock.Called(ctx, board, columns)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 DatabaseBoardTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardTemplateInsert, []columntemplates.DatabaseColumnTemplateInsert) (DatabaseBoardTemplate, error)); ok {
		return returnFunc(ctx, board, columns)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardTemplateInsert, []columntemplates.DatabaseColumnTemplateInsert) DatabaseBoardTemplate); ok {
		r0 = returnFunc(ctx, board, columns)
	} else {
		r0 = ret.Get(0).(DatabaseBoardTemplate)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DatabaseBoardTemplateInsert, []columntemplates.DatabaseColumnTemplateInsert) error); ok {
		r1 = returnFunc(ctx, board, columns)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateDatabase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBoardTemplateDatabase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - board DatabaseBoardTemplateInsert
//   - columns []columntemplates.DatabaseColumnTemplateInsert
func (_e *MockBoardTemplateDatabase_Expecter) Create(ctx interface{}, board interface{}, columns interface{}) *MockBoardTemplateDatabase_Create_Call {
	return &MockBoardTemplateDatabase_Create_Call{Call: _e.mock.On("Create", ctx, board, columns)}
}

func (_c *MockBoardTemplateDatabase_Create_Call) Run(run func(ctx context.Context, board DatabaseBoardTemplateInsert, columns []columntemplates.DatabaseColumnTemplateInsert)) *MockBoardTemplateDatabase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DatabaseBoardTemplateInsert
		if args[1] != nil {
			arg1 = args[1].(DatabaseBoardTemplateInsert)
		}
		var arg2 []columntemplates.DatabaseColumnTemplateInsert
		if args[2] != nil {
			arg2 = args[2].([]columntemplates.DatabaseColumnTemplateInsert)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBoardTemplateDatabase_Create_Call) Return(databaseBoardTemplate DatabaseBoardTemplate, err error) *MockBoardTemplateDatabase_Create_Call {
	_c.Call.Return(databaseBoardTemplate, err)
	return _c
}

func (_c *MockBoardTemplateDatabase_Create_Call) RunAndReturn(run func(ctx context.Context, board DatabaseBoardTemplateInsert, columns []columntemplates.DatabaseColumnTemplateInsert) (DatabaseBoardTemplate, error)) *MockBoardTemplateDatabase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockBoardTemplateDatabase
func (_mock *MockBoardTemplateDatabase) Delete(ctx context.Context, templateId uuid.UUID) error {
	ret := _mock.Called(ctx, templateId)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, templateId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBoardTemplateDatabase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBoardTemplateDatabase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - templateId uuid.UUID
func (_e *MockBoardTemplateDatabase_Expecter) Delete(ctx interface{}, templateId interface{}) *MockBoardTemplateDatabase_Delete_Call {
	return &MockBoardTemplateDatabase_Delete_Call{Call: _e.mock.On("Delete", ctx, templateId)}
}

func (_c *MockBoardTemplateDatabase_Delete_Call) Run(run func(ctx context.Context, templateId uuid.UUID)) *MockBoardTemplateDatabase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateDatabase_Delete_Call) Return(err error) *MockBoardTemplateDatabase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBoardTemplateDatabase_Delete_Call) RunAndReturn(run func(ctx context.Context, templateId uuid.UUID) error) *MockBoardTemplateDatabase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockBoardTemplateDatabase
func (_mock *MockBoardTemplateDatabase) Get(ctx context.Context, id uuid.UUID) (DatabaseBoardTemplate, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 DatabaseBoardTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (DatabaseBoardTemplate, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) DatabaseBoardTemplate); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(DatabaseBoardTemplate)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateDatabase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBoardTemplateDatabase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardTemplateDatabase_Expecter) Get(ctx interface{}, id interface{}) *MockBoardTemplateDatabase_Get_Call {
	return &MockBoardTemplateDatabase_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockBoardTemplateDatabase_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardTemplateDatabase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateDatabase_Get_Call) Return(databaseBoardTemplate DatabaseBoardTemplate, err error) *MockBoardTemplateDatabase_Get_Call {
	_c.Call.Return(databaseBoardTemplate, err)
	return _c
}

func (_c *MockBoardTemplateDatabase_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (DatabaseBoardTemplate, error)) *MockBoardTemplateDatabase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockBoardTemplateDatabase
func (_mock *MockBoardTemplateDatabase) GetAll(ctx context.Context, user uuid.UUID) ([]DatabaseBoardTemplateFull, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []DatabaseBoardTemplateFull
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]DatabaseBoardTemplateFull, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []DatabaseBoardTemplateFull); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardTemplateFull)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateDatabase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockBoardTemplateDatabase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - user uuid.UUID
func (_e *MockBoardTemplateDatabase_Expecter) GetAll(ctx interface{}, user interface{}) *MockBoardTemplateDatabase_GetAll_Call {
	return &MockBoardTemplateDatabase_GetAll_Call{Call: _e.mock.On("GetAll", ctx, user)}
}

func (_c *MockBoardTemplateDatabase_GetAll_Call) Run(run func(ctx context.Context, user uuid.UUID)) *MockBoardTemplateDatabase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateDatabase_GetAll_Call) Return(databaseBoardTemplateFulls []DatabaseBoardTemplateFull, err error) *MockBoardTemplateDatabase_GetAll_Call {
	_c.Call.Return(databaseBoardTemplateFulls, err)
	return _c
}

func (_c *MockBoardTemplateDatabase_GetAll_Call) RunAndReturn(run func(ctx context.Context, user uuid.UUID) ([]DatabaseBoardTemplateFull, error)) *MockBoardTemplateDatabase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockBoardTemplateDatabase
func (_mock *MockBoardTemplateDatabase) Update(ctx context.Context, board DatabaseBoardTemplateUpdate) (DatabaseBoardTemplate, error) {
	ret := _mock.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 DatabaseBoardTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardTemplateUpdate) (DatabaseBoardTemplate, error)); ok {
		return returnFunc(ctx, board)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardTemplateUpdate) DatabaseBoardTemplate); ok {
		r0 = returnFunc(ctx, board)
	} else {
		r0 = ret.Get(0).(DatabaseBoardTemplate)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DatabaseBoardTemplateUpdate) error); ok {
		r1 = returnFunc(ctx, board)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateDatabase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBoardTemplateDatabase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - board DatabaseBoardTemplateUpdate
func (_e *MockBoardTemplateDatabase_Expecter) Update(ctx interface{}, board interface{}) *MockBoardTemplateDatabase_Update_Call {
	return &MockBoardTemplateDatabase_Update_Call{Call: _e.mock.On("Update", ctx, board)}
}

func (_c *MockBoardTemplateDatabase_Update_Call) Run(run func(ctx context.Context, board DatabaseBoardTemplateUpdate)) *MockBoardTemplateDatabase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DatabaseBoardTemplateUpdate
		if args[1] != nil {
			arg1 = args[1].(DatabaseBoardTemplateUpdate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateDatabase_Update_Call) Return(databaseBoardTemplate DatabaseBoardTemplate, err error) *MockBoardTemplateDatabase_Update_Call {
	_c.Call.Return(databaseBoardTemplate, err)
	return _c
}

func (_c *MockBoardTemplateDatabase_Update_Call) RunAndReturn(run func(ctx context.Context, board DatabaseBoardTemplateUpdate) (DatabaseBoardTemplate, error)) *MockBoardTemplateDatabase_Update_Call {
	_c.Call.Return(run)
	return _c
}
