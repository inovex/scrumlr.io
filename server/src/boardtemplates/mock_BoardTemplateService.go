// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package boardtemplates

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBoardTemplateService creates a new instance of MockBoardTemplateService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBoardTemplateService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBoardTemplateService {
	mock := &MockBoardTemplateService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBoardTemplateService is an autogenerated mock type for the BoardTemplateService type
type MockBoardTemplateService struct {
	mock.Mock
}

type MockBoardTemplateService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBoardTemplateService) EXPECT() *MockBoardTemplateService_Expecter {
	return &MockBoardTemplateService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockBoardTemplateService
func (_mock *MockBoardTemplateService) Create(ctx context.Context, body CreateBoardTemplateRequest) (*BoardTemplate, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *BoardTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateBoardTemplateRequest) (*BoardTemplate, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, CreateBoardTemplateRequest) *BoardTemplate); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoardTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, CreateBoardTemplateRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBoardTemplateService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - body CreateBoardTemplateRequest
func (_e *MockBoardTemplateService_Expecter) Create(ctx interface{}, body interface{}) *MockBoardTemplateService_Create_Call {
	return &MockBoardTemplateService_Create_Call{Call: _e.mock.On("Create", ctx, body)}
}

func (_c *MockBoardTemplateService_Create_Call) Run(run func(ctx context.Context, body CreateBoardTemplateRequest)) *MockBoardTemplateService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 CreateBoardTemplateRequest
		if args[1] != nil {
			arg1 = args[1].(CreateBoardTemplateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateService_Create_Call) Return(boardTemplate *BoardTemplate, err error) *MockBoardTemplateService_Create_Call {
	_c.Call.Return(boardTemplate, err)
	return _c
}

func (_c *MockBoardTemplateService_Create_Call) RunAndReturn(run func(ctx context.Context, body CreateBoardTemplateRequest) (*BoardTemplate, error)) *MockBoardTemplateService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockBoardTemplateService
func (_mock *MockBoardTemplateService) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBoardTemplateService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBoardTemplateService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardTemplateService_Expecter) Delete(ctx interface{}, id interface{}) *MockBoardTemplateService_Delete_Call {
	return &MockBoardTemplateService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBoardTemplateService_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardTemplateService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateService_Delete_Call) Return(err error) *MockBoardTemplateService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBoardTemplateService_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockBoardTemplateService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockBoardTemplateService
func (_mock *MockBoardTemplateService) Get(ctx context.Context, id uuid.UUID) (*BoardTemplate, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *BoardTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*BoardTemplate, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *BoardTemplate); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoardTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBoardTemplateService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardTemplateService_Expecter) Get(ctx interface{}, id interface{}) *MockBoardTemplateService_Get_Call {
	return &MockBoardTemplateService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockBoardTemplateService_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardTemplateService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateService_Get_Call) Return(boardTemplate *BoardTemplate, err error) *MockBoardTemplateService_Get_Call {
	_c.Call.Return(boardTemplate, err)
	return _c
}

func (_c *MockBoardTemplateService_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*BoardTemplate, error)) *MockBoardTemplateService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockBoardTemplateService
func (_mock *MockBoardTemplateService) GetAll(ctx context.Context, user uuid.UUID) ([]*BoardTemplateFull, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*BoardTemplateFull
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*BoardTemplateFull, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*BoardTemplateFull); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*BoardTemplateFull)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockBoardTemplateService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - user uuid.UUID
func (_e *MockBoardTemplateService_Expecter) GetAll(ctx interface{}, user interface{}) *MockBoardTemplateService_GetAll_Call {
	return &MockBoardTemplateService_GetAll_Call{Call: _e.mock.On("GetAll", ctx, user)}
}

func (_c *MockBoardTemplateService_GetAll_Call) Run(run func(ctx context.Context, user uuid.UUID)) *MockBoardTemplateService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateService_GetAll_Call) Return(boardTemplateFulls []*BoardTemplateFull, err error) *MockBoardTemplateService_GetAll_Call {
	_c.Call.Return(boardTemplateFulls, err)
	return _c
}

func (_c *MockBoardTemplateService_GetAll_Call) RunAndReturn(run func(ctx context.Context, user uuid.UUID) ([]*BoardTemplateFull, error)) *MockBoardTemplateService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockBoardTemplateService
func (_mock *MockBoardTemplateService) Update(ctx context.Context, body BoardTemplateUpdateRequest) (*BoardTemplate, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *BoardTemplate
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, BoardTemplateUpdateRequest) (*BoardTemplate, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, BoardTemplateUpdateRequest) *BoardTemplate); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoardTemplate)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, BoardTemplateUpdateRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardTemplateService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBoardTemplateService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body BoardTemplateUpdateRequest
func (_e *MockBoardTemplateService_Expecter) Update(ctx interface{}, body interface{}) *MockBoardTemplateService_Update_Call {
	return &MockBoardTemplateService_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockBoardTemplateService_Update_Call) Run(run func(ctx context.Context, body BoardTemplateUpdateRequest)) *MockBoardTemplateService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 BoardTemplateUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(BoardTemplateUpdateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardTemplateService_Update_Call) Return(boardTemplate *BoardTemplate, err error) *MockBoardTemplateService_Update_Call {
	_c.Call.Return(boardTemplate, err)
	return _c
}

func (_c *MockBoardTemplateService_Update_Call) RunAndReturn(run func(ctx context.Context, body BoardTemplateUpdateRequest) (*BoardTemplate, error)) *MockBoardTemplateService_Update_Call {
	_c.Call.Return(run)
	return _c
}
