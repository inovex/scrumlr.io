// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package columns

import (
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockColumnDatabase creates a new instance of MockColumnDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockColumnDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockColumnDatabase {
	mock := &MockColumnDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockColumnDatabase is an autogenerated mock type for the ColumnDatabase type
type MockColumnDatabase struct {
	mock.Mock
}

type MockColumnDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockColumnDatabase) EXPECT() *MockColumnDatabase_Expecter {
	return &MockColumnDatabase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockColumnDatabase
func (_mock *MockColumnDatabase) Create(column DatabaseColumnInsert) (DatabaseColumn, error) {
	ret := _mock.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 DatabaseColumn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DatabaseColumnInsert) (DatabaseColumn, error)); ok {
		return returnFunc(column)
	}
	if returnFunc, ok := ret.Get(0).(func(DatabaseColumnInsert) DatabaseColumn); ok {
		r0 = returnFunc(column)
	} else {
		r0 = ret.Get(0).(DatabaseColumn)
	}
	if returnFunc, ok := ret.Get(1).(func(DatabaseColumnInsert) error); ok {
		r1 = returnFunc(column)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnDatabase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockColumnDatabase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - column DatabaseColumnInsert
func (_e *MockColumnDatabase_Expecter) Create(column interface{}) *MockColumnDatabase_Create_Call {
	return &MockColumnDatabase_Create_Call{Call: _e.mock.On("Create", column)}
}

func (_c *MockColumnDatabase_Create_Call) Run(run func(column DatabaseColumnInsert)) *MockColumnDatabase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DatabaseColumnInsert
		if args[0] != nil {
			arg0 = args[0].(DatabaseColumnInsert)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockColumnDatabase_Create_Call) Return(databaseColumn DatabaseColumn, err error) *MockColumnDatabase_Create_Call {
	_c.Call.Return(databaseColumn, err)
	return _c
}

func (_c *MockColumnDatabase_Create_Call) RunAndReturn(run func(column DatabaseColumnInsert) (DatabaseColumn, error)) *MockColumnDatabase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockColumnDatabase
func (_mock *MockColumnDatabase) Delete(board uuid.UUID, column uuid.UUID) error {
	ret := _mock.Called(board, column)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(board, column)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockColumnDatabase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockColumnDatabase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - board uuid.UUID
//   - column uuid.UUID
func (_e *MockColumnDatabase_Expecter) Delete(board interface{}, column interface{}) *MockColumnDatabase_Delete_Call {
	return &MockColumnDatabase_Delete_Call{Call: _e.mock.On("Delete", board, column)}
}

func (_c *MockColumnDatabase_Delete_Call) Run(run func(board uuid.UUID, column uuid.UUID)) *MockColumnDatabase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockColumnDatabase_Delete_Call) Return(err error) *MockColumnDatabase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockColumnDatabase_Delete_Call) RunAndReturn(run func(board uuid.UUID, column uuid.UUID) error) *MockColumnDatabase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockColumnDatabase
func (_mock *MockColumnDatabase) Get(board uuid.UUID, id uuid.UUID) (DatabaseColumn, error) {
	ret := _mock.Called(board, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 DatabaseColumn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (DatabaseColumn, error)); ok {
		return returnFunc(board, id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) DatabaseColumn); ok {
		r0 = returnFunc(board, id)
	} else {
		r0 = ret.Get(0).(DatabaseColumn)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(board, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnDatabase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockColumnDatabase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - board uuid.UUID
//   - id uuid.UUID
func (_e *MockColumnDatabase_Expecter) Get(board interface{}, id interface{}) *MockColumnDatabase_Get_Call {
	return &MockColumnDatabase_Get_Call{Call: _e.mock.On("Get", board, id)}
}

func (_c *MockColumnDatabase_Get_Call) Run(run func(board uuid.UUID, id uuid.UUID)) *MockColumnDatabase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockColumnDatabase_Get_Call) Return(databaseColumn DatabaseColumn, err error) *MockColumnDatabase_Get_Call {
	_c.Call.Return(databaseColumn, err)
	return _c
}

func (_c *MockColumnDatabase_Get_Call) RunAndReturn(run func(board uuid.UUID, id uuid.UUID) (DatabaseColumn, error)) *MockColumnDatabase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockColumnDatabase
func (_mock *MockColumnDatabase) GetAll(board uuid.UUID) ([]DatabaseColumn, error) {
	ret := _mock.Called(board)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []DatabaseColumn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]DatabaseColumn, error)); ok {
		return returnFunc(board)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []DatabaseColumn); ok {
		r0 = returnFunc(board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseColumn)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(board)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnDatabase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockColumnDatabase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - board uuid.UUID
func (_e *MockColumnDatabase_Expecter) GetAll(board interface{}) *MockColumnDatabase_GetAll_Call {
	return &MockColumnDatabase_GetAll_Call{Call: _e.mock.On("GetAll", board)}
}

func (_c *MockColumnDatabase_GetAll_Call) Run(run func(board uuid.UUID)) *MockColumnDatabase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockColumnDatabase_GetAll_Call) Return(databaseColumns []DatabaseColumn, err error) *MockColumnDatabase_GetAll_Call {
	_c.Call.Return(databaseColumns, err)
	return _c
}

func (_c *MockColumnDatabase_GetAll_Call) RunAndReturn(run func(board uuid.UUID) ([]DatabaseColumn, error)) *MockColumnDatabase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockColumnDatabase
func (_mock *MockColumnDatabase) Update(column DatabaseColumnUpdate) (DatabaseColumn, error) {
	ret := _mock.Called(column)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 DatabaseColumn
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DatabaseColumnUpdate) (DatabaseColumn, error)); ok {
		return returnFunc(column)
	}
	if returnFunc, ok := ret.Get(0).(func(DatabaseColumnUpdate) DatabaseColumn); ok {
		r0 = returnFunc(column)
	} else {
		r0 = ret.Get(0).(DatabaseColumn)
	}
	if returnFunc, ok := ret.Get(1).(func(DatabaseColumnUpdate) error); ok {
		r1 = returnFunc(column)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnDatabase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockColumnDatabase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - column DatabaseColumnUpdate
func (_e *MockColumnDatabase_Expecter) Update(column interface{}) *MockColumnDatabase_Update_Call {
	return &MockColumnDatabase_Update_Call{Call: _e.mock.On("Update", column)}
}

func (_c *MockColumnDatabase_Update_Call) Run(run func(column DatabaseColumnUpdate)) *MockColumnDatabase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DatabaseColumnUpdate
		if args[0] != nil {
			arg0 = args[0].(DatabaseColumnUpdate)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockColumnDatabase_Update_Call) Return(databaseColumn DatabaseColumn, err error) *MockColumnDatabase_Update_Call {
	_c.Call.Return(databaseColumn, err)
	return _c
}

func (_c *MockColumnDatabase_Update_Call) RunAndReturn(run func(column DatabaseColumnUpdate) (DatabaseColumn, error)) *MockColumnDatabase_Update_Call {
	_c.Call.Return(run)
	return _c
}
