// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package columns

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockColumnService creates a new instance of MockColumnService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockColumnService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockColumnService {
	mock := &MockColumnService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockColumnService is an autogenerated mock type for the ColumnService type
type MockColumnService struct {
	mock.Mock
}

type MockColumnService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockColumnService) EXPECT() *MockColumnService_Expecter {
	return &MockColumnService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockColumnService
func (_mock *MockColumnService) Create(ctx context.Context, body ColumnRequest) (*Column, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Column
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ColumnRequest) (*Column, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ColumnRequest) *Column); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Column)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ColumnRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockColumnService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - body ColumnRequest
func (_e *MockColumnService_Expecter) Create(ctx interface{}, body interface{}) *MockColumnService_Create_Call {
	return &MockColumnService_Create_Call{Call: _e.mock.On("Create", ctx, body)}
}

func (_c *MockColumnService_Create_Call) Run(run func(ctx context.Context, body ColumnRequest)) *MockColumnService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ColumnRequest
		if args[1] != nil {
			arg1 = args[1].(ColumnRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockColumnService_Create_Call) Return(column *Column, err error) *MockColumnService_Create_Call {
	_c.Call.Return(column, err)
	return _c
}

func (_c *MockColumnService_Create_Call) RunAndReturn(run func(ctx context.Context, body ColumnRequest) (*Column, error)) *MockColumnService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockColumnService
func (_mock *MockColumnService) Delete(ctx context.Context, board uuid.UUID, column uuid.UUID, user uuid.UUID) error {
	ret := _mock.Called(ctx, board, column, user)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, board, column, user)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockColumnService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockColumnService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - column uuid.UUID
//   - user uuid.UUID
func (_e *MockColumnService_Expecter) Delete(ctx interface{}, board interface{}, column interface{}, user interface{}) *MockColumnService_Delete_Call {
	return &MockColumnService_Delete_Call{Call: _e.mock.On("Delete", ctx, board, column, user)}
}

func (_c *MockColumnService_Delete_Call) Run(run func(ctx context.Context, board uuid.UUID, column uuid.UUID, user uuid.UUID)) *MockColumnService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockColumnService_Delete_Call) Return(err error) *MockColumnService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockColumnService_Delete_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, column uuid.UUID, user uuid.UUID) error) *MockColumnService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockColumnService
func (_mock *MockColumnService) Get(ctx context.Context, boardID uuid.UUID, columnID uuid.UUID) (*Column, error) {
	ret := _mock.Called(ctx, boardID, columnID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Column
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*Column, error)); ok {
		return returnFunc(ctx, boardID, columnID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *Column); ok {
		r0 = returnFunc(ctx, boardID, columnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Column)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, boardID, columnID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockColumnService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - columnID uuid.UUID
func (_e *MockColumnService_Expecter) Get(ctx interface{}, boardID interface{}, columnID interface{}) *MockColumnService_Get_Call {
	return &MockColumnService_Get_Call{Call: _e.mock.On("Get", ctx, boardID, columnID)}
}

func (_c *MockColumnService_Get_Call) Run(run func(ctx context.Context, boardID uuid.UUID, columnID uuid.UUID)) *MockColumnService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockColumnService_Get_Call) Return(column *Column, err error) *MockColumnService_Get_Call {
	_c.Call.Return(column, err)
	return _c
}

func (_c *MockColumnService_Get_Call) RunAndReturn(run func(ctx context.Context, boardID uuid.UUID, columnID uuid.UUID) (*Column, error)) *MockColumnService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockColumnService
func (_mock *MockColumnService) GetAll(ctx context.Context, boardID uuid.UUID) ([]*Column, error) {
	ret := _mock.Called(ctx, boardID)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*Column
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Column, error)); ok {
		return returnFunc(ctx, boardID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Column); ok {
		r0 = returnFunc(ctx, boardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Column)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, boardID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockColumnService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
func (_e *MockColumnService_Expecter) GetAll(ctx interface{}, boardID interface{}) *MockColumnService_GetAll_Call {
	return &MockColumnService_GetAll_Call{Call: _e.mock.On("GetAll", ctx, boardID)}
}

func (_c *MockColumnService_GetAll_Call) Run(run func(ctx context.Context, boardID uuid.UUID)) *MockColumnService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockColumnService_GetAll_Call) Return(columns []*Column, err error) *MockColumnService_GetAll_Call {
	_c.Call.Return(columns, err)
	return _c
}

func (_c *MockColumnService_GetAll_Call) RunAndReturn(run func(ctx context.Context, boardID uuid.UUID) ([]*Column, error)) *MockColumnService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockColumnService
func (_mock *MockColumnService) Update(ctx context.Context, body ColumnUpdateRequest) (*Column, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Column
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ColumnUpdateRequest) (*Column, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ColumnUpdateRequest) *Column); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Column)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ColumnUpdateRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockColumnService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockColumnService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body ColumnUpdateRequest
func (_e *MockColumnService_Expecter) Update(ctx interface{}, body interface{}) *MockColumnService_Update_Call {
	return &MockColumnService_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockColumnService_Update_Call) Run(run func(ctx context.Context, body ColumnUpdateRequest)) *MockColumnService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ColumnUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(ColumnUpdateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockColumnService_Update_Call) Return(column *Column, err error) *MockColumnService_Update_Call {
	_c.Call.Return(column, err)
	return _c
}

func (_c *MockColumnService_Update_Call) RunAndReturn(run func(ctx context.Context, body ColumnUpdateRequest) (*Column, error)) *MockColumnService_Update_Call {
	_c.Call.Return(run)
	return _c
}
