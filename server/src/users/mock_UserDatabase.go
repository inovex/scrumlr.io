// Code generated by mockery v2.52.3. DO NOT EDIT.

package users

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockUserDatabase is an autogenerated mock type for the UserDatabase type
type MockUserDatabase struct {
	mock.Mock
}

type MockUserDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserDatabase) EXPECT() *MockUserDatabase_Expecter {
	return &MockUserDatabase_Expecter{mock: &_m.Mock}
}

// CreateAnonymousUser provides a mock function with given fields: name
func (_m *MockUserDatabase) CreateAnonymousUser(name string) (DatabaseUser, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnonymousUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (DatabaseUser, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) DatabaseUser); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_CreateAnonymousUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAnonymousUser'
type MockUserDatabase_CreateAnonymousUser_Call struct {
	*mock.Call
}

// CreateAnonymousUser is a helper method to define mock.On call
//   - name string
func (_e *MockUserDatabase_Expecter) CreateAnonymousUser(name interface{}) *MockUserDatabase_CreateAnonymousUser_Call {
	return &MockUserDatabase_CreateAnonymousUser_Call{Call: _e.mock.On("CreateAnonymousUser", name)}
}

func (_c *MockUserDatabase_CreateAnonymousUser_Call) Run(run func(name string)) *MockUserDatabase_CreateAnonymousUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserDatabase_CreateAnonymousUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_CreateAnonymousUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_CreateAnonymousUser_Call) RunAndReturn(run func(string) (DatabaseUser, error)) *MockUserDatabase_CreateAnonymousUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAppleUser provides a mock function with given fields: id, name, avatarUrl
func (_m *MockUserDatabase) CreateAppleUser(id string, name string, avatarUrl string) (DatabaseUser, error) {
	ret := _m.Called(id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppleUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (DatabaseUser, error)); ok {
		return rf(id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) DatabaseUser); ok {
		r0 = rf(id, name, avatarUrl)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_CreateAppleUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppleUser'
type MockUserDatabase_CreateAppleUser_Call struct {
	*mock.Call
}

// CreateAppleUser is a helper method to define mock.On call
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUserDatabase_Expecter) CreateAppleUser(id interface{}, name interface{}, avatarUrl interface{}) *MockUserDatabase_CreateAppleUser_Call {
	return &MockUserDatabase_CreateAppleUser_Call{Call: _e.mock.On("CreateAppleUser", id, name, avatarUrl)}
}

func (_c *MockUserDatabase_CreateAppleUser_Call) Run(run func(id string, name string, avatarUrl string)) *MockUserDatabase_CreateAppleUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserDatabase_CreateAppleUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_CreateAppleUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_CreateAppleUser_Call) RunAndReturn(run func(string, string, string) (DatabaseUser, error)) *MockUserDatabase_CreateAppleUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAzureAdUser provides a mock function with given fields: id, name, avatarUrl
func (_m *MockUserDatabase) CreateAzureAdUser(id string, name string, avatarUrl string) (DatabaseUser, error) {
	ret := _m.Called(id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateAzureAdUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (DatabaseUser, error)); ok {
		return rf(id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) DatabaseUser); ok {
		r0 = rf(id, name, avatarUrl)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_CreateAzureAdUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAzureAdUser'
type MockUserDatabase_CreateAzureAdUser_Call struct {
	*mock.Call
}

// CreateAzureAdUser is a helper method to define mock.On call
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUserDatabase_Expecter) CreateAzureAdUser(id interface{}, name interface{}, avatarUrl interface{}) *MockUserDatabase_CreateAzureAdUser_Call {
	return &MockUserDatabase_CreateAzureAdUser_Call{Call: _e.mock.On("CreateAzureAdUser", id, name, avatarUrl)}
}

func (_c *MockUserDatabase_CreateAzureAdUser_Call) Run(run func(id string, name string, avatarUrl string)) *MockUserDatabase_CreateAzureAdUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserDatabase_CreateAzureAdUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_CreateAzureAdUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_CreateAzureAdUser_Call) RunAndReturn(run func(string, string, string) (DatabaseUser, error)) *MockUserDatabase_CreateAzureAdUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGitHubUser provides a mock function with given fields: id, name, avatarUrl
func (_m *MockUserDatabase) CreateGitHubUser(id string, name string, avatarUrl string) (DatabaseUser, error) {
	ret := _m.Called(id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateGitHubUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (DatabaseUser, error)); ok {
		return rf(id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) DatabaseUser); ok {
		r0 = rf(id, name, avatarUrl)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_CreateGitHubUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGitHubUser'
type MockUserDatabase_CreateGitHubUser_Call struct {
	*mock.Call
}

// CreateGitHubUser is a helper method to define mock.On call
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUserDatabase_Expecter) CreateGitHubUser(id interface{}, name interface{}, avatarUrl interface{}) *MockUserDatabase_CreateGitHubUser_Call {
	return &MockUserDatabase_CreateGitHubUser_Call{Call: _e.mock.On("CreateGitHubUser", id, name, avatarUrl)}
}

func (_c *MockUserDatabase_CreateGitHubUser_Call) Run(run func(id string, name string, avatarUrl string)) *MockUserDatabase_CreateGitHubUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserDatabase_CreateGitHubUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_CreateGitHubUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_CreateGitHubUser_Call) RunAndReturn(run func(string, string, string) (DatabaseUser, error)) *MockUserDatabase_CreateGitHubUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGoogleUser provides a mock function with given fields: id, name, avatarUrl
func (_m *MockUserDatabase) CreateGoogleUser(id string, name string, avatarUrl string) (DatabaseUser, error) {
	ret := _m.Called(id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateGoogleUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (DatabaseUser, error)); ok {
		return rf(id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) DatabaseUser); ok {
		r0 = rf(id, name, avatarUrl)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_CreateGoogleUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGoogleUser'
type MockUserDatabase_CreateGoogleUser_Call struct {
	*mock.Call
}

// CreateGoogleUser is a helper method to define mock.On call
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUserDatabase_Expecter) CreateGoogleUser(id interface{}, name interface{}, avatarUrl interface{}) *MockUserDatabase_CreateGoogleUser_Call {
	return &MockUserDatabase_CreateGoogleUser_Call{Call: _e.mock.On("CreateGoogleUser", id, name, avatarUrl)}
}

func (_c *MockUserDatabase_CreateGoogleUser_Call) Run(run func(id string, name string, avatarUrl string)) *MockUserDatabase_CreateGoogleUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserDatabase_CreateGoogleUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_CreateGoogleUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_CreateGoogleUser_Call) RunAndReturn(run func(string, string, string) (DatabaseUser, error)) *MockUserDatabase_CreateGoogleUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMicrosoftUser provides a mock function with given fields: id, name, avatarUrl
func (_m *MockUserDatabase) CreateMicrosoftUser(id string, name string, avatarUrl string) (DatabaseUser, error) {
	ret := _m.Called(id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateMicrosoftUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (DatabaseUser, error)); ok {
		return rf(id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) DatabaseUser); ok {
		r0 = rf(id, name, avatarUrl)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_CreateMicrosoftUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMicrosoftUser'
type MockUserDatabase_CreateMicrosoftUser_Call struct {
	*mock.Call
}

// CreateMicrosoftUser is a helper method to define mock.On call
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUserDatabase_Expecter) CreateMicrosoftUser(id interface{}, name interface{}, avatarUrl interface{}) *MockUserDatabase_CreateMicrosoftUser_Call {
	return &MockUserDatabase_CreateMicrosoftUser_Call{Call: _e.mock.On("CreateMicrosoftUser", id, name, avatarUrl)}
}

func (_c *MockUserDatabase_CreateMicrosoftUser_Call) Run(run func(id string, name string, avatarUrl string)) *MockUserDatabase_CreateMicrosoftUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserDatabase_CreateMicrosoftUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_CreateMicrosoftUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_CreateMicrosoftUser_Call) RunAndReturn(run func(string, string, string) (DatabaseUser, error)) *MockUserDatabase_CreateMicrosoftUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOIDCUser provides a mock function with given fields: id, name, avatarUrl
func (_m *MockUserDatabase) CreateOIDCUser(id string, name string, avatarUrl string) (DatabaseUser, error) {
	ret := _m.Called(id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateOIDCUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (DatabaseUser, error)); ok {
		return rf(id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) DatabaseUser); ok {
		r0 = rf(id, name, avatarUrl)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_CreateOIDCUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOIDCUser'
type MockUserDatabase_CreateOIDCUser_Call struct {
	*mock.Call
}

// CreateOIDCUser is a helper method to define mock.On call
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUserDatabase_Expecter) CreateOIDCUser(id interface{}, name interface{}, avatarUrl interface{}) *MockUserDatabase_CreateOIDCUser_Call {
	return &MockUserDatabase_CreateOIDCUser_Call{Call: _e.mock.On("CreateOIDCUser", id, name, avatarUrl)}
}

func (_c *MockUserDatabase_CreateOIDCUser_Call) Run(run func(id string, name string, avatarUrl string)) *MockUserDatabase_CreateOIDCUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserDatabase_CreateOIDCUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_CreateOIDCUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_CreateOIDCUser_Call) RunAndReturn(run func(string, string, string) (DatabaseUser, error)) *MockUserDatabase_CreateOIDCUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function with given fields: id
func (_m *MockUserDatabase) GetUser(id uuid.UUID) (DatabaseUser, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (DatabaseUser, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) DatabaseUser); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserDatabase_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserDatabase_Expecter) GetUser(id interface{}) *MockUserDatabase_GetUser_Call {
	return &MockUserDatabase_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *MockUserDatabase_GetUser_Call) Run(run func(id uuid.UUID)) *MockUserDatabase_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserDatabase_GetUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_GetUser_Call) RunAndReturn(run func(uuid.UUID) (DatabaseUser, error)) *MockUserDatabase_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserAnonymous provides a mock function with given fields: id
func (_m *MockUserDatabase) IsUserAnonymous(id uuid.UUID) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsUserAnonymous")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_IsUserAnonymous_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserAnonymous'
type MockUserDatabase_IsUserAnonymous_Call struct {
	*mock.Call
}

// IsUserAnonymous is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserDatabase_Expecter) IsUserAnonymous(id interface{}) *MockUserDatabase_IsUserAnonymous_Call {
	return &MockUserDatabase_IsUserAnonymous_Call{Call: _e.mock.On("IsUserAnonymous", id)}
}

func (_c *MockUserDatabase_IsUserAnonymous_Call) Run(run func(id uuid.UUID)) *MockUserDatabase_IsUserAnonymous_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserDatabase_IsUserAnonymous_Call) Return(_a0 bool, _a1 error) *MockUserDatabase_IsUserAnonymous_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_IsUserAnonymous_Call) RunAndReturn(run func(uuid.UUID) (bool, error)) *MockUserDatabase_IsUserAnonymous_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserAvailableForKeyMigration provides a mock function with given fields: id
func (_m *MockUserDatabase) IsUserAvailableForKeyMigration(id uuid.UUID) (bool, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsUserAvailableForKeyMigration")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_IsUserAvailableForKeyMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserAvailableForKeyMigration'
type MockUserDatabase_IsUserAvailableForKeyMigration_Call struct {
	*mock.Call
}

// IsUserAvailableForKeyMigration is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserDatabase_Expecter) IsUserAvailableForKeyMigration(id interface{}) *MockUserDatabase_IsUserAvailableForKeyMigration_Call {
	return &MockUserDatabase_IsUserAvailableForKeyMigration_Call{Call: _e.mock.On("IsUserAvailableForKeyMigration", id)}
}

func (_c *MockUserDatabase_IsUserAvailableForKeyMigration_Call) Run(run func(id uuid.UUID)) *MockUserDatabase_IsUserAvailableForKeyMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserDatabase_IsUserAvailableForKeyMigration_Call) Return(_a0 bool, _a1 error) *MockUserDatabase_IsUserAvailableForKeyMigration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_IsUserAvailableForKeyMigration_Call) RunAndReturn(run func(uuid.UUID) (bool, error)) *MockUserDatabase_IsUserAvailableForKeyMigration_Call {
	_c.Call.Return(run)
	return _c
}

// SetKeyMigration provides a mock function with given fields: id
func (_m *MockUserDatabase) SetKeyMigration(id uuid.UUID) (DatabaseUser, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SetKeyMigration")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (DatabaseUser, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) DatabaseUser); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_SetKeyMigration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetKeyMigration'
type MockUserDatabase_SetKeyMigration_Call struct {
	*mock.Call
}

// SetKeyMigration is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockUserDatabase_Expecter) SetKeyMigration(id interface{}) *MockUserDatabase_SetKeyMigration_Call {
	return &MockUserDatabase_SetKeyMigration_Call{Call: _e.mock.On("SetKeyMigration", id)}
}

func (_c *MockUserDatabase_SetKeyMigration_Call) Run(run func(id uuid.UUID)) *MockUserDatabase_SetKeyMigration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockUserDatabase_SetKeyMigration_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_SetKeyMigration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_SetKeyMigration_Call) RunAndReturn(run func(uuid.UUID) (DatabaseUser, error)) *MockUserDatabase_SetKeyMigration_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: update
func (_m *MockUserDatabase) UpdateUser(update DatabaseUserUpdate) (DatabaseUser, error) {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 DatabaseUser
	var r1 error
	if rf, ok := ret.Get(0).(func(DatabaseUserUpdate) (DatabaseUser, error)); ok {
		return rf(update)
	}
	if rf, ok := ret.Get(0).(func(DatabaseUserUpdate) DatabaseUser); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Get(0).(DatabaseUser)
	}

	if rf, ok := ret.Get(1).(func(DatabaseUserUpdate) error); ok {
		r1 = rf(update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserDatabase_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserDatabase_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - update DatabaseUserUpdate
func (_e *MockUserDatabase_Expecter) UpdateUser(update interface{}) *MockUserDatabase_UpdateUser_Call {
	return &MockUserDatabase_UpdateUser_Call{Call: _e.mock.On("UpdateUser", update)}
}

func (_c *MockUserDatabase_UpdateUser_Call) Run(run func(update DatabaseUserUpdate)) *MockUserDatabase_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseUserUpdate))
	})
	return _c
}

func (_c *MockUserDatabase_UpdateUser_Call) Return(_a0 DatabaseUser, _a1 error) *MockUserDatabase_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserDatabase_UpdateUser_Call) RunAndReturn(run func(DatabaseUserUpdate) (DatabaseUser, error)) *MockUserDatabase_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserDatabase creates a new instance of MockUserDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserDatabase {
	mock := &MockUserDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
