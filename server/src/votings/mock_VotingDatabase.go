// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package votings

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"scrumlr.io/server/common/filter"
)

// NewMockVotingDatabase creates a new instance of MockVotingDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVotingDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVotingDatabase {
	mock := &MockVotingDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVotingDatabase is an autogenerated mock type for the VotingDatabase type
type MockVotingDatabase struct {
	mock.Mock
}

type MockVotingDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVotingDatabase) EXPECT() *MockVotingDatabase_Expecter {
	return &MockVotingDatabase_Expecter{mock: &_m.Mock}
}

// AddVote provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) AddVote(ctx context.Context, board uuid.UUID, user uuid.UUID, note uuid.UUID) (DatabaseVote, error) {
	ret := _mock.Called(ctx, board, user, note)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 DatabaseVote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) (DatabaseVote, error)); ok {
		return returnFunc(ctx, board, user, note)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) DatabaseVote); ok {
		r0 = returnFunc(ctx, board, user, note)
	} else {
		r0 = ret.Get(0).(DatabaseVote)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board, user, note)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingDatabase_AddVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVote'
type MockVotingDatabase_AddVote_Call struct {
	*mock.Call
}

// AddVote is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - user uuid.UUID
//   - note uuid.UUID
func (_e *MockVotingDatabase_Expecter) AddVote(ctx interface{}, board interface{}, user interface{}, note interface{}) *MockVotingDatabase_AddVote_Call {
	return &MockVotingDatabase_AddVote_Call{Call: _e.mock.On("AddVote", ctx, board, user, note)}
}

func (_c *MockVotingDatabase_AddVote_Call) Run(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, note uuid.UUID)) *MockVotingDatabase_AddVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_AddVote_Call) Return(databaseVote DatabaseVote, err error) *MockVotingDatabase_AddVote_Call {
	_c.Call.Return(databaseVote, err)
	return _c
}

func (_c *MockVotingDatabase_AddVote_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, note uuid.UUID) (DatabaseVote, error)) *MockVotingDatabase_AddVote_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) Create(ctx context.Context, insert DatabaseVotingInsert) (DatabaseVoting, error) {
	ret := _mock.Called(ctx, insert)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 DatabaseVoting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseVotingInsert) (DatabaseVoting, error)); ok {
		return returnFunc(ctx, insert)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseVotingInsert) DatabaseVoting); ok {
		r0 = returnFunc(ctx, insert)
	} else {
		r0 = ret.Get(0).(DatabaseVoting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DatabaseVotingInsert) error); ok {
		r1 = returnFunc(ctx, insert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingDatabase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVotingDatabase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - insert DatabaseVotingInsert
func (_e *MockVotingDatabase_Expecter) Create(ctx interface{}, insert interface{}) *MockVotingDatabase_Create_Call {
	return &MockVotingDatabase_Create_Call{Call: _e.mock.On("Create", ctx, insert)}
}

func (_c *MockVotingDatabase_Create_Call) Run(run func(ctx context.Context, insert DatabaseVotingInsert)) *MockVotingDatabase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DatabaseVotingInsert
		if args[1] != nil {
			arg1 = args[1].(DatabaseVotingInsert)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_Create_Call) Return(databaseVoting DatabaseVoting, err error) *MockVotingDatabase_Create_Call {
	_c.Call.Return(databaseVoting, err)
	return _c
}

func (_c *MockVotingDatabase_Create_Call) RunAndReturn(run func(ctx context.Context, insert DatabaseVotingInsert) (DatabaseVoting, error)) *MockVotingDatabase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) Get(ctx context.Context, board uuid.UUID, id uuid.UUID) (DatabaseVoting, error) {
	ret := _mock.Called(ctx, board, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 DatabaseVoting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (DatabaseVoting, error)); ok {
		return returnFunc(ctx, board, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) DatabaseVoting); ok {
		r0 = returnFunc(ctx, board, id)
	} else {
		r0 = ret.Get(0).(DatabaseVoting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingDatabase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockVotingDatabase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - id uuid.UUID
func (_e *MockVotingDatabase_Expecter) Get(ctx interface{}, board interface{}, id interface{}) *MockVotingDatabase_Get_Call {
	return &MockVotingDatabase_Get_Call{Call: _e.mock.On("Get", ctx, board, id)}
}

func (_c *MockVotingDatabase_Get_Call) Run(run func(ctx context.Context, board uuid.UUID, id uuid.UUID)) *MockVotingDatabase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_Get_Call) Return(databaseVoting DatabaseVoting, err error) *MockVotingDatabase_Get_Call {
	_c.Call.Return(databaseVoting, err)
	return _c
}

func (_c *MockVotingDatabase_Get_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, id uuid.UUID) (DatabaseVoting, error)) *MockVotingDatabase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) GetAll(ctx context.Context, board uuid.UUID) ([]DatabaseVoting, error) {
	ret := _mock.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []DatabaseVoting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]DatabaseVoting, error)); ok {
		return returnFunc(ctx, board)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []DatabaseVoting); ok {
		r0 = returnFunc(ctx, board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseVoting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingDatabase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockVotingDatabase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
func (_e *MockVotingDatabase_Expecter) GetAll(ctx interface{}, board interface{}) *MockVotingDatabase_GetAll_Call {
	return &MockVotingDatabase_GetAll_Call{Call: _e.mock.On("GetAll", ctx, board)}
}

func (_c *MockVotingDatabase_GetAll_Call) Run(run func(ctx context.Context, board uuid.UUID)) *MockVotingDatabase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_GetAll_Call) Return(databaseVotings []DatabaseVoting, err error) *MockVotingDatabase_GetAll_Call {
	_c.Call.Return(databaseVotings, err)
	return _c
}

func (_c *MockVotingDatabase_GetAll_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID) ([]DatabaseVoting, error)) *MockVotingDatabase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenVoting provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) GetOpenVoting(ctx context.Context, board uuid.UUID) (DatabaseVoting, error) {
	ret := _mock.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenVoting")
	}

	var r0 DatabaseVoting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (DatabaseVoting, error)); ok {
		return returnFunc(ctx, board)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) DatabaseVoting); ok {
		r0 = returnFunc(ctx, board)
	} else {
		r0 = ret.Get(0).(DatabaseVoting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingDatabase_GetOpenVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenVoting'
type MockVotingDatabase_GetOpenVoting_Call struct {
	*mock.Call
}

// GetOpenVoting is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
func (_e *MockVotingDatabase_Expecter) GetOpenVoting(ctx interface{}, board interface{}) *MockVotingDatabase_GetOpenVoting_Call {
	return &MockVotingDatabase_GetOpenVoting_Call{Call: _e.mock.On("GetOpenVoting", ctx, board)}
}

func (_c *MockVotingDatabase_GetOpenVoting_Call) Run(run func(ctx context.Context, board uuid.UUID)) *MockVotingDatabase_GetOpenVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_GetOpenVoting_Call) Return(databaseVoting DatabaseVoting, err error) *MockVotingDatabase_GetOpenVoting_Call {
	_c.Call.Return(databaseVoting, err)
	return _c
}

func (_c *MockVotingDatabase_GetOpenVoting_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID) (DatabaseVoting, error)) *MockVotingDatabase_GetOpenVoting_Call {
	_c.Call.Return(run)
	return _c
}

// GetVotes provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) GetVotes(ctx context.Context, f filter.VoteFilter) ([]DatabaseVote, error) {
	ret := _mock.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for GetVotes")
	}

	var r0 []DatabaseVote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, filter.VoteFilter) ([]DatabaseVote, error)); ok {
		return returnFunc(ctx, f)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, filter.VoteFilter) []DatabaseVote); ok {
		r0 = returnFunc(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseVote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, filter.VoteFilter) error); ok {
		r1 = returnFunc(ctx, f)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingDatabase_GetVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotes'
type MockVotingDatabase_GetVotes_Call struct {
	*mock.Call
}

// GetVotes is a helper method to define mock.On call
//   - ctx context.Context
//   - f filter.VoteFilter
func (_e *MockVotingDatabase_Expecter) GetVotes(ctx interface{}, f interface{}) *MockVotingDatabase_GetVotes_Call {
	return &MockVotingDatabase_GetVotes_Call{Call: _e.mock.On("GetVotes", ctx, f)}
}

func (_c *MockVotingDatabase_GetVotes_Call) Run(run func(ctx context.Context, f filter.VoteFilter)) *MockVotingDatabase_GetVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 filter.VoteFilter
		if args[1] != nil {
			arg1 = args[1].(filter.VoteFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_GetVotes_Call) Return(databaseVotes []DatabaseVote, err error) *MockVotingDatabase_GetVotes_Call {
	_c.Call.Return(databaseVotes, err)
	return _c
}

func (_c *MockVotingDatabase_GetVotes_Call) RunAndReturn(run func(ctx context.Context, f filter.VoteFilter) ([]DatabaseVote, error)) *MockVotingDatabase_GetVotes_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVote provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) RemoveVote(ctx context.Context, board uuid.UUID, user uuid.UUID, note uuid.UUID) error {
	ret := _mock.Called(ctx, board, user, note)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, board, user, note)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVotingDatabase_RemoveVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVote'
type MockVotingDatabase_RemoveVote_Call struct {
	*mock.Call
}

// RemoveVote is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - user uuid.UUID
//   - note uuid.UUID
func (_e *MockVotingDatabase_Expecter) RemoveVote(ctx interface{}, board interface{}, user interface{}, note interface{}) *MockVotingDatabase_RemoveVote_Call {
	return &MockVotingDatabase_RemoveVote_Call{Call: _e.mock.On("RemoveVote", ctx, board, user, note)}
}

func (_c *MockVotingDatabase_RemoveVote_Call) Run(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, note uuid.UUID)) *MockVotingDatabase_RemoveVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_RemoveVote_Call) Return(err error) *MockVotingDatabase_RemoveVote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVotingDatabase_RemoveVote_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, note uuid.UUID) error) *MockVotingDatabase_RemoveVote_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockVotingDatabase
func (_mock *MockVotingDatabase) Update(ctx context.Context, update DatabaseVotingUpdate) (DatabaseVoting, error) {
	ret := _mock.Called(ctx, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 DatabaseVoting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseVotingUpdate) (DatabaseVoting, error)); ok {
		return returnFunc(ctx, update)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseVotingUpdate) DatabaseVoting); ok {
		r0 = returnFunc(ctx, update)
	} else {
		r0 = ret.Get(0).(DatabaseVoting)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DatabaseVotingUpdate) error); ok {
		r1 = returnFunc(ctx, update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingDatabase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockVotingDatabase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - update DatabaseVotingUpdate
func (_e *MockVotingDatabase_Expecter) Update(ctx interface{}, update interface{}) *MockVotingDatabase_Update_Call {
	return &MockVotingDatabase_Update_Call{Call: _e.mock.On("Update", ctx, update)}
}

func (_c *MockVotingDatabase_Update_Call) Run(run func(ctx context.Context, update DatabaseVotingUpdate)) *MockVotingDatabase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DatabaseVotingUpdate
		if args[1] != nil {
			arg1 = args[1].(DatabaseVotingUpdate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingDatabase_Update_Call) Return(databaseVoting DatabaseVoting, err error) *MockVotingDatabase_Update_Call {
	_c.Call.Return(databaseVoting, err)
	return _c
}

func (_c *MockVotingDatabase_Update_Call) RunAndReturn(run func(ctx context.Context, update DatabaseVotingUpdate) (DatabaseVoting, error)) *MockVotingDatabase_Update_Call {
	_c.Call.Return(run)
	return _c
}
