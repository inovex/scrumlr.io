// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package votings

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"scrumlr.io/server/common/filter"
)

// NewMockVotingService creates a new instance of MockVotingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVotingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVotingService {
	mock := &MockVotingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVotingService is an autogenerated mock type for the VotingService type
type MockVotingService struct {
	mock.Mock
}

type MockVotingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVotingService) EXPECT() *MockVotingService_Expecter {
	return &MockVotingService_Expecter{mock: &_m.Mock}
}

// AddVote provides a mock function for the type MockVotingService
func (_mock *MockVotingService) AddVote(ctx context.Context, req VoteRequest) (*Vote, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 *Vote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, VoteRequest) (*Vote, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, VoteRequest) *Vote); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Vote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, VoteRequest) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingService_AddVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVote'
type MockVotingService_AddVote_Call struct {
	*mock.Call
}

// AddVote is a helper method to define mock.On call
//   - ctx context.Context
//   - req VoteRequest
func (_e *MockVotingService_Expecter) AddVote(ctx interface{}, req interface{}) *MockVotingService_AddVote_Call {
	return &MockVotingService_AddVote_Call{Call: _e.mock.On("AddVote", ctx, req)}
}

func (_c *MockVotingService_AddVote_Call) Run(run func(ctx context.Context, req VoteRequest)) *MockVotingService_AddVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 VoteRequest
		if args[1] != nil {
			arg1 = args[1].(VoteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingService_AddVote_Call) Return(vote *Vote, err error) *MockVotingService_AddVote_Call {
	_c.Call.Return(vote, err)
	return _c
}

func (_c *MockVotingService_AddVote_Call) RunAndReturn(run func(ctx context.Context, req VoteRequest) (*Vote, error)) *MockVotingService_AddVote_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockVotingService
func (_mock *MockVotingService) Create(ctx context.Context, body VotingCreateRequest) (*Voting, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Voting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, VotingCreateRequest) (*Voting, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, VotingCreateRequest) *Voting); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Voting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, VotingCreateRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVotingService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - body VotingCreateRequest
func (_e *MockVotingService_Expecter) Create(ctx interface{}, body interface{}) *MockVotingService_Create_Call {
	return &MockVotingService_Create_Call{Call: _e.mock.On("Create", ctx, body)}
}

func (_c *MockVotingService_Create_Call) Run(run func(ctx context.Context, body VotingCreateRequest)) *MockVotingService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 VotingCreateRequest
		if args[1] != nil {
			arg1 = args[1].(VotingCreateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingService_Create_Call) Return(voting *Voting, err error) *MockVotingService_Create_Call {
	_c.Call.Return(voting, err)
	return _c
}

func (_c *MockVotingService_Create_Call) RunAndReturn(run func(ctx context.Context, body VotingCreateRequest) (*Voting, error)) *MockVotingService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockVotingService
func (_mock *MockVotingService) Get(ctx context.Context, board uuid.UUID, id uuid.UUID) (*Voting, error) {
	ret := _mock.Called(ctx, board, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Voting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*Voting, error)); ok {
		return returnFunc(ctx, board, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *Voting); ok {
		r0 = returnFunc(ctx, board, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Voting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockVotingService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - id uuid.UUID
func (_e *MockVotingService_Expecter) Get(ctx interface{}, board interface{}, id interface{}) *MockVotingService_Get_Call {
	return &MockVotingService_Get_Call{Call: _e.mock.On("Get", ctx, board, id)}
}

func (_c *MockVotingService_Get_Call) Run(run func(ctx context.Context, board uuid.UUID, id uuid.UUID)) *MockVotingService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVotingService_Get_Call) Return(voting *Voting, err error) *MockVotingService_Get_Call {
	_c.Call.Return(voting, err)
	return _c
}

func (_c *MockVotingService_Get_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, id uuid.UUID) (*Voting, error)) *MockVotingService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockVotingService
func (_mock *MockVotingService) GetAll(ctx context.Context, board uuid.UUID) ([]*Voting, error) {
	ret := _mock.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*Voting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Voting, error)); ok {
		return returnFunc(ctx, board)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Voting); ok {
		r0 = returnFunc(ctx, board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Voting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockVotingService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
func (_e *MockVotingService_Expecter) GetAll(ctx interface{}, board interface{}) *MockVotingService_GetAll_Call {
	return &MockVotingService_GetAll_Call{Call: _e.mock.On("GetAll", ctx, board)}
}

func (_c *MockVotingService_GetAll_Call) Run(run func(ctx context.Context, board uuid.UUID)) *MockVotingService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingService_GetAll_Call) Return(votings []*Voting, err error) *MockVotingService_GetAll_Call {
	_c.Call.Return(votings, err)
	return _c
}

func (_c *MockVotingService_GetAll_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID) ([]*Voting, error)) *MockVotingService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpen provides a mock function for the type MockVotingService
func (_mock *MockVotingService) GetOpen(ctx context.Context, board uuid.UUID) (*Voting, error) {
	ret := _mock.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for GetOpen")
	}

	var r0 *Voting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Voting, error)); ok {
		return returnFunc(ctx, board)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Voting); ok {
		r0 = returnFunc(ctx, board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Voting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingService_GetOpen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpen'
type MockVotingService_GetOpen_Call struct {
	*mock.Call
}

// GetOpen is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
func (_e *MockVotingService_Expecter) GetOpen(ctx interface{}, board interface{}) *MockVotingService_GetOpen_Call {
	return &MockVotingService_GetOpen_Call{Call: _e.mock.On("GetOpen", ctx, board)}
}

func (_c *MockVotingService_GetOpen_Call) Run(run func(ctx context.Context, board uuid.UUID)) *MockVotingService_GetOpen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingService_GetOpen_Call) Return(voting *Voting, err error) *MockVotingService_GetOpen_Call {
	_c.Call.Return(voting, err)
	return _c
}

func (_c *MockVotingService_GetOpen_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID) (*Voting, error)) *MockVotingService_GetOpen_Call {
	_c.Call.Return(run)
	return _c
}

// GetVotes provides a mock function for the type MockVotingService
func (_mock *MockVotingService) GetVotes(ctx context.Context, f filter.VoteFilter) ([]*Vote, error) {
	ret := _mock.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for GetVotes")
	}

	var r0 []*Vote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, filter.VoteFilter) ([]*Vote, error)); ok {
		return returnFunc(ctx, f)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, filter.VoteFilter) []*Vote); ok {
		r0 = returnFunc(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Vote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, filter.VoteFilter) error); ok {
		r1 = returnFunc(ctx, f)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingService_GetVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotes'
type MockVotingService_GetVotes_Call struct {
	*mock.Call
}

// GetVotes is a helper method to define mock.On call
//   - ctx context.Context
//   - f filter.VoteFilter
func (_e *MockVotingService_Expecter) GetVotes(ctx interface{}, f interface{}) *MockVotingService_GetVotes_Call {
	return &MockVotingService_GetVotes_Call{Call: _e.mock.On("GetVotes", ctx, f)}
}

func (_c *MockVotingService_GetVotes_Call) Run(run func(ctx context.Context, f filter.VoteFilter)) *MockVotingService_GetVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 filter.VoteFilter
		if args[1] != nil {
			arg1 = args[1].(filter.VoteFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingService_GetVotes_Call) Return(votes []*Vote, err error) *MockVotingService_GetVotes_Call {
	_c.Call.Return(votes, err)
	return _c
}

func (_c *MockVotingService_GetVotes_Call) RunAndReturn(run func(ctx context.Context, f filter.VoteFilter) ([]*Vote, error)) *MockVotingService_GetVotes_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVote provides a mock function for the type MockVotingService
func (_mock *MockVotingService) RemoveVote(ctx context.Context, req VoteRequest) error {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, VoteRequest) error); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVotingService_RemoveVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVote'
type MockVotingService_RemoveVote_Call struct {
	*mock.Call
}

// RemoveVote is a helper method to define mock.On call
//   - ctx context.Context
//   - req VoteRequest
func (_e *MockVotingService_Expecter) RemoveVote(ctx interface{}, req interface{}) *MockVotingService_RemoveVote_Call {
	return &MockVotingService_RemoveVote_Call{Call: _e.mock.On("RemoveVote", ctx, req)}
}

func (_c *MockVotingService_RemoveVote_Call) Run(run func(ctx context.Context, req VoteRequest)) *MockVotingService_RemoveVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 VoteRequest
		if args[1] != nil {
			arg1 = args[1].(VoteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVotingService_RemoveVote_Call) Return(err error) *MockVotingService_RemoveVote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVotingService_RemoveVote_Call) RunAndReturn(run func(ctx context.Context, req VoteRequest) error) *MockVotingService_RemoveVote_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockVotingService
func (_mock *MockVotingService) Update(ctx context.Context, body VotingUpdateRequest, affectedNotes []Note) (*Voting, error) {
	ret := _mock.Called(ctx, body, affectedNotes)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Voting
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, VotingUpdateRequest, []Note) (*Voting, error)); ok {
		return returnFunc(ctx, body, affectedNotes)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, VotingUpdateRequest, []Note) *Voting); ok {
		r0 = returnFunc(ctx, body, affectedNotes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Voting)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, VotingUpdateRequest, []Note) error); ok {
		r1 = returnFunc(ctx, body, affectedNotes)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVotingService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockVotingService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body VotingUpdateRequest
//   - affectedNotes []Note
func (_e *MockVotingService_Expecter) Update(ctx interface{}, body interface{}, affectedNotes interface{}) *MockVotingService_Update_Call {
	return &MockVotingService_Update_Call{Call: _e.mock.On("Update", ctx, body, affectedNotes)}
}

func (_c *MockVotingService_Update_Call) Run(run func(ctx context.Context, body VotingUpdateRequest, affectedNotes []Note)) *MockVotingService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 VotingUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(VotingUpdateRequest)
		}
		var arg2 []Note
		if args[2] != nil {
			arg2 = args[2].([]Note)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVotingService_Update_Call) Return(voting *Voting, err error) *MockVotingService_Update_Call {
	_c.Call.Return(voting, err)
	return _c
}

func (_c *MockVotingService_Update_Call) RunAndReturn(run func(ctx context.Context, body VotingUpdateRequest, affectedNotes []Note) (*Voting, error)) *MockVotingService_Update_Call {
	_c.Call.Return(run)
	return _c
}
