// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package boards

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"scrumlr.io/server/columns"
)

// NewMockBoardDatabase creates a new instance of MockBoardDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBoardDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBoardDatabase {
	mock := &MockBoardDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBoardDatabase is an autogenerated mock type for the BoardDatabase type
type MockBoardDatabase struct {
	mock.Mock
}

type MockBoardDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBoardDatabase) EXPECT() *MockBoardDatabase_Expecter {
	return &MockBoardDatabase_Expecter{mock: &_m.Mock}
}

// CreateBoard provides a mock function for the type MockBoardDatabase
func (_mock *MockBoardDatabase) CreateBoard(ctx context.Context, creator uuid.UUID, board DatabaseBoardInsert, columns1 []columns.DatabaseColumnInsert) (DatabaseBoard, error) {
	ret := _mock.Called(ctx, creator, board, columns1)

	if len(ret) == 0 {
		panic("no return value specified for CreateBoard")
	}

	var r0 DatabaseBoard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, DatabaseBoardInsert, []columns.DatabaseColumnInsert) (DatabaseBoard, error)); ok {
		return returnFunc(ctx, creator, board, columns1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, DatabaseBoardInsert, []columns.DatabaseColumnInsert) DatabaseBoard); ok {
		r0 = returnFunc(ctx, creator, board, columns1)
	} else {
		r0 = ret.Get(0).(DatabaseBoard)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, DatabaseBoardInsert, []columns.DatabaseColumnInsert) error); ok {
		r1 = returnFunc(ctx, creator, board, columns1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardDatabase_CreateBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBoard'
type MockBoardDatabase_CreateBoard_Call struct {
	*mock.Call
}

// CreateBoard is a helper method to define mock.On call
//   - ctx context.Context
//   - creator uuid.UUID
//   - board DatabaseBoardInsert
//   - columns1 []columns.DatabaseColumnInsert
func (_e *MockBoardDatabase_Expecter) CreateBoard(ctx interface{}, creator interface{}, board interface{}, columns1 interface{}) *MockBoardDatabase_CreateBoard_Call {
	return &MockBoardDatabase_CreateBoard_Call{Call: _e.mock.On("CreateBoard", ctx, creator, board, columns1)}
}

func (_c *MockBoardDatabase_CreateBoard_Call) Run(run func(ctx context.Context, creator uuid.UUID, board DatabaseBoardInsert, columns1 []columns.DatabaseColumnInsert)) *MockBoardDatabase_CreateBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 DatabaseBoardInsert
		if args[2] != nil {
			arg2 = args[2].(DatabaseBoardInsert)
		}
		var arg3 []columns.DatabaseColumnInsert
		if args[3] != nil {
			arg3 = args[3].([]columns.DatabaseColumnInsert)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockBoardDatabase_CreateBoard_Call) Return(databaseBoard DatabaseBoard, err error) *MockBoardDatabase_CreateBoard_Call {
	_c.Call.Return(databaseBoard, err)
	return _c
}

func (_c *MockBoardDatabase_CreateBoard_Call) RunAndReturn(run func(ctx context.Context, creator uuid.UUID, board DatabaseBoardInsert, columns1 []columns.DatabaseColumnInsert) (DatabaseBoard, error)) *MockBoardDatabase_CreateBoard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBoard provides a mock function for the type MockBoardDatabase
func (_mock *MockBoardDatabase) DeleteBoard(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBoard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBoardDatabase_DeleteBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBoard'
type MockBoardDatabase_DeleteBoard_Call struct {
	*mock.Call
}

// DeleteBoard is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardDatabase_Expecter) DeleteBoard(ctx interface{}, id interface{}) *MockBoardDatabase_DeleteBoard_Call {
	return &MockBoardDatabase_DeleteBoard_Call{Call: _e.mock.On("DeleteBoard", ctx, id)}
}

func (_c *MockBoardDatabase_DeleteBoard_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardDatabase_DeleteBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardDatabase_DeleteBoard_Call) Return(err error) *MockBoardDatabase_DeleteBoard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBoardDatabase_DeleteBoard_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockBoardDatabase_DeleteBoard_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoard provides a mock function for the type MockBoardDatabase
func (_mock *MockBoardDatabase) GetBoard(ctx context.Context, id uuid.UUID) (DatabaseBoard, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetBoard")
	}

	var r0 DatabaseBoard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (DatabaseBoard, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) DatabaseBoard); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(DatabaseBoard)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardDatabase_GetBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoard'
type MockBoardDatabase_GetBoard_Call struct {
	*mock.Call
}

// GetBoard is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardDatabase_Expecter) GetBoard(ctx interface{}, id interface{}) *MockBoardDatabase_GetBoard_Call {
	return &MockBoardDatabase_GetBoard_Call{Call: _e.mock.On("GetBoard", ctx, id)}
}

func (_c *MockBoardDatabase_GetBoard_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardDatabase_GetBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardDatabase_GetBoard_Call) Return(databaseBoard DatabaseBoard, err error) *MockBoardDatabase_GetBoard_Call {
	_c.Call.Return(databaseBoard, err)
	return _c
}

func (_c *MockBoardDatabase_GetBoard_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (DatabaseBoard, error)) *MockBoardDatabase_GetBoard_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoards provides a mock function for the type MockBoardDatabase
func (_mock *MockBoardDatabase) GetBoards(ctx context.Context, userID uuid.UUID) ([]DatabaseBoard, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBoards")
	}

	var r0 []DatabaseBoard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]DatabaseBoard, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []DatabaseBoard); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoard)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardDatabase_GetBoards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoards'
type MockBoardDatabase_GetBoards_Call struct {
	*mock.Call
}

// GetBoards is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockBoardDatabase_Expecter) GetBoards(ctx interface{}, userID interface{}) *MockBoardDatabase_GetBoards_Call {
	return &MockBoardDatabase_GetBoards_Call{Call: _e.mock.On("GetBoards", ctx, userID)}
}

func (_c *MockBoardDatabase_GetBoards_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockBoardDatabase_GetBoards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardDatabase_GetBoards_Call) Return(databaseBoards []DatabaseBoard, err error) *MockBoardDatabase_GetBoards_Call {
	_c.Call.Return(databaseBoards, err)
	return _c
}

func (_c *MockBoardDatabase_GetBoards_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) ([]DatabaseBoard, error)) *MockBoardDatabase_GetBoards_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBoard provides a mock function for the type MockBoardDatabase
func (_mock *MockBoardDatabase) UpdateBoard(ctx context.Context, update DatabaseBoardUpdate) (DatabaseBoard, error) {
	ret := _mock.Called(ctx, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoard")
	}

	var r0 DatabaseBoard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardUpdate) (DatabaseBoard, error)); ok {
		return returnFunc(ctx, update)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardUpdate) DatabaseBoard); ok {
		r0 = returnFunc(ctx, update)
	} else {
		r0 = ret.Get(0).(DatabaseBoard)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DatabaseBoardUpdate) error); ok {
		r1 = returnFunc(ctx, update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardDatabase_UpdateBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBoard'
type MockBoardDatabase_UpdateBoard_Call struct {
	*mock.Call
}

// UpdateBoard is a helper method to define mock.On call
//   - ctx context.Context
//   - update DatabaseBoardUpdate
func (_e *MockBoardDatabase_Expecter) UpdateBoard(ctx interface{}, update interface{}) *MockBoardDatabase_UpdateBoard_Call {
	return &MockBoardDatabase_UpdateBoard_Call{Call: _e.mock.On("UpdateBoard", ctx, update)}
}

func (_c *MockBoardDatabase_UpdateBoard_Call) Run(run func(ctx context.Context, update DatabaseBoardUpdate)) *MockBoardDatabase_UpdateBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DatabaseBoardUpdate
		if args[1] != nil {
			arg1 = args[1].(DatabaseBoardUpdate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardDatabase_UpdateBoard_Call) Return(databaseBoard DatabaseBoard, err error) *MockBoardDatabase_UpdateBoard_Call {
	_c.Call.Return(databaseBoard, err)
	return _c
}

func (_c *MockBoardDatabase_UpdateBoard_Call) RunAndReturn(run func(ctx context.Context, update DatabaseBoardUpdate) (DatabaseBoard, error)) *MockBoardDatabase_UpdateBoard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBoardTimer provides a mock function for the type MockBoardDatabase
func (_mock *MockBoardDatabase) UpdateBoardTimer(ctx context.Context, update DatabaseBoardTimerUpdate) (DatabaseBoard, error) {
	ret := _mock.Called(ctx, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoardTimer")
	}

	var r0 DatabaseBoard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardTimerUpdate) (DatabaseBoard, error)); ok {
		return returnFunc(ctx, update)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, DatabaseBoardTimerUpdate) DatabaseBoard); ok {
		r0 = returnFunc(ctx, update)
	} else {
		r0 = ret.Get(0).(DatabaseBoard)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, DatabaseBoardTimerUpdate) error); ok {
		r1 = returnFunc(ctx, update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBoardDatabase_UpdateBoardTimer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBoardTimer'
type MockBoardDatabase_UpdateBoardTimer_Call struct {
	*mock.Call
}

// UpdateBoardTimer is a helper method to define mock.On call
//   - ctx context.Context
//   - update DatabaseBoardTimerUpdate
func (_e *MockBoardDatabase_Expecter) UpdateBoardTimer(ctx interface{}, update interface{}) *MockBoardDatabase_UpdateBoardTimer_Call {
	return &MockBoardDatabase_UpdateBoardTimer_Call{Call: _e.mock.On("UpdateBoardTimer", ctx, update)}
}

func (_c *MockBoardDatabase_UpdateBoardTimer_Call) Run(run func(ctx context.Context, update DatabaseBoardTimerUpdate)) *MockBoardDatabase_UpdateBoardTimer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 DatabaseBoardTimerUpdate
		if args[1] != nil {
			arg1 = args[1].(DatabaseBoardTimerUpdate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBoardDatabase_UpdateBoardTimer_Call) Return(databaseBoard DatabaseBoard, err error) *MockBoardDatabase_UpdateBoardTimer_Call {
	_c.Call.Return(databaseBoard, err)
	return _c
}

func (_c *MockBoardDatabase_UpdateBoardTimer_Call) RunAndReturn(run func(ctx context.Context, update DatabaseBoardTimerUpdate) (DatabaseBoard, error)) *MockBoardDatabase_UpdateBoardTimer_Call {
	_c.Call.Return(run)
	return _c
}
