// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package realtime

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockClient
func (_mock *MockClient) Publish(subject string, event interface{}) error {
	ret := _mock.Called(subject, event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(subject, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - subject string
//   - event interface{}
func (_e *MockClient_Expecter) Publish(subject interface{}, event interface{}) *MockClient_Publish_Call {
	return &MockClient_Publish_Call{Call: _e.mock.On("Publish", subject, event)}
}

func (_c *MockClient_Publish_Call) Run(run func(subject string, event interface{})) *MockClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_Publish_Call) Return(err error) *MockClient_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Publish_Call) RunAndReturn(run func(subject string, event interface{}) error) *MockClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToBoardEvents provides a mock function for the type MockClient
func (_mock *MockClient) SubscribeToBoardEvents(subject string) (chan *BoardEvent, error) {
	ret := _mock.Called(subject)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToBoardEvents")
	}

	var r0 chan *BoardEvent
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (chan *BoardEvent, error)); ok {
		return returnFunc(subject)
	}
	if returnFunc, ok := ret.Get(0).(func(string) chan *BoardEvent); ok {
		r0 = returnFunc(subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *BoardEvent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(subject)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SubscribeToBoardEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToBoardEvents'
type MockClient_SubscribeToBoardEvents_Call struct {
	*mock.Call
}

// SubscribeToBoardEvents is a helper method to define mock.On call
//   - subject string
func (_e *MockClient_Expecter) SubscribeToBoardEvents(subject interface{}) *MockClient_SubscribeToBoardEvents_Call {
	return &MockClient_SubscribeToBoardEvents_Call{Call: _e.mock.On("SubscribeToBoardEvents", subject)}
}

func (_c *MockClient_SubscribeToBoardEvents_Call) Run(run func(subject string)) *MockClient_SubscribeToBoardEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_SubscribeToBoardEvents_Call) Return(boardEventCh chan *BoardEvent, err error) *MockClient_SubscribeToBoardEvents_Call {
	_c.Call.Return(boardEventCh, err)
	return _c
}

func (_c *MockClient_SubscribeToBoardEvents_Call) RunAndReturn(run func(subject string) (chan *BoardEvent, error)) *MockClient_SubscribeToBoardEvents_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeToBoardSessionEvents provides a mock function for the type MockClient
func (_mock *MockClient) SubscribeToBoardSessionEvents(subject string) (chan *BoardSessionRequestEventType, error) {
	ret := _mock.Called(subject)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeToBoardSessionEvents")
	}

	var r0 chan *BoardSessionRequestEventType
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (chan *BoardSessionRequestEventType, error)); ok {
		return returnFunc(subject)
	}
	if returnFunc, ok := ret.Get(0).(func(string) chan *BoardSessionRequestEventType); ok {
		r0 = returnFunc(subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *BoardSessionRequestEventType)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(subject)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_SubscribeToBoardSessionEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeToBoardSessionEvents'
type MockClient_SubscribeToBoardSessionEvents_Call struct {
	*mock.Call
}

// SubscribeToBoardSessionEvents is a helper method to define mock.On call
//   - subject string
func (_e *MockClient_Expecter) SubscribeToBoardSessionEvents(subject interface{}) *MockClient_SubscribeToBoardSessionEvents_Call {
	return &MockClient_SubscribeToBoardSessionEvents_Call{Call: _e.mock.On("SubscribeToBoardSessionEvents", subject)}
}

func (_c *MockClient_SubscribeToBoardSessionEvents_Call) Run(run func(subject string)) *MockClient_SubscribeToBoardSessionEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockClient_SubscribeToBoardSessionEvents_Call) Return(boardSessionRequestEventTypeCh chan *BoardSessionRequestEventType, err error) *MockClient_SubscribeToBoardSessionEvents_Call {
	_c.Call.Return(boardSessionRequestEventTypeCh, err)
	return _c
}

func (_c *MockClient_SubscribeToBoardSessionEvents_Call) RunAndReturn(run func(subject string) (chan *BoardSessionRequestEventType, error)) *MockClient_SubscribeToBoardSessionEvents_Call {
	_c.Call.Return(run)
	return _c
}
