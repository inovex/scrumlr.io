// Code generated by mockery v2.53.0. DO NOT EDIT.

package votes

import (
	mock "github.com/stretchr/testify/mock"
	filter "scrumlr.io/server/common/filter"

	uuid "github.com/google/uuid"
)

// MockVotingDatabase is an autogenerated mock type for the VotingDatabase type
type MockVotingDatabase struct {
	mock.Mock
}

type MockVotingDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVotingDatabase) EXPECT() *MockVotingDatabase_Expecter {
	return &MockVotingDatabase_Expecter{mock: &_m.Mock}
}

// AddVote provides a mock function with given fields: board, user, note
func (_m *MockVotingDatabase) AddVote(board uuid.UUID, user uuid.UUID, note uuid.UUID) (VoteDB, error) {
	ret := _m.Called(board, user, note)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 VoteDB
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) (VoteDB, error)); ok {
		return rf(board, user, note)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) VoteDB); ok {
		r0 = rf(board, user, note)
	} else {
		r0 = ret.Get(0).(VoteDB)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(board, user, note)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotingDatabase_AddVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVote'
type MockVotingDatabase_AddVote_Call struct {
	*mock.Call
}

// AddVote is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
//   - note uuid.UUID
func (_e *MockVotingDatabase_Expecter) AddVote(board interface{}, user interface{}, note interface{}) *MockVotingDatabase_AddVote_Call {
	return &MockVotingDatabase_AddVote_Call{Call: _e.mock.On("AddVote", board, user, note)}
}

func (_c *MockVotingDatabase_AddVote_Call) Run(run func(board uuid.UUID, user uuid.UUID, note uuid.UUID)) *MockVotingDatabase_AddVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockVotingDatabase_AddVote_Call) Return(_a0 VoteDB, _a1 error) *MockVotingDatabase_AddVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotingDatabase_AddVote_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID) (VoteDB, error)) *MockVotingDatabase_AddVote_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVoting provides a mock function with given fields: insert
func (_m *MockVotingDatabase) CreateVoting(insert VotingInsert) (VotingDB, error) {
	ret := _m.Called(insert)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoting")
	}

	var r0 VotingDB
	var r1 error
	if rf, ok := ret.Get(0).(func(VotingInsert) (VotingDB, error)); ok {
		return rf(insert)
	}
	if rf, ok := ret.Get(0).(func(VotingInsert) VotingDB); ok {
		r0 = rf(insert)
	} else {
		r0 = ret.Get(0).(VotingDB)
	}

	if rf, ok := ret.Get(1).(func(VotingInsert) error); ok {
		r1 = rf(insert)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotingDatabase_CreateVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVoting'
type MockVotingDatabase_CreateVoting_Call struct {
	*mock.Call
}

// CreateVoting is a helper method to define mock.On call
//   - insert VotingInsert
func (_e *MockVotingDatabase_Expecter) CreateVoting(insert interface{}) *MockVotingDatabase_CreateVoting_Call {
	return &MockVotingDatabase_CreateVoting_Call{Call: _e.mock.On("CreateVoting", insert)}
}

func (_c *MockVotingDatabase_CreateVoting_Call) Run(run func(insert VotingInsert)) *MockVotingDatabase_CreateVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(VotingInsert))
	})
	return _c
}

func (_c *MockVotingDatabase_CreateVoting_Call) Return(_a0 VotingDB, _a1 error) *MockVotingDatabase_CreateVoting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotingDatabase_CreateVoting_Call) RunAndReturn(run func(VotingInsert) (VotingDB, error)) *MockVotingDatabase_CreateVoting_Call {
	_c.Call.Return(run)
	return _c
}

// GetOpenVoting provides a mock function with given fields: board
func (_m *MockVotingDatabase) GetOpenVoting(board uuid.UUID) (VotingDB, error) {
	ret := _m.Called(board)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenVoting")
	}

	var r0 VotingDB
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (VotingDB, error)); ok {
		return rf(board)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) VotingDB); ok {
		r0 = rf(board)
	} else {
		r0 = ret.Get(0).(VotingDB)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(board)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotingDatabase_GetOpenVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOpenVoting'
type MockVotingDatabase_GetOpenVoting_Call struct {
	*mock.Call
}

// GetOpenVoting is a helper method to define mock.On call
//   - board uuid.UUID
func (_e *MockVotingDatabase_Expecter) GetOpenVoting(board interface{}) *MockVotingDatabase_GetOpenVoting_Call {
	return &MockVotingDatabase_GetOpenVoting_Call{Call: _e.mock.On("GetOpenVoting", board)}
}

func (_c *MockVotingDatabase_GetOpenVoting_Call) Run(run func(board uuid.UUID)) *MockVotingDatabase_GetOpenVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockVotingDatabase_GetOpenVoting_Call) Return(_a0 VotingDB, _a1 error) *MockVotingDatabase_GetOpenVoting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotingDatabase_GetOpenVoting_Call) RunAndReturn(run func(uuid.UUID) (VotingDB, error)) *MockVotingDatabase_GetOpenVoting_Call {
	_c.Call.Return(run)
	return _c
}

// GetVotes provides a mock function with given fields: f
func (_m *MockVotingDatabase) GetVotes(f filter.VoteFilter) ([]VoteDB, error) {
	ret := _m.Called(f)

	if len(ret) == 0 {
		panic("no return value specified for GetVotes")
	}

	var r0 []VoteDB
	var r1 error
	if rf, ok := ret.Get(0).(func(filter.VoteFilter) ([]VoteDB, error)); ok {
		return rf(f)
	}
	if rf, ok := ret.Get(0).(func(filter.VoteFilter) []VoteDB); ok {
		r0 = rf(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]VoteDB)
		}
	}

	if rf, ok := ret.Get(1).(func(filter.VoteFilter) error); ok {
		r1 = rf(f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotingDatabase_GetVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotes'
type MockVotingDatabase_GetVotes_Call struct {
	*mock.Call
}

// GetVotes is a helper method to define mock.On call
//   - f filter.VoteFilter
func (_e *MockVotingDatabase_Expecter) GetVotes(f interface{}) *MockVotingDatabase_GetVotes_Call {
	return &MockVotingDatabase_GetVotes_Call{Call: _e.mock.On("GetVotes", f)}
}

func (_c *MockVotingDatabase_GetVotes_Call) Run(run func(f filter.VoteFilter)) *MockVotingDatabase_GetVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(filter.VoteFilter))
	})
	return _c
}

func (_c *MockVotingDatabase_GetVotes_Call) Return(_a0 []VoteDB, _a1 error) *MockVotingDatabase_GetVotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotingDatabase_GetVotes_Call) RunAndReturn(run func(filter.VoteFilter) ([]VoteDB, error)) *MockVotingDatabase_GetVotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetVoting provides a mock function with given fields: board, id
func (_m *MockVotingDatabase) GetVoting(board uuid.UUID, id uuid.UUID) (VotingDB, []VoteDB, error) {
	ret := _m.Called(board, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVoting")
	}

	var r0 VotingDB
	var r1 []VoteDB
	var r2 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (VotingDB, []VoteDB, error)); ok {
		return rf(board, id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) VotingDB); ok {
		r0 = rf(board, id)
	} else {
		r0 = ret.Get(0).(VotingDB)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) []VoteDB); ok {
		r1 = rf(board, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]VoteDB)
		}
	}

	if rf, ok := ret.Get(2).(func(uuid.UUID, uuid.UUID) error); ok {
		r2 = rf(board, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVotingDatabase_GetVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVoting'
type MockVotingDatabase_GetVoting_Call struct {
	*mock.Call
}

// GetVoting is a helper method to define mock.On call
//   - board uuid.UUID
//   - id uuid.UUID
func (_e *MockVotingDatabase_Expecter) GetVoting(board interface{}, id interface{}) *MockVotingDatabase_GetVoting_Call {
	return &MockVotingDatabase_GetVoting_Call{Call: _e.mock.On("GetVoting", board, id)}
}

func (_c *MockVotingDatabase_GetVoting_Call) Run(run func(board uuid.UUID, id uuid.UUID)) *MockVotingDatabase_GetVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockVotingDatabase_GetVoting_Call) Return(_a0 VotingDB, _a1 []VoteDB, _a2 error) *MockVotingDatabase_GetVoting_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVotingDatabase_GetVoting_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (VotingDB, []VoteDB, error)) *MockVotingDatabase_GetVoting_Call {
	_c.Call.Return(run)
	return _c
}

// GetVotings provides a mock function with given fields: board
func (_m *MockVotingDatabase) GetVotings(board uuid.UUID) ([]VotingDB, []VoteDB, error) {
	ret := _m.Called(board)

	if len(ret) == 0 {
		panic("no return value specified for GetVotings")
	}

	var r0 []VotingDB
	var r1 []VoteDB
	var r2 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]VotingDB, []VoteDB, error)); ok {
		return rf(board)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []VotingDB); ok {
		r0 = rf(board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]VotingDB)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) []VoteDB); ok {
		r1 = rf(board)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]VoteDB)
		}
	}

	if rf, ok := ret.Get(2).(func(uuid.UUID) error); ok {
		r2 = rf(board)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVotingDatabase_GetVotings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotings'
type MockVotingDatabase_GetVotings_Call struct {
	*mock.Call
}

// GetVotings is a helper method to define mock.On call
//   - board uuid.UUID
func (_e *MockVotingDatabase_Expecter) GetVotings(board interface{}) *MockVotingDatabase_GetVotings_Call {
	return &MockVotingDatabase_GetVotings_Call{Call: _e.mock.On("GetVotings", board)}
}

func (_c *MockVotingDatabase_GetVotings_Call) Run(run func(board uuid.UUID)) *MockVotingDatabase_GetVotings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockVotingDatabase_GetVotings_Call) Return(_a0 []VotingDB, _a1 []VoteDB, _a2 error) *MockVotingDatabase_GetVotings_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVotingDatabase_GetVotings_Call) RunAndReturn(run func(uuid.UUID) ([]VotingDB, []VoteDB, error)) *MockVotingDatabase_GetVotings_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVote provides a mock function with given fields: board, user, note
func (_m *MockVotingDatabase) RemoveVote(board uuid.UUID, user uuid.UUID, note uuid.UUID) error {
	ret := _m.Called(board, user, note)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(board, user, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVotingDatabase_RemoveVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVote'
type MockVotingDatabase_RemoveVote_Call struct {
	*mock.Call
}

// RemoveVote is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
//   - note uuid.UUID
func (_e *MockVotingDatabase_Expecter) RemoveVote(board interface{}, user interface{}, note interface{}) *MockVotingDatabase_RemoveVote_Call {
	return &MockVotingDatabase_RemoveVote_Call{Call: _e.mock.On("RemoveVote", board, user, note)}
}

func (_c *MockVotingDatabase_RemoveVote_Call) Run(run func(board uuid.UUID, user uuid.UUID, note uuid.UUID)) *MockVotingDatabase_RemoveVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockVotingDatabase_RemoveVote_Call) Return(_a0 error) *MockVotingDatabase_RemoveVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVotingDatabase_RemoveVote_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID, uuid.UUID) error) *MockVotingDatabase_RemoveVote_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVoting provides a mock function with given fields: update
func (_m *MockVotingDatabase) UpdateVoting(update VotingUpdate) (VotingDB, error) {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoting")
	}

	var r0 VotingDB
	var r1 error
	if rf, ok := ret.Get(0).(func(VotingUpdate) (VotingDB, error)); ok {
		return rf(update)
	}
	if rf, ok := ret.Get(0).(func(VotingUpdate) VotingDB); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Get(0).(VotingDB)
	}

	if rf, ok := ret.Get(1).(func(VotingUpdate) error); ok {
		r1 = rf(update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotingDatabase_UpdateVoting_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVoting'
type MockVotingDatabase_UpdateVoting_Call struct {
	*mock.Call
}

// UpdateVoting is a helper method to define mock.On call
//   - update VotingUpdate
func (_e *MockVotingDatabase_Expecter) UpdateVoting(update interface{}) *MockVotingDatabase_UpdateVoting_Call {
	return &MockVotingDatabase_UpdateVoting_Call{Call: _e.mock.On("UpdateVoting", update)}
}

func (_c *MockVotingDatabase_UpdateVoting_Call) Run(run func(update VotingUpdate)) *MockVotingDatabase_UpdateVoting_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(VotingUpdate))
	})
	return _c
}

func (_c *MockVotingDatabase_UpdateVoting_Call) Return(_a0 VotingDB, _a1 error) *MockVotingDatabase_UpdateVoting_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotingDatabase_UpdateVoting_Call) RunAndReturn(run func(VotingUpdate) (VotingDB, error)) *MockVotingDatabase_UpdateVoting_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVotingDatabase creates a new instance of MockVotingDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVotingDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVotingDatabase {
	mock := &MockVotingDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
