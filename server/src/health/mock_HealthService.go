// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package health

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHealthService creates a new instance of MockHealthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthService {
	mock := &MockHealthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHealthService is an autogenerated mock type for the HealthService type
type MockHealthService struct {
	mock.Mock
}

type MockHealthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthService) EXPECT() *MockHealthService_Expecter {
	return &MockHealthService_Expecter{mock: &_m.Mock}
}

// IsDatabaseHealthy provides a mock function for the type MockHealthService
func (_mock *MockHealthService) IsDatabaseHealthy(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsDatabaseHealthy")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockHealthService_IsDatabaseHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDatabaseHealthy'
type MockHealthService_IsDatabaseHealthy_Call struct {
	*mock.Call
}

// IsDatabaseHealthy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHealthService_Expecter) IsDatabaseHealthy(ctx interface{}) *MockHealthService_IsDatabaseHealthy_Call {
	return &MockHealthService_IsDatabaseHealthy_Call{Call: _e.mock.On("IsDatabaseHealthy", ctx)}
}

func (_c *MockHealthService_IsDatabaseHealthy_Call) Run(run func(ctx context.Context)) *MockHealthService_IsDatabaseHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHealthService_IsDatabaseHealthy_Call) Return(b bool) *MockHealthService_IsDatabaseHealthy_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockHealthService_IsDatabaseHealthy_Call) RunAndReturn(run func(ctx context.Context) bool) *MockHealthService_IsDatabaseHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// IsRealtimeHealthy provides a mock function for the type MockHealthService
func (_mock *MockHealthService) IsRealtimeHealthy(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsRealtimeHealthy")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockHealthService_IsRealtimeHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRealtimeHealthy'
type MockHealthService_IsRealtimeHealthy_Call struct {
	*mock.Call
}

// IsRealtimeHealthy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHealthService_Expecter) IsRealtimeHealthy(ctx interface{}) *MockHealthService_IsRealtimeHealthy_Call {
	return &MockHealthService_IsRealtimeHealthy_Call{Call: _e.mock.On("IsRealtimeHealthy", ctx)}
}

func (_c *MockHealthService_IsRealtimeHealthy_Call) Run(run func(ctx context.Context)) *MockHealthService_IsRealtimeHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHealthService_IsRealtimeHealthy_Call) Return(b bool) *MockHealthService_IsRealtimeHealthy_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockHealthService_IsRealtimeHealthy_Call) RunAndReturn(run func(ctx context.Context) bool) *MockHealthService_IsRealtimeHealthy_Call {
	_c.Call.Return(run)
	return _c
}
