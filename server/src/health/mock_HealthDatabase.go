// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package health

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHealthDatabase creates a new instance of MockHealthDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealthDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealthDatabase {
	mock := &MockHealthDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHealthDatabase is an autogenerated mock type for the HealthDatabase type
type MockHealthDatabase struct {
	mock.Mock
}

type MockHealthDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthDatabase) EXPECT() *MockHealthDatabase_Expecter {
	return &MockHealthDatabase_Expecter{mock: &_m.Mock}
}

// IsHealthy provides a mock function for the type MockHealthDatabase
func (_mock *MockHealthDatabase) IsHealthy(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsHealthy")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockHealthDatabase_IsHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsHealthy'
type MockHealthDatabase_IsHealthy_Call struct {
	*mock.Call
}

// IsHealthy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHealthDatabase_Expecter) IsHealthy(ctx interface{}) *MockHealthDatabase_IsHealthy_Call {
	return &MockHealthDatabase_IsHealthy_Call{Call: _e.mock.On("IsHealthy", ctx)}
}

func (_c *MockHealthDatabase_IsHealthy_Call) Run(run func(ctx context.Context)) *MockHealthDatabase_IsHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHealthDatabase_IsHealthy_Call) Return(b bool) *MockHealthDatabase_IsHealthy_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockHealthDatabase_IsHealthy_Call) RunAndReturn(run func(ctx context.Context) bool) *MockHealthDatabase_IsHealthy_Call {
	_c.Call.Return(run)
	return _c
}
