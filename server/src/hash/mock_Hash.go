// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package hash

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockHash creates a new instance of MockHash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHash(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHash {
	mock := &MockHash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHash is an autogenerated mock type for the Hash type
type MockHash struct {
	mock.Mock
}

type MockHash_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHash) EXPECT() *MockHash_Expecter {
	return &MockHash_Expecter{mock: &_m.Mock}
}

// HashBySalt provides a mock function for the type MockHash
func (_mock *MockHash) HashBySalt(passphrase string, salt string) string {
	ret := _mock.Called(passphrase, salt)

	if len(ret) == 0 {
		panic("no return value specified for HashBySalt")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = returnFunc(passphrase, salt)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockHash_HashBySalt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashBySalt'
type MockHash_HashBySalt_Call struct {
	*mock.Call
}

// HashBySalt is a helper method to define mock.On call
//   - passphrase string
//   - salt string
func (_e *MockHash_Expecter) HashBySalt(passphrase interface{}, salt interface{}) *MockHash_HashBySalt_Call {
	return &MockHash_HashBySalt_Call{Call: _e.mock.On("HashBySalt", passphrase, salt)}
}

func (_c *MockHash_HashBySalt_Call) Run(run func(passphrase string, salt string)) *MockHash_HashBySalt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHash_HashBySalt_Call) Return(s string) *MockHash_HashBySalt_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockHash_HashBySalt_Call) RunAndReturn(run func(passphrase string, salt string) string) *MockHash_HashBySalt_Call {
	_c.Call.Return(run)
	return _c
}

// HashWithSalt provides a mock function for the type MockHash
func (_mock *MockHash) HashWithSalt(passphrase string) (*string, *string, error) {
	ret := _mock.Called(passphrase)

	if len(ret) == 0 {
		panic("no return value specified for HashWithSalt")
	}

	var r0 *string
	var r1 *string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string) (*string, *string, error)); ok {
		return returnFunc(passphrase)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *string); ok {
		r0 = returnFunc(passphrase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *string); ok {
		r1 = returnFunc(passphrase)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*string)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string) error); ok {
		r2 = returnFunc(passphrase)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockHash_HashWithSalt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashWithSalt'
type MockHash_HashWithSalt_Call struct {
	*mock.Call
}

// HashWithSalt is a helper method to define mock.On call
//   - passphrase string
func (_e *MockHash_Expecter) HashWithSalt(passphrase interface{}) *MockHash_HashWithSalt_Call {
	return &MockHash_HashWithSalt_Call{Call: _e.mock.On("HashWithSalt", passphrase)}
}

func (_c *MockHash_HashWithSalt_Call) Run(run func(passphrase string)) *MockHash_HashWithSalt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockHash_HashWithSalt_Call) Return(s *string, s1 *string, err error) *MockHash_HashWithSalt_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *MockHash_HashWithSalt_Call) RunAndReturn(run func(passphrase string) (*string, *string, error)) *MockHash_HashWithSalt_Call {
	_c.Call.Return(run)
	return _c
}
