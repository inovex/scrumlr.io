// Code generated by mockery v2.52.3. DO NOT EDIT.

package sessions

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockSessionDatabase is an autogenerated mock type for the SessionDatabase type
type MockSessionDatabase struct {
	mock.Mock
}

type MockSessionDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionDatabase) EXPECT() *MockSessionDatabase_Expecter {
	return &MockSessionDatabase_Expecter{mock: &_m.Mock}
}

// BoardModeratorSessionExists provides a mock function with given fields: board, user
func (_m *MockSessionDatabase) BoardModeratorSessionExists(board uuid.UUID, user uuid.UUID) (bool, error) {
	ret := _m.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for BoardModeratorSessionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(board, user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(board, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(board, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_BoardModeratorSessionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BoardModeratorSessionExists'
type MockSessionDatabase_BoardModeratorSessionExists_Call struct {
	*mock.Call
}

// BoardModeratorSessionExists is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) BoardModeratorSessionExists(board interface{}, user interface{}) *MockSessionDatabase_BoardModeratorSessionExists_Call {
	return &MockSessionDatabase_BoardModeratorSessionExists_Call{Call: _e.mock.On("BoardModeratorSessionExists", board, user)}
}

func (_c *MockSessionDatabase_BoardModeratorSessionExists_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_BoardModeratorSessionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSessionDatabase_BoardModeratorSessionExists_Call) Return(_a0 bool, _a1 error) *MockSessionDatabase_BoardModeratorSessionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_BoardModeratorSessionExists_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (bool, error)) *MockSessionDatabase_BoardModeratorSessionExists_Call {
	_c.Call.Return(run)
	return _c
}

// BoardSessionExists provides a mock function with given fields: board, user
func (_m *MockSessionDatabase) BoardSessionExists(board uuid.UUID, user uuid.UUID) (bool, error) {
	ret := _m.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for BoardSessionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(board, user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(board, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(board, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_BoardSessionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BoardSessionExists'
type MockSessionDatabase_BoardSessionExists_Call struct {
	*mock.Call
}

// BoardSessionExists is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) BoardSessionExists(board interface{}, user interface{}) *MockSessionDatabase_BoardSessionExists_Call {
	return &MockSessionDatabase_BoardSessionExists_Call{Call: _e.mock.On("BoardSessionExists", board, user)}
}

func (_c *MockSessionDatabase_BoardSessionExists_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_BoardSessionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSessionDatabase_BoardSessionExists_Call) Return(_a0 bool, _a1 error) *MockSessionDatabase_BoardSessionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_BoardSessionExists_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (bool, error)) *MockSessionDatabase_BoardSessionExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBoardSession provides a mock function with given fields: boardSession
func (_m *MockSessionDatabase) CreateBoardSession(boardSession DatabaseBoardSessionInsert) (DatabaseBoardSession, error) {
	ret := _m.Called(boardSession)

	if len(ret) == 0 {
		panic("no return value specified for CreateBoardSession")
	}

	var r0 DatabaseBoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionInsert) (DatabaseBoardSession, error)); ok {
		return rf(boardSession)
	}
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionInsert) DatabaseBoardSession); ok {
		r0 = rf(boardSession)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSession)
	}

	if rf, ok := ret.Get(1).(func(DatabaseBoardSessionInsert) error); ok {
		r1 = rf(boardSession)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_CreateBoardSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBoardSession'
type MockSessionDatabase_CreateBoardSession_Call struct {
	*mock.Call
}

// CreateBoardSession is a helper method to define mock.On call
//   - boardSession DatabaseBoardSessionInsert
func (_e *MockSessionDatabase_Expecter) CreateBoardSession(boardSession interface{}) *MockSessionDatabase_CreateBoardSession_Call {
	return &MockSessionDatabase_CreateBoardSession_Call{Call: _e.mock.On("CreateBoardSession", boardSession)}
}

func (_c *MockSessionDatabase_CreateBoardSession_Call) Run(run func(boardSession DatabaseBoardSessionInsert)) *MockSessionDatabase_CreateBoardSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseBoardSessionInsert))
	})
	return _c
}

func (_c *MockSessionDatabase_CreateBoardSession_Call) Return(_a0 DatabaseBoardSession, _a1 error) *MockSessionDatabase_CreateBoardSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_CreateBoardSession_Call) RunAndReturn(run func(DatabaseBoardSessionInsert) (DatabaseBoardSession, error)) *MockSessionDatabase_CreateBoardSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoardSession provides a mock function with given fields: board, user
func (_m *MockSessionDatabase) GetBoardSession(board uuid.UUID, user uuid.UUID) (DatabaseBoardSession, error) {
	ret := _m.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardSession")
	}

	var r0 DatabaseBoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (DatabaseBoardSession, error)); ok {
		return rf(board, user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) DatabaseBoardSession); ok {
		r0 = rf(board, user)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSession)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(board, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_GetBoardSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoardSession'
type MockSessionDatabase_GetBoardSession_Call struct {
	*mock.Call
}

// GetBoardSession is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) GetBoardSession(board interface{}, user interface{}) *MockSessionDatabase_GetBoardSession_Call {
	return &MockSessionDatabase_GetBoardSession_Call{Call: _e.mock.On("GetBoardSession", board, user)}
}

func (_c *MockSessionDatabase_GetBoardSession_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_GetBoardSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSessionDatabase_GetBoardSession_Call) Return(_a0 DatabaseBoardSession, _a1 error) *MockSessionDatabase_GetBoardSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_GetBoardSession_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (DatabaseBoardSession, error)) *MockSessionDatabase_GetBoardSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoardSessions provides a mock function with given fields: board, filter
func (_m *MockSessionDatabase) GetBoardSessions(board uuid.UUID, filter ...BoardSessionFilter) ([]DatabaseBoardSession, error) {
	_va := make([]interface{}, len(filter))
	for _i := range filter {
		_va[_i] = filter[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, board)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardSessions")
	}

	var r0 []DatabaseBoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...BoardSessionFilter) ([]DatabaseBoardSession, error)); ok {
		return rf(board, filter...)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...BoardSessionFilter) []DatabaseBoardSession); ok {
		r0 = rf(board, filter...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, ...BoardSessionFilter) error); ok {
		r1 = rf(board, filter...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_GetBoardSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoardSessions'
type MockSessionDatabase_GetBoardSessions_Call struct {
	*mock.Call
}

// GetBoardSessions is a helper method to define mock.On call
//   - board uuid.UUID
//   - filter ...BoardSessionFilter
func (_e *MockSessionDatabase_Expecter) GetBoardSessions(board interface{}, filter ...interface{}) *MockSessionDatabase_GetBoardSessions_Call {
	return &MockSessionDatabase_GetBoardSessions_Call{Call: _e.mock.On("GetBoardSessions",
		append([]interface{}{board}, filter...)...)}
}

func (_c *MockSessionDatabase_GetBoardSessions_Call) Run(run func(board uuid.UUID, filter ...BoardSessionFilter)) *MockSessionDatabase_GetBoardSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]BoardSessionFilter, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(BoardSessionFilter)
			}
		}
		run(args[0].(uuid.UUID), variadicArgs...)
	})
	return _c
}

func (_c *MockSessionDatabase_GetBoardSessions_Call) Return(_a0 []DatabaseBoardSession, _a1 error) *MockSessionDatabase_GetBoardSessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_GetBoardSessions_Call) RunAndReturn(run func(uuid.UUID, ...BoardSessionFilter) ([]DatabaseBoardSession, error)) *MockSessionDatabase_GetBoardSessions_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserConnectedBoards provides a mock function with given fields: user
func (_m *MockSessionDatabase) GetUserConnectedBoards(user uuid.UUID) ([]DatabaseBoardSession, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserConnectedBoards")
	}

	var r0 []DatabaseBoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) ([]DatabaseBoardSession, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) []DatabaseBoardSession); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_GetUserConnectedBoards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserConnectedBoards'
type MockSessionDatabase_GetUserConnectedBoards_Call struct {
	*mock.Call
}

// GetUserConnectedBoards is a helper method to define mock.On call
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) GetUserConnectedBoards(user interface{}) *MockSessionDatabase_GetUserConnectedBoards_Call {
	return &MockSessionDatabase_GetUserConnectedBoards_Call{Call: _e.mock.On("GetUserConnectedBoards", user)}
}

func (_c *MockSessionDatabase_GetUserConnectedBoards_Call) Run(run func(user uuid.UUID)) *MockSessionDatabase_GetUserConnectedBoards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockSessionDatabase_GetUserConnectedBoards_Call) Return(_a0 []DatabaseBoardSession, _a1 error) *MockSessionDatabase_GetUserConnectedBoards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_GetUserConnectedBoards_Call) RunAndReturn(run func(uuid.UUID) ([]DatabaseBoardSession, error)) *MockSessionDatabase_GetUserConnectedBoards_Call {
	_c.Call.Return(run)
	return _c
}

// ParticipantBanned provides a mock function with given fields: board, user
func (_m *MockSessionDatabase) ParticipantBanned(board uuid.UUID, user uuid.UUID) (bool, error) {
	ret := _m.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for ParticipantBanned")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(board, user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(board, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(board, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_ParticipantBanned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParticipantBanned'
type MockSessionDatabase_ParticipantBanned_Call struct {
	*mock.Call
}

// ParticipantBanned is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) ParticipantBanned(board interface{}, user interface{}) *MockSessionDatabase_ParticipantBanned_Call {
	return &MockSessionDatabase_ParticipantBanned_Call{Call: _e.mock.On("ParticipantBanned", board, user)}
}

func (_c *MockSessionDatabase_ParticipantBanned_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_ParticipantBanned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSessionDatabase_ParticipantBanned_Call) Return(_a0 bool, _a1 error) *MockSessionDatabase_ParticipantBanned_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_ParticipantBanned_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (bool, error)) *MockSessionDatabase_ParticipantBanned_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBoardSession provides a mock function with given fields: update
func (_m *MockSessionDatabase) UpdateBoardSession(update DatabaseBoardSessionUpdate) (DatabaseBoardSession, error) {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoardSession")
	}

	var r0 DatabaseBoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) (DatabaseBoardSession, error)); ok {
		return rf(update)
	}
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) DatabaseBoardSession); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSession)
	}

	if rf, ok := ret.Get(1).(func(DatabaseBoardSessionUpdate) error); ok {
		r1 = rf(update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_UpdateBoardSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBoardSession'
type MockSessionDatabase_UpdateBoardSession_Call struct {
	*mock.Call
}

// UpdateBoardSession is a helper method to define mock.On call
//   - update DatabaseBoardSessionUpdate
func (_e *MockSessionDatabase_Expecter) UpdateBoardSession(update interface{}) *MockSessionDatabase_UpdateBoardSession_Call {
	return &MockSessionDatabase_UpdateBoardSession_Call{Call: _e.mock.On("UpdateBoardSession", update)}
}

func (_c *MockSessionDatabase_UpdateBoardSession_Call) Run(run func(update DatabaseBoardSessionUpdate)) *MockSessionDatabase_UpdateBoardSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseBoardSessionUpdate))
	})
	return _c
}

func (_c *MockSessionDatabase_UpdateBoardSession_Call) Return(_a0 DatabaseBoardSession, _a1 error) *MockSessionDatabase_UpdateBoardSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_UpdateBoardSession_Call) RunAndReturn(run func(DatabaseBoardSessionUpdate) (DatabaseBoardSession, error)) *MockSessionDatabase_UpdateBoardSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBoardSessions provides a mock function with given fields: update
func (_m *MockSessionDatabase) UpdateBoardSessions(update DatabaseBoardSessionUpdate) ([]DatabaseBoardSession, error) {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoardSessions")
	}

	var r0 []DatabaseBoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) ([]DatabaseBoardSession, error)); ok {
		return rf(update)
	}
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) []DatabaseBoardSession); ok {
		r0 = rf(update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(DatabaseBoardSessionUpdate) error); ok {
		r1 = rf(update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionDatabase_UpdateBoardSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBoardSessions'
type MockSessionDatabase_UpdateBoardSessions_Call struct {
	*mock.Call
}

// UpdateBoardSessions is a helper method to define mock.On call
//   - update DatabaseBoardSessionUpdate
func (_e *MockSessionDatabase_Expecter) UpdateBoardSessions(update interface{}) *MockSessionDatabase_UpdateBoardSessions_Call {
	return &MockSessionDatabase_UpdateBoardSessions_Call{Call: _e.mock.On("UpdateBoardSessions", update)}
}

func (_c *MockSessionDatabase_UpdateBoardSessions_Call) Run(run func(update DatabaseBoardSessionUpdate)) *MockSessionDatabase_UpdateBoardSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseBoardSessionUpdate))
	})
	return _c
}

func (_c *MockSessionDatabase_UpdateBoardSessions_Call) Return(_a0 []DatabaseBoardSession, _a1 error) *MockSessionDatabase_UpdateBoardSessions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionDatabase_UpdateBoardSessions_Call) RunAndReturn(run func(DatabaseBoardSessionUpdate) ([]DatabaseBoardSession, error)) *MockSessionDatabase_UpdateBoardSessions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionDatabase creates a new instance of MockSessionDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionDatabase {
	mock := &MockSessionDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
