// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sessions

import (
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionDatabase creates a new instance of MockSessionDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionDatabase {
	mock := &MockSessionDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionDatabase is an autogenerated mock type for the SessionDatabase type
type MockSessionDatabase struct {
	mock.Mock
}

type MockSessionDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionDatabase) EXPECT() *MockSessionDatabase_Expecter {
	return &MockSessionDatabase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) Create(boardSession DatabaseBoardSessionInsert) (DatabaseBoardSession, error) {
	ret := _mock.Called(boardSession)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 DatabaseBoardSession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DatabaseBoardSessionInsert) (DatabaseBoardSession, error)); ok {
		return returnFunc(boardSession)
	}
	if returnFunc, ok := ret.Get(0).(func(DatabaseBoardSessionInsert) DatabaseBoardSession); ok {
		r0 = returnFunc(boardSession)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSession)
	}
	if returnFunc, ok := ret.Get(1).(func(DatabaseBoardSessionInsert) error); ok {
		r1 = returnFunc(boardSession)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionDatabase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - boardSession DatabaseBoardSessionInsert
func (_e *MockSessionDatabase_Expecter) Create(boardSession interface{}) *MockSessionDatabase_Create_Call {
	return &MockSessionDatabase_Create_Call{Call: _e.mock.On("Create", boardSession)}
}

func (_c *MockSessionDatabase_Create_Call) Run(run func(boardSession DatabaseBoardSessionInsert)) *MockSessionDatabase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DatabaseBoardSessionInsert
		if args[0] != nil {
			arg0 = args[0].(DatabaseBoardSessionInsert)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_Create_Call) Return(databaseBoardSession DatabaseBoardSession, err error) *MockSessionDatabase_Create_Call {
	_c.Call.Return(databaseBoardSession, err)
	return _c
}

func (_c *MockSessionDatabase_Create_Call) RunAndReturn(run func(boardSession DatabaseBoardSessionInsert) (DatabaseBoardSession, error)) *MockSessionDatabase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) Exists(board uuid.UUID, user uuid.UUID) (bool, error) {
	ret := _mock.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (bool, error)); ok {
		return returnFunc(board, user)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = returnFunc(board, user)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(board, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockSessionDatabase_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) Exists(board interface{}, user interface{}) *MockSessionDatabase_Exists_Call {
	return &MockSessionDatabase_Exists_Call{Call: _e.mock.On("Exists", board, user)}
}

func (_c *MockSessionDatabase_Exists_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_Exists_Call) Return(b bool, err error) *MockSessionDatabase_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSessionDatabase_Exists_Call) RunAndReturn(run func(board uuid.UUID, user uuid.UUID) (bool, error)) *MockSessionDatabase_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) Get(board uuid.UUID, user uuid.UUID) (DatabaseBoardSession, error) {
	ret := _mock.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 DatabaseBoardSession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (DatabaseBoardSession, error)); ok {
		return returnFunc(board, user)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) DatabaseBoardSession); ok {
		r0 = returnFunc(board, user)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSession)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(board, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionDatabase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) Get(board interface{}, user interface{}) *MockSessionDatabase_Get_Call {
	return &MockSessionDatabase_Get_Call{Call: _e.mock.On("Get", board, user)}
}

func (_c *MockSessionDatabase_Get_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_Get_Call) Return(databaseBoardSession DatabaseBoardSession, err error) *MockSessionDatabase_Get_Call {
	_c.Call.Return(databaseBoardSession, err)
	return _c
}

func (_c *MockSessionDatabase_Get_Call) RunAndReturn(run func(board uuid.UUID, user uuid.UUID) (DatabaseBoardSession, error)) *MockSessionDatabase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) GetAll(board uuid.UUID, filter ...BoardSessionFilter) ([]DatabaseBoardSession, error) {
	var tmpRet mock.Arguments
	if len(filter) > 0 {
		tmpRet = _mock.Called(board, filter)
	} else {
		tmpRet = _mock.Called(board)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []DatabaseBoardSession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, ...BoardSessionFilter) ([]DatabaseBoardSession, error)); ok {
		return returnFunc(board, filter...)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, ...BoardSessionFilter) []DatabaseBoardSession); ok {
		r0 = returnFunc(board, filter...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardSession)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, ...BoardSessionFilter) error); ok {
		r1 = returnFunc(board, filter...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockSessionDatabase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - board uuid.UUID
//   - filter ...BoardSessionFilter
func (_e *MockSessionDatabase_Expecter) GetAll(board interface{}, filter ...interface{}) *MockSessionDatabase_GetAll_Call {
	return &MockSessionDatabase_GetAll_Call{Call: _e.mock.On("GetAll",
		append([]interface{}{board}, filter...)...)}
}

func (_c *MockSessionDatabase_GetAll_Call) Run(run func(board uuid.UUID, filter ...BoardSessionFilter)) *MockSessionDatabase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 []BoardSessionFilter
		var variadicArgs []BoardSessionFilter
		if len(args) > 1 {
			variadicArgs = args[1].([]BoardSessionFilter)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_GetAll_Call) Return(databaseBoardSessions []DatabaseBoardSession, err error) *MockSessionDatabase_GetAll_Call {
	_c.Call.Return(databaseBoardSessions, err)
	return _c
}

func (_c *MockSessionDatabase_GetAll_Call) RunAndReturn(run func(board uuid.UUID, filter ...BoardSessionFilter) ([]DatabaseBoardSession, error)) *MockSessionDatabase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserConnectedBoards provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) GetUserConnectedBoards(user uuid.UUID) ([]DatabaseBoardSession, error) {
	ret := _mock.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserConnectedBoards")
	}

	var r0 []DatabaseBoardSession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]DatabaseBoardSession, error)); ok {
		return returnFunc(user)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []DatabaseBoardSession); ok {
		r0 = returnFunc(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardSession)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_GetUserConnectedBoards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserConnectedBoards'
type MockSessionDatabase_GetUserConnectedBoards_Call struct {
	*mock.Call
}

// GetUserConnectedBoards is a helper method to define mock.On call
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) GetUserConnectedBoards(user interface{}) *MockSessionDatabase_GetUserConnectedBoards_Call {
	return &MockSessionDatabase_GetUserConnectedBoards_Call{Call: _e.mock.On("GetUserConnectedBoards", user)}
}

func (_c *MockSessionDatabase_GetUserConnectedBoards_Call) Run(run func(user uuid.UUID)) *MockSessionDatabase_GetUserConnectedBoards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_GetUserConnectedBoards_Call) Return(databaseBoardSessions []DatabaseBoardSession, err error) *MockSessionDatabase_GetUserConnectedBoards_Call {
	_c.Call.Return(databaseBoardSessions, err)
	return _c
}

func (_c *MockSessionDatabase_GetUserConnectedBoards_Call) RunAndReturn(run func(user uuid.UUID) ([]DatabaseBoardSession, error)) *MockSessionDatabase_GetUserConnectedBoards_Call {
	_c.Call.Return(run)
	return _c
}

// IsParticipantBanned provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) IsParticipantBanned(board uuid.UUID, user uuid.UUID) (bool, error) {
	ret := _mock.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for IsParticipantBanned")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (bool, error)); ok {
		return returnFunc(board, user)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = returnFunc(board, user)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(board, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_IsParticipantBanned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsParticipantBanned'
type MockSessionDatabase_IsParticipantBanned_Call struct {
	*mock.Call
}

// IsParticipantBanned is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) IsParticipantBanned(board interface{}, user interface{}) *MockSessionDatabase_IsParticipantBanned_Call {
	return &MockSessionDatabase_IsParticipantBanned_Call{Call: _e.mock.On("IsParticipantBanned", board, user)}
}

func (_c *MockSessionDatabase_IsParticipantBanned_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_IsParticipantBanned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_IsParticipantBanned_Call) Return(b bool, err error) *MockSessionDatabase_IsParticipantBanned_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSessionDatabase_IsParticipantBanned_Call) RunAndReturn(run func(board uuid.UUID, user uuid.UUID) (bool, error)) *MockSessionDatabase_IsParticipantBanned_Call {
	_c.Call.Return(run)
	return _c
}

// ModeratorExists provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) ModeratorExists(board uuid.UUID, user uuid.UUID) (bool, error) {
	ret := _mock.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for ModeratorExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (bool, error)); ok {
		return returnFunc(board, user)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = returnFunc(board, user)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(board, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_ModeratorExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModeratorExists'
type MockSessionDatabase_ModeratorExists_Call struct {
	*mock.Call
}

// ModeratorExists is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionDatabase_Expecter) ModeratorExists(board interface{}, user interface{}) *MockSessionDatabase_ModeratorExists_Call {
	return &MockSessionDatabase_ModeratorExists_Call{Call: _e.mock.On("ModeratorExists", board, user)}
}

func (_c *MockSessionDatabase_ModeratorExists_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionDatabase_ModeratorExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_ModeratorExists_Call) Return(b bool, err error) *MockSessionDatabase_ModeratorExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSessionDatabase_ModeratorExists_Call) RunAndReturn(run func(board uuid.UUID, user uuid.UUID) (bool, error)) *MockSessionDatabase_ModeratorExists_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) Update(update DatabaseBoardSessionUpdate) (DatabaseBoardSession, error) {
	ret := _mock.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 DatabaseBoardSession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) (DatabaseBoardSession, error)); ok {
		return returnFunc(update)
	}
	if returnFunc, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) DatabaseBoardSession); ok {
		r0 = returnFunc(update)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSession)
	}
	if returnFunc, ok := ret.Get(1).(func(DatabaseBoardSessionUpdate) error); ok {
		r1 = returnFunc(update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSessionDatabase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - update DatabaseBoardSessionUpdate
func (_e *MockSessionDatabase_Expecter) Update(update interface{}) *MockSessionDatabase_Update_Call {
	return &MockSessionDatabase_Update_Call{Call: _e.mock.On("Update", update)}
}

func (_c *MockSessionDatabase_Update_Call) Run(run func(update DatabaseBoardSessionUpdate)) *MockSessionDatabase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DatabaseBoardSessionUpdate
		if args[0] != nil {
			arg0 = args[0].(DatabaseBoardSessionUpdate)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_Update_Call) Return(databaseBoardSession DatabaseBoardSession, err error) *MockSessionDatabase_Update_Call {
	_c.Call.Return(databaseBoardSession, err)
	return _c
}

func (_c *MockSessionDatabase_Update_Call) RunAndReturn(run func(update DatabaseBoardSessionUpdate) (DatabaseBoardSession, error)) *MockSessionDatabase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAll provides a mock function for the type MockSessionDatabase
func (_mock *MockSessionDatabase) UpdateAll(update DatabaseBoardSessionUpdate) ([]DatabaseBoardSession, error) {
	ret := _mock.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAll")
	}

	var r0 []DatabaseBoardSession
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) ([]DatabaseBoardSession, error)); ok {
		return returnFunc(update)
	}
	if returnFunc, ok := ret.Get(0).(func(DatabaseBoardSessionUpdate) []DatabaseBoardSession); ok {
		r0 = returnFunc(update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardSession)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(DatabaseBoardSessionUpdate) error); ok {
		r1 = returnFunc(update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionDatabase_UpdateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAll'
type MockSessionDatabase_UpdateAll_Call struct {
	*mock.Call
}

// UpdateAll is a helper method to define mock.On call
//   - update DatabaseBoardSessionUpdate
func (_e *MockSessionDatabase_Expecter) UpdateAll(update interface{}) *MockSessionDatabase_UpdateAll_Call {
	return &MockSessionDatabase_UpdateAll_Call{Call: _e.mock.On("UpdateAll", update)}
}

func (_c *MockSessionDatabase_UpdateAll_Call) Run(run func(update DatabaseBoardSessionUpdate)) *MockSessionDatabase_UpdateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DatabaseBoardSessionUpdate
		if args[0] != nil {
			arg0 = args[0].(DatabaseBoardSessionUpdate)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionDatabase_UpdateAll_Call) Return(databaseBoardSessions []DatabaseBoardSession, err error) *MockSessionDatabase_UpdateAll_Call {
	_c.Call.Return(databaseBoardSessions, err)
	return _c
}

func (_c *MockSessionDatabase_UpdateAll_Call) RunAndReturn(run func(update DatabaseBoardSessionUpdate) ([]DatabaseBoardSession, error)) *MockSessionDatabase_UpdateAll_Call {
	_c.Call.Return(run)
	return _c
}
