// Code generated by mockery v2.20.0. DO NOT EDIT.

package draglocks

import (
	"github.com/google/uuid"
	"github.com/stretchr/testify/mock"
)

// MockDragLockService is an autogenerated mock type for the DragLockService type
type MockDragLockService struct {
	mock.Mock
}

// AcquireLock provides a mock function with given fields: noteID, userID, boardID
func (_m *MockDragLockService) AcquireLock(noteID uuid.UUID, userID uuid.UUID, boardID uuid.UUID) bool {
	ret := _m.Called(noteID, userID, boardID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(noteID, userID, boardID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *MockDragLockService) Close() {
	_m.Called()
}

// GetLocksForBoard provides a mock function with given fields: boardID
func (_m *MockDragLockService) GetLocksForBoard(boardID uuid.UUID) []*DragLock {
	ret := _m.Called(boardID)

	var r0 []*DragLock
	if rf, ok := ret.Get(0).(func(uuid.UUID) []*DragLock); ok {
		r0 = rf(boardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*DragLock)
		}
	}

	return r0
}

// IsLocked provides a mock function with given fields: noteID
func (_m *MockDragLockService) IsLocked(noteID uuid.UUID) (*DragLock, bool) {
	ret := _m.Called(noteID)

	var r0 *DragLock
	var r1 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*DragLock, bool)); ok {
		return rf(noteID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *DragLock); ok {
		r0 = rf(noteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DragLock)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) bool); ok {
		r1 = rf(noteID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ReleaseLock provides a mock function with given fields: noteID, userID
func (_m *MockDragLockService) ReleaseLock(noteID uuid.UUID, userID uuid.UUID) bool {
	ret := _m.Called(noteID, userID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(noteID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewMockDragLockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDragLockService creates a new instance of MockDragLockService. It also registers a testing interface on the mock and a cleanup function to assert the mock's expectations.
func NewMockDragLockService(t mockConstructorTestingTNewMockDragLockService) *MockDragLockService {
	mock := &MockDragLockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
