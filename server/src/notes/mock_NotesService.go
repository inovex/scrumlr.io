// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notes

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockNotesService creates a new instance of MockNotesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotesService {
	mock := &MockNotesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotesService is an autogenerated mock type for the NotesService type
type MockNotesService struct {
	mock.Mock
}

type MockNotesService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotesService) EXPECT() *MockNotesService_Expecter {
	return &MockNotesService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Create(ctx context.Context, body NoteCreateRequest) (*Note, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, NoteCreateRequest) (*Note, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, NoteCreateRequest) *Note); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, NoteCreateRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNotesService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - body
func (_e *MockNotesService_Expecter) Create(ctx interface{}, body interface{}) *MockNotesService_Create_Call {
	return &MockNotesService_Create_Call{Call: _e.mock.On("Create", ctx, body)}
}

func (_c *MockNotesService_Create_Call) Run(run func(ctx context.Context, body NoteCreateRequest)) *MockNotesService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(NoteCreateRequest))
	})
	return _c
}

func (_c *MockNotesService_Create_Call) Return(note *Note, err error) *MockNotesService_Create_Call {
	_c.Call.Return(note, err)
	return _c
}

func (_c *MockNotesService_Create_Call) RunAndReturn(run func(ctx context.Context, body NoteCreateRequest) (*Note, error)) *MockNotesService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Delete(ctx context.Context, body NoteDeleteRequest, id uuid.UUID) error {
	ret := _mock.Called(ctx, body, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, NoteDeleteRequest, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, body, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotesService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockNotesService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx
//   - body
//   - id
func (_e *MockNotesService_Expecter) Delete(ctx interface{}, body interface{}, id interface{}) *MockNotesService_Delete_Call {
	return &MockNotesService_Delete_Call{Call: _e.mock.On("Delete", ctx, body, id)}
}

func (_c *MockNotesService_Delete_Call) Run(run func(ctx context.Context, body NoteDeleteRequest, id uuid.UUID)) *MockNotesService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(NoteDeleteRequest), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockNotesService_Delete_Call) Return(err error) *MockNotesService_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotesService_Delete_Call) RunAndReturn(run func(ctx context.Context, body NoteDeleteRequest, id uuid.UUID) error) *MockNotesService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Get(ctx context.Context, id uuid.UUID) (*Note, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Note, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Note); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNotesService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockNotesService_Expecter) Get(ctx interface{}, id interface{}) *MockNotesService_Get_Call {
	return &MockNotesService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockNotesService_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockNotesService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockNotesService_Get_Call) Return(note *Note, err error) *MockNotesService_Get_Call {
	_c.Call.Return(note, err)
	return _c
}

func (_c *MockNotesService_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Note, error)) *MockNotesService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Import provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Import(ctx context.Context, body NoteImportRequest) (*Note, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 *Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, NoteImportRequest) (*Note, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, NoteImportRequest) *Note); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, NoteImportRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type MockNotesService_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - ctx
//   - body
func (_e *MockNotesService_Expecter) Import(ctx interface{}, body interface{}) *MockNotesService_Import_Call {
	return &MockNotesService_Import_Call{Call: _e.mock.On("Import", ctx, body)}
}

func (_c *MockNotesService_Import_Call) Run(run func(ctx context.Context, body NoteImportRequest)) *MockNotesService_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(NoteImportRequest))
	})
	return _c
}

func (_c *MockNotesService_Import_Call) Return(note *Note, err error) *MockNotesService_Import_Call {
	_c.Call.Return(note, err)
	return _c
}

func (_c *MockNotesService_Import_Call) RunAndReturn(run func(ctx context.Context, body NoteImportRequest) (*Note, error)) *MockNotesService_Import_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockNotesService
func (_mock *MockNotesService) List(ctx context.Context, id uuid.UUID, columns ...uuid.UUID) ([]*Note, error) {
	var tmpRet mock.Arguments
	if len(columns) > 0 {
		tmpRet = _mock.Called(ctx, id, columns)
	} else {
		tmpRet = _mock.Called(ctx, id)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uuid.UUID) ([]*Note, error)); ok {
		return returnFunc(ctx, id, columns)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, ...uuid.UUID) []*Note); ok {
		r0 = returnFunc(ctx, id, columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, ...uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id, columns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockNotesService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx
//   - id
//   - columns
func (_e *MockNotesService_Expecter) List(ctx interface{}, id interface{}, columns ...interface{}) *MockNotesService_List_Call {
	return &MockNotesService_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, id}, columns...)...)}
}

func (_c *MockNotesService_List_Call) Run(run func(ctx context.Context, id uuid.UUID, columns ...uuid.UUID)) *MockNotesService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uuid.UUID, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(uuid.UUID)
			}
		}
		run(args[0].(context.Context), args[1].(uuid.UUID), variadicArgs...)
	})
	return _c
}

func (_c *MockNotesService_List_Call) Return(notes []*Note, err error) *MockNotesService_List_Call {
	_c.Call.Return(notes, err)
	return _c
}

func (_c *MockNotesService_List_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, columns ...uuid.UUID) ([]*Note, error)) *MockNotesService_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockNotesService
func (_mock *MockNotesService) Update(ctx context.Context, body NoteUpdateRequest) (*Note, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Note
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, NoteUpdateRequest) (*Note, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, NoteUpdateRequest) *Note); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Note)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, NoteUpdateRequest) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNotesService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx
//   - body
func (_e *MockNotesService_Expecter) Update(ctx interface{}, body interface{}) *MockNotesService_Update_Call {
	return &MockNotesService_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockNotesService_Update_Call) Run(run func(ctx context.Context, body NoteUpdateRequest)) *MockNotesService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(NoteUpdateRequest))
	})
	return _c
}

func (_c *MockNotesService_Update_Call) Return(note *Note, err error) *MockNotesService_Update_Call {
	_c.Call.Return(note, err)
	return _c
}

func (_c *MockNotesService_Update_Call) RunAndReturn(run func(ctx context.Context, body NoteUpdateRequest) (*Note, error)) *MockNotesService_Update_Call {
	_c.Call.Return(run)
	return _c
}
