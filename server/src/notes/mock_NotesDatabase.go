// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package notes

import (
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockNotesDatabase creates a new instance of MockNotesDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotesDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotesDatabase {
	mock := &MockNotesDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotesDatabase is an autogenerated mock type for the NotesDatabase type
type MockNotesDatabase struct {
	mock.Mock
}

type MockNotesDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotesDatabase) EXPECT() *MockNotesDatabase_Expecter {
	return &MockNotesDatabase_Expecter{mock: &_m.Mock}
}

// CreateNote provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) CreateNote(insert DatabaseNoteInsert) (DatabaseNote, error) {
	ret := _mock.Called(insert)

	if len(ret) == 0 {
		panic("no return value specified for CreateNote")
	}

	var r0 DatabaseNote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DatabaseNoteInsert) (DatabaseNote, error)); ok {
		return returnFunc(insert)
	}
	if returnFunc, ok := ret.Get(0).(func(DatabaseNoteInsert) DatabaseNote); ok {
		r0 = returnFunc(insert)
	} else {
		r0 = ret.Get(0).(DatabaseNote)
	}
	if returnFunc, ok := ret.Get(1).(func(DatabaseNoteInsert) error); ok {
		r1 = returnFunc(insert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesDatabase_CreateNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNote'
type MockNotesDatabase_CreateNote_Call struct {
	*mock.Call
}

// CreateNote is a helper method to define mock.On call
//   - insert DatabaseNoteInsert
func (_e *MockNotesDatabase_Expecter) CreateNote(insert interface{}) *MockNotesDatabase_CreateNote_Call {
	return &MockNotesDatabase_CreateNote_Call{Call: _e.mock.On("CreateNote", insert)}
}

func (_c *MockNotesDatabase_CreateNote_Call) Run(run func(insert DatabaseNoteInsert)) *MockNotesDatabase_CreateNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DatabaseNoteInsert
		if args[0] != nil {
			arg0 = args[0].(DatabaseNoteInsert)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_CreateNote_Call) Return(databaseNote DatabaseNote, err error) *MockNotesDatabase_CreateNote_Call {
	_c.Call.Return(databaseNote, err)
	return _c
}

func (_c *MockNotesDatabase_CreateNote_Call) RunAndReturn(run func(insert DatabaseNoteInsert) (DatabaseNote, error)) *MockNotesDatabase_CreateNote_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNote provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) DeleteNote(caller uuid.UUID, board uuid.UUID, id uuid.UUID, deleteStack bool) error {
	ret := _mock.Called(caller, board, id, deleteStack)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNote")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, uuid.UUID, bool) error); ok {
		r0 = returnFunc(caller, board, id, deleteStack)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockNotesDatabase_DeleteNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNote'
type MockNotesDatabase_DeleteNote_Call struct {
	*mock.Call
}

// DeleteNote is a helper method to define mock.On call
//   - caller uuid.UUID
//   - board uuid.UUID
//   - id uuid.UUID
//   - deleteStack bool
func (_e *MockNotesDatabase_Expecter) DeleteNote(caller interface{}, board interface{}, id interface{}, deleteStack interface{}) *MockNotesDatabase_DeleteNote_Call {
	return &MockNotesDatabase_DeleteNote_Call{Call: _e.mock.On("DeleteNote", caller, board, id, deleteStack)}
}

func (_c *MockNotesDatabase_DeleteNote_Call) Run(run func(caller uuid.UUID, board uuid.UUID, id uuid.UUID, deleteStack bool)) *MockNotesDatabase_DeleteNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_DeleteNote_Call) Return(err error) *MockNotesDatabase_DeleteNote_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockNotesDatabase_DeleteNote_Call) RunAndReturn(run func(caller uuid.UUID, board uuid.UUID, id uuid.UUID, deleteStack bool) error) *MockNotesDatabase_DeleteNote_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) Get(id uuid.UUID) (DatabaseNote, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 DatabaseNote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (DatabaseNote, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) DatabaseNote); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(DatabaseNote)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesDatabase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockNotesDatabase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockNotesDatabase_Expecter) Get(id interface{}) *MockNotesDatabase_Get_Call {
	return &MockNotesDatabase_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockNotesDatabase_Get_Call) Run(run func(id uuid.UUID)) *MockNotesDatabase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_Get_Call) Return(databaseNote DatabaseNote, err error) *MockNotesDatabase_Get_Call {
	_c.Call.Return(databaseNote, err)
	return _c
}

func (_c *MockNotesDatabase_Get_Call) RunAndReturn(run func(id uuid.UUID) (DatabaseNote, error)) *MockNotesDatabase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) GetAll(board uuid.UUID, columns ...uuid.UUID) ([]DatabaseNote, error) {
	var tmpRet mock.Arguments
	if len(columns) > 0 {
		tmpRet = _mock.Called(board, columns)
	} else {
		tmpRet = _mock.Called(board)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []DatabaseNote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, ...uuid.UUID) ([]DatabaseNote, error)); ok {
		return returnFunc(board, columns...)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, ...uuid.UUID) []DatabaseNote); ok {
		r0 = returnFunc(board, columns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseNote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, ...uuid.UUID) error); ok {
		r1 = returnFunc(board, columns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesDatabase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockNotesDatabase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - board uuid.UUID
//   - columns ...uuid.UUID
func (_e *MockNotesDatabase_Expecter) GetAll(board interface{}, columns ...interface{}) *MockNotesDatabase_GetAll_Call {
	return &MockNotesDatabase_GetAll_Call{Call: _e.mock.On("GetAll",
		append([]interface{}{board}, columns...)...)}
}

func (_c *MockNotesDatabase_GetAll_Call) Run(run func(board uuid.UUID, columns ...uuid.UUID)) *MockNotesDatabase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 []uuid.UUID
		var variadicArgs []uuid.UUID
		if len(args) > 1 {
			variadicArgs = args[1].([]uuid.UUID)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_GetAll_Call) Return(databaseNotes []DatabaseNote, err error) *MockNotesDatabase_GetAll_Call {
	_c.Call.Return(databaseNotes, err)
	return _c
}

func (_c *MockNotesDatabase_GetAll_Call) RunAndReturn(run func(board uuid.UUID, columns ...uuid.UUID) ([]DatabaseNote, error)) *MockNotesDatabase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildNotes provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) GetChildNotes(parentNote uuid.UUID) ([]DatabaseNote, error) {
	ret := _mock.Called(parentNote)

	if len(ret) == 0 {
		panic("no return value specified for GetChildNotes")
	}

	var r0 []DatabaseNote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]DatabaseNote, error)); ok {
		return returnFunc(parentNote)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []DatabaseNote); ok {
		r0 = returnFunc(parentNote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseNote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(parentNote)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesDatabase_GetChildNotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildNotes'
type MockNotesDatabase_GetChildNotes_Call struct {
	*mock.Call
}

// GetChildNotes is a helper method to define mock.On call
//   - parentNote uuid.UUID
func (_e *MockNotesDatabase_Expecter) GetChildNotes(parentNote interface{}) *MockNotesDatabase_GetChildNotes_Call {
	return &MockNotesDatabase_GetChildNotes_Call{Call: _e.mock.On("GetChildNotes", parentNote)}
}

func (_c *MockNotesDatabase_GetChildNotes_Call) Run(run func(parentNote uuid.UUID)) *MockNotesDatabase_GetChildNotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_GetChildNotes_Call) Return(databaseNotes []DatabaseNote, err error) *MockNotesDatabase_GetChildNotes_Call {
	_c.Call.Return(databaseNotes, err)
	return _c
}

func (_c *MockNotesDatabase_GetChildNotes_Call) RunAndReturn(run func(parentNote uuid.UUID) ([]DatabaseNote, error)) *MockNotesDatabase_GetChildNotes_Call {
	_c.Call.Return(run)
	return _c
}

// GetStack provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) GetStack(noteID uuid.UUID) ([]DatabaseNote, error) {
	ret := _mock.Called(noteID)

	if len(ret) == 0 {
		panic("no return value specified for GetStack")
	}

	var r0 []DatabaseNote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]DatabaseNote, error)); ok {
		return returnFunc(noteID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []DatabaseNote); ok {
		r0 = returnFunc(noteID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseNote)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(noteID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesDatabase_GetStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStack'
type MockNotesDatabase_GetStack_Call struct {
	*mock.Call
}

// GetStack is a helper method to define mock.On call
//   - noteID uuid.UUID
func (_e *MockNotesDatabase_Expecter) GetStack(noteID interface{}) *MockNotesDatabase_GetStack_Call {
	return &MockNotesDatabase_GetStack_Call{Call: _e.mock.On("GetStack", noteID)}
}

func (_c *MockNotesDatabase_GetStack_Call) Run(run func(noteID uuid.UUID)) *MockNotesDatabase_GetStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_GetStack_Call) Return(databaseNotes []DatabaseNote, err error) *MockNotesDatabase_GetStack_Call {
	_c.Call.Return(databaseNotes, err)
	return _c
}

func (_c *MockNotesDatabase_GetStack_Call) RunAndReturn(run func(noteID uuid.UUID) ([]DatabaseNote, error)) *MockNotesDatabase_GetStack_Call {
	_c.Call.Return(run)
	return _c
}

// ImportNote provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) ImportNote(insert DatabaseNoteImport) (DatabaseNote, error) {
	ret := _mock.Called(insert)

	if len(ret) == 0 {
		panic("no return value specified for ImportNote")
	}

	var r0 DatabaseNote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(DatabaseNoteImport) (DatabaseNote, error)); ok {
		return returnFunc(insert)
	}
	if returnFunc, ok := ret.Get(0).(func(DatabaseNoteImport) DatabaseNote); ok {
		r0 = returnFunc(insert)
	} else {
		r0 = ret.Get(0).(DatabaseNote)
	}
	if returnFunc, ok := ret.Get(1).(func(DatabaseNoteImport) error); ok {
		r1 = returnFunc(insert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesDatabase_ImportNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportNote'
type MockNotesDatabase_ImportNote_Call struct {
	*mock.Call
}

// ImportNote is a helper method to define mock.On call
//   - insert DatabaseNoteImport
func (_e *MockNotesDatabase_Expecter) ImportNote(insert interface{}) *MockNotesDatabase_ImportNote_Call {
	return &MockNotesDatabase_ImportNote_Call{Call: _e.mock.On("ImportNote", insert)}
}

func (_c *MockNotesDatabase_ImportNote_Call) Run(run func(insert DatabaseNoteImport)) *MockNotesDatabase_ImportNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 DatabaseNoteImport
		if args[0] != nil {
			arg0 = args[0].(DatabaseNoteImport)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_ImportNote_Call) Return(databaseNote DatabaseNote, err error) *MockNotesDatabase_ImportNote_Call {
	_c.Call.Return(databaseNote, err)
	return _c
}

func (_c *MockNotesDatabase_ImportNote_Call) RunAndReturn(run func(insert DatabaseNoteImport) (DatabaseNote, error)) *MockNotesDatabase_ImportNote_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNote provides a mock function for the type MockNotesDatabase
func (_mock *MockNotesDatabase) UpdateNote(caller uuid.UUID, update DatabaseNoteUpdate) (DatabaseNote, error) {
	ret := _mock.Called(caller, update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNote")
	}

	var r0 DatabaseNote
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, DatabaseNoteUpdate) (DatabaseNote, error)); ok {
		return returnFunc(caller, update)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID, DatabaseNoteUpdate) DatabaseNote); ok {
		r0 = returnFunc(caller, update)
	} else {
		r0 = ret.Get(0).(DatabaseNote)
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID, DatabaseNoteUpdate) error); ok {
		r1 = returnFunc(caller, update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotesDatabase_UpdateNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNote'
type MockNotesDatabase_UpdateNote_Call struct {
	*mock.Call
}

// UpdateNote is a helper method to define mock.On call
//   - caller uuid.UUID
//   - update DatabaseNoteUpdate
func (_e *MockNotesDatabase_Expecter) UpdateNote(caller interface{}, update interface{}) *MockNotesDatabase_UpdateNote_Call {
	return &MockNotesDatabase_UpdateNote_Call{Call: _e.mock.On("UpdateNote", caller, update)}
}

func (_c *MockNotesDatabase_UpdateNote_Call) Run(run func(caller uuid.UUID, update DatabaseNoteUpdate)) *MockNotesDatabase_UpdateNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		var arg1 DatabaseNoteUpdate
		if args[1] != nil {
			arg1 = args[1].(DatabaseNoteUpdate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotesDatabase_UpdateNote_Call) Return(databaseNote DatabaseNote, err error) *MockNotesDatabase_UpdateNote_Call {
	_c.Call.Return(databaseNote, err)
	return _c
}

func (_c *MockNotesDatabase_UpdateNote_Call) RunAndReturn(run func(caller uuid.UUID, update DatabaseNoteUpdate) (DatabaseNote, error)) *MockNotesDatabase_UpdateNote_Call {
	_c.Call.Return(run)
	return _c
}
