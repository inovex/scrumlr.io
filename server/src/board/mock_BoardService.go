// Code generated by mockery v2.52.3. DO NOT EDIT.

package board

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockBoardService is an autogenerated mock type for the BoardService type
type MockBoardService struct {
	mock.Mock
}

type MockBoardService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBoardService) EXPECT() *MockBoardService_Expecter {
	return &MockBoardService_Expecter{mock: &_m.Mock}
}

// BoardOverview provides a mock function with given fields: ctx, boardIDs, user
func (_m *MockBoardService) BoardOverview(ctx context.Context, boardIDs []uuid.UUID, user uuid.UUID) ([]*BoardOverview, error) {
	ret := _m.Called(ctx, boardIDs, user)

	if len(ret) == 0 {
		panic("no return value specified for BoardOverview")
	}

	var r0 []*BoardOverview
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, uuid.UUID) ([]*BoardOverview, error)); ok {
		return rf(ctx, boardIDs, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID, uuid.UUID) []*BoardOverview); ok {
		r0 = rf(ctx, boardIDs, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*BoardOverview)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardIDs, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_BoardOverview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BoardOverview'
type MockBoardService_BoardOverview_Call struct {
	*mock.Call
}

// BoardOverview is a helper method to define mock.On call
//   - ctx context.Context
//   - boardIDs []uuid.UUID
//   - user uuid.UUID
func (_e *MockBoardService_Expecter) BoardOverview(ctx interface{}, boardIDs interface{}, user interface{}) *MockBoardService_BoardOverview_Call {
	return &MockBoardService_BoardOverview_Call{Call: _e.mock.On("BoardOverview", ctx, boardIDs, user)}
}

func (_c *MockBoardService_BoardOverview_Call) Run(run func(ctx context.Context, boardIDs []uuid.UUID, user uuid.UUID)) *MockBoardService_BoardOverview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardService_BoardOverview_Call) Return(_a0 []*BoardOverview, _a1 error) *MockBoardService_BoardOverview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_BoardOverview_Call) RunAndReturn(run func(context.Context, []uuid.UUID, uuid.UUID) ([]*BoardOverview, error)) *MockBoardService_BoardOverview_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, body
func (_m *MockBoardService) Create(ctx context.Context, body CreateBoardRequest) (*Board, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, CreateBoardRequest) (*Board, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, CreateBoardRequest) *Board); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, CreateBoardRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBoardService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - body CreateBoardRequest
func (_e *MockBoardService_Expecter) Create(ctx interface{}, body interface{}) *MockBoardService_Create_Call {
	return &MockBoardService_Create_Call{Call: _e.mock.On("Create", ctx, body)}
}

func (_c *MockBoardService_Create_Call) Run(run func(ctx context.Context, body CreateBoardRequest)) *MockBoardService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(CreateBoardRequest))
	})
	return _c
}

func (_c *MockBoardService_Create_Call) Return(_a0 *Board, _a1 error) *MockBoardService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_Create_Call) RunAndReturn(run func(context.Context, CreateBoardRequest) (*Board, error)) *MockBoardService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockBoardService) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBoardService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBoardService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardService_Expecter) Delete(ctx interface{}, id interface{}) *MockBoardService_Delete_Call {
	return &MockBoardService_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBoardService_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardService_Delete_Call) Return(_a0 error) *MockBoardService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBoardService_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockBoardService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTimer provides a mock function with given fields: ctx, id
func (_m *MockBoardService) DeleteTimer(ctx context.Context, id uuid.UUID) (*Board, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTimer")
	}

	var r0 *Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Board, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Board); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_DeleteTimer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTimer'
type MockBoardService_DeleteTimer_Call struct {
	*mock.Call
}

// DeleteTimer is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardService_Expecter) DeleteTimer(ctx interface{}, id interface{}) *MockBoardService_DeleteTimer_Call {
	return &MockBoardService_DeleteTimer_Call{Call: _e.mock.On("DeleteTimer", ctx, id)}
}

func (_c *MockBoardService_DeleteTimer_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardService_DeleteTimer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardService_DeleteTimer_Call) Return(_a0 *Board, _a1 error) *MockBoardService_DeleteTimer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_DeleteTimer_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Board, error)) *MockBoardService_DeleteTimer_Call {
	_c.Call.Return(run)
	return _c
}

// FullBoard provides a mock function with given fields: ctx, boardID
func (_m *MockBoardService) FullBoard(ctx context.Context, boardID uuid.UUID) (*FullBoard, error) {
	ret := _m.Called(ctx, boardID)

	if len(ret) == 0 {
		panic("no return value specified for FullBoard")
	}

	var r0 *FullBoard
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*FullBoard, error)); ok {
		return rf(ctx, boardID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *FullBoard); ok {
		r0 = rf(ctx, boardID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*FullBoard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_FullBoard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullBoard'
type MockBoardService_FullBoard_Call struct {
	*mock.Call
}

// FullBoard is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
func (_e *MockBoardService_Expecter) FullBoard(ctx interface{}, boardID interface{}) *MockBoardService_FullBoard_Call {
	return &MockBoardService_FullBoard_Call{Call: _e.mock.On("FullBoard", ctx, boardID)}
}

func (_c *MockBoardService_FullBoard_Call) Run(run func(ctx context.Context, boardID uuid.UUID)) *MockBoardService_FullBoard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardService_FullBoard_Call) Return(_a0 *FullBoard, _a1 error) *MockBoardService_FullBoard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_FullBoard_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*FullBoard, error)) *MockBoardService_FullBoard_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockBoardService) Get(ctx context.Context, id uuid.UUID) (*Board, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Board, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Board); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBoardService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardService_Expecter) Get(ctx interface{}, id interface{}) *MockBoardService_Get_Call {
	return &MockBoardService_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockBoardService_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardService_Get_Call) Return(_a0 *Board, _a1 error) *MockBoardService_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Board, error)) *MockBoardService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoards provides a mock function with given fields: ctx, userID
func (_m *MockBoardService) GetBoards(ctx context.Context, userID uuid.UUID) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetBoards")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]uuid.UUID, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []uuid.UUID); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_GetBoards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoards'
type MockBoardService_GetBoards_Call struct {
	*mock.Call
}

// GetBoards is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockBoardService_Expecter) GetBoards(ctx interface{}, userID interface{}) *MockBoardService_GetBoards_Call {
	return &MockBoardService_GetBoards_Call{Call: _e.mock.On("GetBoards", ctx, userID)}
}

func (_c *MockBoardService_GetBoards_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockBoardService_GetBoards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardService_GetBoards_Call) Return(_a0 []uuid.UUID, _a1 error) *MockBoardService_GetBoards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_GetBoards_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]uuid.UUID, error)) *MockBoardService_GetBoards_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementTimer provides a mock function with given fields: ctx, id
func (_m *MockBoardService) IncrementTimer(ctx context.Context, id uuid.UUID) (*Board, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementTimer")
	}

	var r0 *Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Board, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Board); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_IncrementTimer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementTimer'
type MockBoardService_IncrementTimer_Call struct {
	*mock.Call
}

// IncrementTimer is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardService_Expecter) IncrementTimer(ctx interface{}, id interface{}) *MockBoardService_IncrementTimer_Call {
	return &MockBoardService_IncrementTimer_Call{Call: _e.mock.On("IncrementTimer", ctx, id)}
}

func (_c *MockBoardService_IncrementTimer_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardService_IncrementTimer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardService_IncrementTimer_Call) Return(_a0 *Board, _a1 error) *MockBoardService_IncrementTimer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_IncrementTimer_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*Board, error)) *MockBoardService_IncrementTimer_Call {
	_c.Call.Return(run)
	return _c
}

// SetTimer provides a mock function with given fields: ctx, id, minutes
func (_m *MockBoardService) SetTimer(ctx context.Context, id uuid.UUID, minutes uint8) (*Board, error) {
	ret := _m.Called(ctx, id, minutes)

	if len(ret) == 0 {
		panic("no return value specified for SetTimer")
	}

	var r0 *Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint8) (*Board, error)); ok {
		return rf(ctx, id, minutes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uint8) *Board); ok {
		r0 = rf(ctx, id, minutes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uint8) error); ok {
		r1 = rf(ctx, id, minutes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_SetTimer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTimer'
type MockBoardService_SetTimer_Call struct {
	*mock.Call
}

// SetTimer is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - minutes uint8
func (_e *MockBoardService_Expecter) SetTimer(ctx interface{}, id interface{}, minutes interface{}) *MockBoardService_SetTimer_Call {
	return &MockBoardService_SetTimer_Call{Call: _e.mock.On("SetTimer", ctx, id, minutes)}
}

func (_c *MockBoardService_SetTimer_Call) Run(run func(ctx context.Context, id uuid.UUID, minutes uint8)) *MockBoardService_SetTimer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uint8))
	})
	return _c
}

func (_c *MockBoardService_SetTimer_Call) Return(_a0 *Board, _a1 error) *MockBoardService_SetTimer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_SetTimer_Call) RunAndReturn(run func(context.Context, uuid.UUID, uint8) (*Board, error)) *MockBoardService_SetTimer_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, body
func (_m *MockBoardService) Update(ctx context.Context, body BoardUpdateRequest) (*Board, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Board
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, BoardUpdateRequest) (*Board, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, BoardUpdateRequest) *Board); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Board)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, BoardUpdateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBoardService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body BoardUpdateRequest
func (_e *MockBoardService_Expecter) Update(ctx interface{}, body interface{}) *MockBoardService_Update_Call {
	return &MockBoardService_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockBoardService_Update_Call) Run(run func(ctx context.Context, body BoardUpdateRequest)) *MockBoardService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(BoardUpdateRequest))
	})
	return _c
}

func (_c *MockBoardService_Update_Call) Return(_a0 *Board, _a1 error) *MockBoardService_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardService_Update_Call) RunAndReturn(run func(context.Context, BoardUpdateRequest) (*Board, error)) *MockBoardService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBoardService creates a new instance of MockBoardService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBoardService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBoardService {
	mock := &MockBoardService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
