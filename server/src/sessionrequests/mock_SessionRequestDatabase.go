// Code generated by mockery v2.52.3. DO NOT EDIT.

package sessionrequests

import (
	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// MockSessionRequestDatabase is an autogenerated mock type for the SessionRequestDatabase type
type MockSessionRequestDatabase struct {
	mock.Mock
}

type MockSessionRequestDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionRequestDatabase) EXPECT() *MockSessionRequestDatabase_Expecter {
	return &MockSessionRequestDatabase_Expecter{mock: &_m.Mock}
}

// BoardSessionRequestExists provides a mock function with given fields: board, user
func (_m *MockSessionRequestDatabase) BoardSessionRequestExists(board uuid.UUID, user uuid.UUID) (bool, error) {
	ret := _m.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for BoardSessionRequestExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(board, user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(board, user)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(board, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRequestDatabase_BoardSessionRequestExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BoardSessionRequestExists'
type MockSessionRequestDatabase_BoardSessionRequestExists_Call struct {
	*mock.Call
}

// BoardSessionRequestExists is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionRequestDatabase_Expecter) BoardSessionRequestExists(board interface{}, user interface{}) *MockSessionRequestDatabase_BoardSessionRequestExists_Call {
	return &MockSessionRequestDatabase_BoardSessionRequestExists_Call{Call: _e.mock.On("BoardSessionRequestExists", board, user)}
}

func (_c *MockSessionRequestDatabase_BoardSessionRequestExists_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionRequestDatabase_BoardSessionRequestExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSessionRequestDatabase_BoardSessionRequestExists_Call) Return(_a0 bool, _a1 error) *MockSessionRequestDatabase_BoardSessionRequestExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRequestDatabase_BoardSessionRequestExists_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (bool, error)) *MockSessionRequestDatabase_BoardSessionRequestExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateBoardSessionRequest provides a mock function with given fields: request
func (_m *MockSessionRequestDatabase) CreateBoardSessionRequest(request DatabaseBoardSessionRequestInsert) (DatabaseBoardSessionRequest, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateBoardSessionRequest")
	}

	var r0 DatabaseBoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionRequestInsert) (DatabaseBoardSessionRequest, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionRequestInsert) DatabaseBoardSessionRequest); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSessionRequest)
	}

	if rf, ok := ret.Get(1).(func(DatabaseBoardSessionRequestInsert) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRequestDatabase_CreateBoardSessionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBoardSessionRequest'
type MockSessionRequestDatabase_CreateBoardSessionRequest_Call struct {
	*mock.Call
}

// CreateBoardSessionRequest is a helper method to define mock.On call
//   - request DatabaseBoardSessionRequestInsert
func (_e *MockSessionRequestDatabase_Expecter) CreateBoardSessionRequest(request interface{}) *MockSessionRequestDatabase_CreateBoardSessionRequest_Call {
	return &MockSessionRequestDatabase_CreateBoardSessionRequest_Call{Call: _e.mock.On("CreateBoardSessionRequest", request)}
}

func (_c *MockSessionRequestDatabase_CreateBoardSessionRequest_Call) Run(run func(request DatabaseBoardSessionRequestInsert)) *MockSessionRequestDatabase_CreateBoardSessionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseBoardSessionRequestInsert))
	})
	return _c
}

func (_c *MockSessionRequestDatabase_CreateBoardSessionRequest_Call) Return(_a0 DatabaseBoardSessionRequest, _a1 error) *MockSessionRequestDatabase_CreateBoardSessionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRequestDatabase_CreateBoardSessionRequest_Call) RunAndReturn(run func(DatabaseBoardSessionRequestInsert) (DatabaseBoardSessionRequest, error)) *MockSessionRequestDatabase_CreateBoardSessionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoardSessionRequest provides a mock function with given fields: board, user
func (_m *MockSessionRequestDatabase) GetBoardSessionRequest(board uuid.UUID, user uuid.UUID) (DatabaseBoardSessionRequest, error) {
	ret := _m.Called(board, user)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardSessionRequest")
	}

	var r0 DatabaseBoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) (DatabaseBoardSessionRequest, error)); ok {
		return rf(board, user)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) DatabaseBoardSessionRequest); ok {
		r0 = rf(board, user)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSessionRequest)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(board, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRequestDatabase_GetBoardSessionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoardSessionRequest'
type MockSessionRequestDatabase_GetBoardSessionRequest_Call struct {
	*mock.Call
}

// GetBoardSessionRequest is a helper method to define mock.On call
//   - board uuid.UUID
//   - user uuid.UUID
func (_e *MockSessionRequestDatabase_Expecter) GetBoardSessionRequest(board interface{}, user interface{}) *MockSessionRequestDatabase_GetBoardSessionRequest_Call {
	return &MockSessionRequestDatabase_GetBoardSessionRequest_Call{Call: _e.mock.On("GetBoardSessionRequest", board, user)}
}

func (_c *MockSessionRequestDatabase_GetBoardSessionRequest_Call) Run(run func(board uuid.UUID, user uuid.UUID)) *MockSessionRequestDatabase_GetBoardSessionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockSessionRequestDatabase_GetBoardSessionRequest_Call) Return(_a0 DatabaseBoardSessionRequest, _a1 error) *MockSessionRequestDatabase_GetBoardSessionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRequestDatabase_GetBoardSessionRequest_Call) RunAndReturn(run func(uuid.UUID, uuid.UUID) (DatabaseBoardSessionRequest, error)) *MockSessionRequestDatabase_GetBoardSessionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// GetBoardSessionRequests provides a mock function with given fields: board, status
func (_m *MockSessionRequestDatabase) GetBoardSessionRequests(board uuid.UUID, status ...RequestStatus) ([]DatabaseBoardSessionRequest, error) {
	_va := make([]interface{}, len(status))
	for _i := range status {
		_va[_i] = status[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, board)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBoardSessionRequests")
	}

	var r0 []DatabaseBoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...RequestStatus) ([]DatabaseBoardSessionRequest, error)); ok {
		return rf(board, status...)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, ...RequestStatus) []DatabaseBoardSessionRequest); ok {
		r0 = rf(board, status...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseBoardSessionRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, ...RequestStatus) error); ok {
		r1 = rf(board, status...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRequestDatabase_GetBoardSessionRequests_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBoardSessionRequests'
type MockSessionRequestDatabase_GetBoardSessionRequests_Call struct {
	*mock.Call
}

// GetBoardSessionRequests is a helper method to define mock.On call
//   - board uuid.UUID
//   - status ...RequestStatus
func (_e *MockSessionRequestDatabase_Expecter) GetBoardSessionRequests(board interface{}, status ...interface{}) *MockSessionRequestDatabase_GetBoardSessionRequests_Call {
	return &MockSessionRequestDatabase_GetBoardSessionRequests_Call{Call: _e.mock.On("GetBoardSessionRequests",
		append([]interface{}{board}, status...)...)}
}

func (_c *MockSessionRequestDatabase_GetBoardSessionRequests_Call) Run(run func(board uuid.UUID, status ...RequestStatus)) *MockSessionRequestDatabase_GetBoardSessionRequests_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]RequestStatus, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(RequestStatus)
			}
		}
		run(args[0].(uuid.UUID), variadicArgs...)
	})
	return _c
}

func (_c *MockSessionRequestDatabase_GetBoardSessionRequests_Call) Return(_a0 []DatabaseBoardSessionRequest, _a1 error) *MockSessionRequestDatabase_GetBoardSessionRequests_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRequestDatabase_GetBoardSessionRequests_Call) RunAndReturn(run func(uuid.UUID, ...RequestStatus) ([]DatabaseBoardSessionRequest, error)) *MockSessionRequestDatabase_GetBoardSessionRequests_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBoardSessionRequest provides a mock function with given fields: update
func (_m *MockSessionRequestDatabase) UpdateBoardSessionRequest(update DatabaseBoardSessionRequestUpdate) (DatabaseBoardSessionRequest, error) {
	ret := _m.Called(update)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBoardSessionRequest")
	}

	var r0 DatabaseBoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionRequestUpdate) (DatabaseBoardSessionRequest, error)); ok {
		return rf(update)
	}
	if rf, ok := ret.Get(0).(func(DatabaseBoardSessionRequestUpdate) DatabaseBoardSessionRequest); ok {
		r0 = rf(update)
	} else {
		r0 = ret.Get(0).(DatabaseBoardSessionRequest)
	}

	if rf, ok := ret.Get(1).(func(DatabaseBoardSessionRequestUpdate) error); ok {
		r1 = rf(update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSessionRequestDatabase_UpdateBoardSessionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBoardSessionRequest'
type MockSessionRequestDatabase_UpdateBoardSessionRequest_Call struct {
	*mock.Call
}

// UpdateBoardSessionRequest is a helper method to define mock.On call
//   - update DatabaseBoardSessionRequestUpdate
func (_e *MockSessionRequestDatabase_Expecter) UpdateBoardSessionRequest(update interface{}) *MockSessionRequestDatabase_UpdateBoardSessionRequest_Call {
	return &MockSessionRequestDatabase_UpdateBoardSessionRequest_Call{Call: _e.mock.On("UpdateBoardSessionRequest", update)}
}

func (_c *MockSessionRequestDatabase_UpdateBoardSessionRequest_Call) Run(run func(update DatabaseBoardSessionRequestUpdate)) *MockSessionRequestDatabase_UpdateBoardSessionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(DatabaseBoardSessionRequestUpdate))
	})
	return _c
}

func (_c *MockSessionRequestDatabase_UpdateBoardSessionRequest_Call) Return(_a0 DatabaseBoardSessionRequest, _a1 error) *MockSessionRequestDatabase_UpdateBoardSessionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSessionRequestDatabase_UpdateBoardSessionRequest_Call) RunAndReturn(run func(DatabaseBoardSessionRequestUpdate) (DatabaseBoardSessionRequest, error)) *MockSessionRequestDatabase_UpdateBoardSessionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionRequestDatabase creates a new instance of MockSessionRequestDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionRequestDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionRequestDatabase {
	mock := &MockSessionRequestDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
