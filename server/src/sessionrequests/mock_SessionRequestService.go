// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sessionrequests

import (
	"context"
	"net/http"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionRequestService creates a new instance of MockSessionRequestService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionRequestService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionRequestService {
	mock := &MockSessionRequestService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionRequestService is an autogenerated mock type for the SessionRequestService type
type MockSessionRequestService struct {
	mock.Mock
}

type MockSessionRequestService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionRequestService) EXPECT() *MockSessionRequestService_Expecter {
	return &MockSessionRequestService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSessionRequestService
func (_mock *MockSessionRequestService) Create(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*BoardSessionRequest, error) {
	ret := _mock.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *BoardSessionRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*BoardSessionRequest, error)); ok {
		return returnFunc(ctx, boardID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *BoardSessionRequest); ok {
		r0 = returnFunc(ctx, boardID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoardSessionRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRequestService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionRequestService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockSessionRequestService_Expecter) Create(ctx interface{}, boardID interface{}, userID interface{}) *MockSessionRequestService_Create_Call {
	return &MockSessionRequestService_Create_Call{Call: _e.mock.On("Create", ctx, boardID, userID)}
}

func (_c *MockSessionRequestService_Create_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockSessionRequestService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRequestService_Create_Call) Return(boardSessionRequest *BoardSessionRequest, err error) *MockSessionRequestService_Create_Call {
	_c.Call.Return(boardSessionRequest, err)
	return _c
}

func (_c *MockSessionRequestService_Create_Call) RunAndReturn(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*BoardSessionRequest, error)) *MockSessionRequestService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function for the type MockSessionRequestService
func (_mock *MockSessionRequestService) Exists(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, boardID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, boardID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRequestService_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockSessionRequestService_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockSessionRequestService_Expecter) Exists(ctx interface{}, boardID interface{}, userID interface{}) *MockSessionRequestService_Exists_Call {
	return &MockSessionRequestService_Exists_Call{Call: _e.mock.On("Exists", ctx, boardID, userID)}
}

func (_c *MockSessionRequestService_Exists_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockSessionRequestService_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRequestService_Exists_Call) Return(b bool, err error) *MockSessionRequestService_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSessionRequestService_Exists_Call) RunAndReturn(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (bool, error)) *MockSessionRequestService_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSessionRequestService
func (_mock *MockSessionRequestService) Get(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*BoardSessionRequest, error) {
	ret := _mock.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *BoardSessionRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*BoardSessionRequest, error)); ok {
		return returnFunc(ctx, boardID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *BoardSessionRequest); ok {
		r0 = returnFunc(ctx, boardID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoardSessionRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRequestService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionRequestService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockSessionRequestService_Expecter) Get(ctx interface{}, boardID interface{}, userID interface{}) *MockSessionRequestService_Get_Call {
	return &MockSessionRequestService_Get_Call{Call: _e.mock.On("Get", ctx, boardID, userID)}
}

func (_c *MockSessionRequestService_Get_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockSessionRequestService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRequestService_Get_Call) Return(boardSessionRequest *BoardSessionRequest, err error) *MockSessionRequestService_Get_Call {
	_c.Call.Return(boardSessionRequest, err)
	return _c
}

func (_c *MockSessionRequestService_Get_Call) RunAndReturn(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*BoardSessionRequest, error)) *MockSessionRequestService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockSessionRequestService
func (_mock *MockSessionRequestService) GetAll(ctx context.Context, boardID uuid.UUID, statusQuery string) ([]*BoardSessionRequest, error) {
	ret := _mock.Called(ctx, boardID, statusQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*BoardSessionRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]*BoardSessionRequest, error)); ok {
		return returnFunc(ctx, boardID, statusQuery)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []*BoardSessionRequest); ok {
		r0 = returnFunc(ctx, boardID, statusQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*BoardSessionRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = returnFunc(ctx, boardID, statusQuery)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRequestService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockSessionRequestService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - statusQuery string
func (_e *MockSessionRequestService_Expecter) GetAll(ctx interface{}, boardID interface{}, statusQuery interface{}) *MockSessionRequestService_GetAll_Call {
	return &MockSessionRequestService_GetAll_Call{Call: _e.mock.On("GetAll", ctx, boardID, statusQuery)}
}

func (_c *MockSessionRequestService_GetAll_Call) Run(run func(ctx context.Context, boardID uuid.UUID, statusQuery string)) *MockSessionRequestService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRequestService_GetAll_Call) Return(boardSessionRequests []*BoardSessionRequest, err error) *MockSessionRequestService_GetAll_Call {
	_c.Call.Return(boardSessionRequests, err)
	return _c
}

func (_c *MockSessionRequestService_GetAll_Call) RunAndReturn(run func(ctx context.Context, boardID uuid.UUID, statusQuery string) ([]*BoardSessionRequest, error)) *MockSessionRequestService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// OpenSocket provides a mock function for the type MockSessionRequestService
func (_mock *MockSessionRequestService) OpenSocket(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	_mock.Called(ctx, w, r)
	return
}

// MockSessionRequestService_OpenSocket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenSocket'
type MockSessionRequestService_OpenSocket_Call struct {
	*mock.Call
}

// OpenSocket is a helper method to define mock.On call
//   - ctx context.Context
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockSessionRequestService_Expecter) OpenSocket(ctx interface{}, w interface{}, r interface{}) *MockSessionRequestService_OpenSocket_Call {
	return &MockSessionRequestService_OpenSocket_Call{Call: _e.mock.On("OpenSocket", ctx, w, r)}
}

func (_c *MockSessionRequestService_OpenSocket_Call) Run(run func(ctx context.Context, w http.ResponseWriter, r *http.Request)) *MockSessionRequestService_OpenSocket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 http.ResponseWriter
		if args[1] != nil {
			arg1 = args[1].(http.ResponseWriter)
		}
		var arg2 *http.Request
		if args[2] != nil {
			arg2 = args[2].(*http.Request)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionRequestService_OpenSocket_Call) Return() *MockSessionRequestService_OpenSocket_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSessionRequestService_OpenSocket_Call) RunAndReturn(run func(ctx context.Context, w http.ResponseWriter, r *http.Request)) *MockSessionRequestService_OpenSocket_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function for the type MockSessionRequestService
func (_mock *MockSessionRequestService) Update(ctx context.Context, body BoardSessionRequestUpdate) (*BoardSessionRequest, error) {
	ret := _mock.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *BoardSessionRequest
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, BoardSessionRequestUpdate) (*BoardSessionRequest, error)); ok {
		return returnFunc(ctx, body)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, BoardSessionRequestUpdate) *BoardSessionRequest); ok {
		r0 = returnFunc(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BoardSessionRequest)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, BoardSessionRequestUpdate) error); ok {
		r1 = returnFunc(ctx, body)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionRequestService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSessionRequestService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body BoardSessionRequestUpdate
func (_e *MockSessionRequestService_Expecter) Update(ctx interface{}, body interface{}) *MockSessionRequestService_Update_Call {
	return &MockSessionRequestService_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockSessionRequestService_Update_Call) Run(run func(ctx context.Context, body BoardSessionRequestUpdate)) *MockSessionRequestService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 BoardSessionRequestUpdate
		if args[1] != nil {
			arg1 = args[1].(BoardSessionRequestUpdate)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionRequestService_Update_Call) Return(boardSessionRequest *BoardSessionRequest, err error) *MockSessionRequestService_Update_Call {
	_c.Call.Return(boardSessionRequest, err)
	return _c
}

func (_c *MockSessionRequestService_Update_Call) RunAndReturn(run func(ctx context.Context, body BoardSessionRequestUpdate) (*BoardSessionRequest, error)) *MockSessionRequestService_Update_Call {
	_c.Call.Return(run)
	return _c
}
