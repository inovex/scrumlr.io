// Code generated by mockery v2.51.0. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "scrumlr.io/server/common/dto"

	uuid "github.com/google/uuid"
)

// MockUsers is an autogenerated mock type for the Users type
type MockUsers struct {
	mock.Mock
}

type MockUsers_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsers) EXPECT() *MockUsers_Expecter {
	return &MockUsers_Expecter{mock: &_m.Mock}
}

// CreateAppleUser provides a mock function with given fields: ctx, id, name, avatarUrl
func (_m *MockUsers) CreateAppleUser(ctx context.Context, id string, name string, avatarUrl string) (*dto.User, error) {
	ret := _m.Called(ctx, id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppleUser")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.User, error)); ok {
		return rf(ctx, id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.User); ok {
		r0 = rf(ctx, id, name, avatarUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_CreateAppleUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAppleUser'
type MockUsers_CreateAppleUser_Call struct {
	*mock.Call
}

// CreateAppleUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUsers_Expecter) CreateAppleUser(ctx interface{}, id interface{}, name interface{}, avatarUrl interface{}) *MockUsers_CreateAppleUser_Call {
	return &MockUsers_CreateAppleUser_Call{Call: _e.mock.On("CreateAppleUser", ctx, id, name, avatarUrl)}
}

func (_c *MockUsers_CreateAppleUser_Call) Run(run func(ctx context.Context, id string, name string, avatarUrl string)) *MockUsers_CreateAppleUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUsers_CreateAppleUser_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_CreateAppleUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_CreateAppleUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*dto.User, error)) *MockUsers_CreateAppleUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAzureAdUser provides a mock function with given fields: ctx, id, name, avatarUrl
func (_m *MockUsers) CreateAzureAdUser(ctx context.Context, id string, name string, avatarUrl string) (*dto.User, error) {
	ret := _m.Called(ctx, id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateAzureAdUser")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.User, error)); ok {
		return rf(ctx, id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.User); ok {
		r0 = rf(ctx, id, name, avatarUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_CreateAzureAdUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAzureAdUser'
type MockUsers_CreateAzureAdUser_Call struct {
	*mock.Call
}

// CreateAzureAdUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUsers_Expecter) CreateAzureAdUser(ctx interface{}, id interface{}, name interface{}, avatarUrl interface{}) *MockUsers_CreateAzureAdUser_Call {
	return &MockUsers_CreateAzureAdUser_Call{Call: _e.mock.On("CreateAzureAdUser", ctx, id, name, avatarUrl)}
}

func (_c *MockUsers_CreateAzureAdUser_Call) Run(run func(ctx context.Context, id string, name string, avatarUrl string)) *MockUsers_CreateAzureAdUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUsers_CreateAzureAdUser_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_CreateAzureAdUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_CreateAzureAdUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*dto.User, error)) *MockUsers_CreateAzureAdUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGitHubUser provides a mock function with given fields: ctx, id, name, avatarUrl
func (_m *MockUsers) CreateGitHubUser(ctx context.Context, id string, name string, avatarUrl string) (*dto.User, error) {
	ret := _m.Called(ctx, id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateGitHubUser")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.User, error)); ok {
		return rf(ctx, id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.User); ok {
		r0 = rf(ctx, id, name, avatarUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_CreateGitHubUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGitHubUser'
type MockUsers_CreateGitHubUser_Call struct {
	*mock.Call
}

// CreateGitHubUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUsers_Expecter) CreateGitHubUser(ctx interface{}, id interface{}, name interface{}, avatarUrl interface{}) *MockUsers_CreateGitHubUser_Call {
	return &MockUsers_CreateGitHubUser_Call{Call: _e.mock.On("CreateGitHubUser", ctx, id, name, avatarUrl)}
}

func (_c *MockUsers_CreateGitHubUser_Call) Run(run func(ctx context.Context, id string, name string, avatarUrl string)) *MockUsers_CreateGitHubUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUsers_CreateGitHubUser_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_CreateGitHubUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_CreateGitHubUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*dto.User, error)) *MockUsers_CreateGitHubUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGoogleUser provides a mock function with given fields: ctx, id, name, avatarUrl
func (_m *MockUsers) CreateGoogleUser(ctx context.Context, id string, name string, avatarUrl string) (*dto.User, error) {
	ret := _m.Called(ctx, id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateGoogleUser")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.User, error)); ok {
		return rf(ctx, id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.User); ok {
		r0 = rf(ctx, id, name, avatarUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_CreateGoogleUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGoogleUser'
type MockUsers_CreateGoogleUser_Call struct {
	*mock.Call
}

// CreateGoogleUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUsers_Expecter) CreateGoogleUser(ctx interface{}, id interface{}, name interface{}, avatarUrl interface{}) *MockUsers_CreateGoogleUser_Call {
	return &MockUsers_CreateGoogleUser_Call{Call: _e.mock.On("CreateGoogleUser", ctx, id, name, avatarUrl)}
}

func (_c *MockUsers_CreateGoogleUser_Call) Run(run func(ctx context.Context, id string, name string, avatarUrl string)) *MockUsers_CreateGoogleUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUsers_CreateGoogleUser_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_CreateGoogleUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_CreateGoogleUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*dto.User, error)) *MockUsers_CreateGoogleUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMicrosoftUser provides a mock function with given fields: ctx, id, name, avatarUrl
func (_m *MockUsers) CreateMicrosoftUser(ctx context.Context, id string, name string, avatarUrl string) (*dto.User, error) {
	ret := _m.Called(ctx, id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateMicrosoftUser")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.User, error)); ok {
		return rf(ctx, id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.User); ok {
		r0 = rf(ctx, id, name, avatarUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_CreateMicrosoftUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMicrosoftUser'
type MockUsers_CreateMicrosoftUser_Call struct {
	*mock.Call
}

// CreateMicrosoftUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUsers_Expecter) CreateMicrosoftUser(ctx interface{}, id interface{}, name interface{}, avatarUrl interface{}) *MockUsers_CreateMicrosoftUser_Call {
	return &MockUsers_CreateMicrosoftUser_Call{Call: _e.mock.On("CreateMicrosoftUser", ctx, id, name, avatarUrl)}
}

func (_c *MockUsers_CreateMicrosoftUser_Call) Run(run func(ctx context.Context, id string, name string, avatarUrl string)) *MockUsers_CreateMicrosoftUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUsers_CreateMicrosoftUser_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_CreateMicrosoftUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_CreateMicrosoftUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*dto.User, error)) *MockUsers_CreateMicrosoftUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOIDCUser provides a mock function with given fields: ctx, id, name, avatarUrl
func (_m *MockUsers) CreateOIDCUser(ctx context.Context, id string, name string, avatarUrl string) (*dto.User, error) {
	ret := _m.Called(ctx, id, name, avatarUrl)

	if len(ret) == 0 {
		panic("no return value specified for CreateOIDCUser")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*dto.User, error)); ok {
		return rf(ctx, id, name, avatarUrl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *dto.User); ok {
		r0 = rf(ctx, id, name, avatarUrl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, id, name, avatarUrl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_CreateOIDCUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOIDCUser'
type MockUsers_CreateOIDCUser_Call struct {
	*mock.Call
}

// CreateOIDCUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - avatarUrl string
func (_e *MockUsers_Expecter) CreateOIDCUser(ctx interface{}, id interface{}, name interface{}, avatarUrl interface{}) *MockUsers_CreateOIDCUser_Call {
	return &MockUsers_CreateOIDCUser_Call{Call: _e.mock.On("CreateOIDCUser", ctx, id, name, avatarUrl)}
}

func (_c *MockUsers_CreateOIDCUser_Call) Run(run func(ctx context.Context, id string, name string, avatarUrl string)) *MockUsers_CreateOIDCUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockUsers_CreateOIDCUser_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_CreateOIDCUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_CreateOIDCUser_Call) RunAndReturn(run func(context.Context, string, string, string) (*dto.User, error)) *MockUsers_CreateOIDCUser_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockUsers) Get(ctx context.Context, id uuid.UUID) (*dto.User, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsers_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUsers_Expecter) Get(ctx interface{}, id interface{}) *MockUsers_Get_Call {
	return &MockUsers_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUsers_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUsers_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUsers_Get_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dto.User, error)) *MockUsers_Get_Call {
	_c.Call.Return(run)
	return _c
}

// LoginAnonymous provides a mock function with given fields: ctx, name
func (_m *MockUsers) LoginAnonymous(ctx context.Context, name string) (*dto.User, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for LoginAnonymous")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.User, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.User); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_LoginAnonymous_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginAnonymous'
type MockUsers_LoginAnonymous_Call struct {
	*mock.Call
}

// LoginAnonymous is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockUsers_Expecter) LoginAnonymous(ctx interface{}, name interface{}) *MockUsers_LoginAnonymous_Call {
	return &MockUsers_LoginAnonymous_Call{Call: _e.mock.On("LoginAnonymous", ctx, name)}
}

func (_c *MockUsers_LoginAnonymous_Call) Run(run func(ctx context.Context, name string)) *MockUsers_LoginAnonymous_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUsers_LoginAnonymous_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_LoginAnonymous_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_LoginAnonymous_Call) RunAndReturn(run func(context.Context, string) (*dto.User, error)) *MockUsers_LoginAnonymous_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, body
func (_m *MockUsers) Update(ctx context.Context, body dto.UserUpdateRequest) (*dto.User, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *dto.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserUpdateRequest) (*dto.User, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserUpdateRequest) *dto.User); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserUpdateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsers_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsers_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.UserUpdateRequest
func (_e *MockUsers_Expecter) Update(ctx interface{}, body interface{}) *MockUsers_Update_Call {
	return &MockUsers_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockUsers_Update_Call) Run(run func(ctx context.Context, body dto.UserUpdateRequest)) *MockUsers_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.UserUpdateRequest))
	})
	return _c
}

func (_c *MockUsers_Update_Call) Return(_a0 *dto.User, _a1 error) *MockUsers_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsers_Update_Call) RunAndReturn(run func(context.Context, dto.UserUpdateRequest) (*dto.User, error)) *MockUsers_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsers creates a new instance of MockUsers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsers(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsers {
	mock := &MockUsers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
