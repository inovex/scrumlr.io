// Code generated by mockery v2.51.0. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	dto "scrumlr.io/server/common/dto"

	uuid "github.com/google/uuid"
)

// MockBoardTemplates is an autogenerated mock type for the BoardTemplates type
type MockBoardTemplates struct {
	mock.Mock
}

type MockBoardTemplates_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBoardTemplates) EXPECT() *MockBoardTemplates_Expecter {
	return &MockBoardTemplates_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, body
func (_m *MockBoardTemplates) Create(ctx context.Context, body dto.CreateBoardTemplateRequest) (*dto.BoardTemplate, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.BoardTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateBoardTemplateRequest) (*dto.BoardTemplate, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateBoardTemplateRequest) *dto.BoardTemplate); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateBoardTemplateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBoardTemplates_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.CreateBoardTemplateRequest
func (_e *MockBoardTemplates_Expecter) Create(ctx interface{}, body interface{}) *MockBoardTemplates_Create_Call {
	return &MockBoardTemplates_Create_Call{Call: _e.mock.On("Create", ctx, body)}
}

func (_c *MockBoardTemplates_Create_Call) Run(run func(ctx context.Context, body dto.CreateBoardTemplateRequest)) *MockBoardTemplates_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.CreateBoardTemplateRequest))
	})
	return _c
}

func (_c *MockBoardTemplates_Create_Call) Return(_a0 *dto.BoardTemplate, _a1 error) *MockBoardTemplates_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_Create_Call) RunAndReturn(run func(context.Context, dto.CreateBoardTemplateRequest) (*dto.BoardTemplate, error)) *MockBoardTemplates_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateColumnTemplate provides a mock function with given fields: ctx, body
func (_m *MockBoardTemplates) CreateColumnTemplate(ctx context.Context, body dto.ColumnTemplateRequest) (*dto.ColumnTemplate, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for CreateColumnTemplate")
	}

	var r0 *dto.ColumnTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ColumnTemplateRequest) (*dto.ColumnTemplate, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ColumnTemplateRequest) *dto.ColumnTemplate); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ColumnTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ColumnTemplateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_CreateColumnTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateColumnTemplate'
type MockBoardTemplates_CreateColumnTemplate_Call struct {
	*mock.Call
}

// CreateColumnTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.ColumnTemplateRequest
func (_e *MockBoardTemplates_Expecter) CreateColumnTemplate(ctx interface{}, body interface{}) *MockBoardTemplates_CreateColumnTemplate_Call {
	return &MockBoardTemplates_CreateColumnTemplate_Call{Call: _e.mock.On("CreateColumnTemplate", ctx, body)}
}

func (_c *MockBoardTemplates_CreateColumnTemplate_Call) Run(run func(ctx context.Context, body dto.ColumnTemplateRequest)) *MockBoardTemplates_CreateColumnTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ColumnTemplateRequest))
	})
	return _c
}

func (_c *MockBoardTemplates_CreateColumnTemplate_Call) Return(_a0 *dto.ColumnTemplate, _a1 error) *MockBoardTemplates_CreateColumnTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_CreateColumnTemplate_Call) RunAndReturn(run func(context.Context, dto.ColumnTemplateRequest) (*dto.ColumnTemplate, error)) *MockBoardTemplates_CreateColumnTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *MockBoardTemplates) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBoardTemplates_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBoardTemplates_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardTemplates_Expecter) Delete(ctx interface{}, id interface{}) *MockBoardTemplates_Delete_Call {
	return &MockBoardTemplates_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockBoardTemplates_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardTemplates_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardTemplates_Delete_Call) Return(_a0 error) *MockBoardTemplates_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBoardTemplates_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockBoardTemplates_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteColumnTemplate provides a mock function with given fields: ctx, boar, column, user
func (_m *MockBoardTemplates) DeleteColumnTemplate(ctx context.Context, boar uuid.UUID, column uuid.UUID, user uuid.UUID) error {
	ret := _m.Called(ctx, boar, column, user)

	if len(ret) == 0 {
		panic("no return value specified for DeleteColumnTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, boar, column, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBoardTemplates_DeleteColumnTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteColumnTemplate'
type MockBoardTemplates_DeleteColumnTemplate_Call struct {
	*mock.Call
}

// DeleteColumnTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - boar uuid.UUID
//   - column uuid.UUID
//   - user uuid.UUID
func (_e *MockBoardTemplates_Expecter) DeleteColumnTemplate(ctx interface{}, boar interface{}, column interface{}, user interface{}) *MockBoardTemplates_DeleteColumnTemplate_Call {
	return &MockBoardTemplates_DeleteColumnTemplate_Call{Call: _e.mock.On("DeleteColumnTemplate", ctx, boar, column, user)}
}

func (_c *MockBoardTemplates_DeleteColumnTemplate_Call) Run(run func(ctx context.Context, boar uuid.UUID, column uuid.UUID, user uuid.UUID)) *MockBoardTemplates_DeleteColumnTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardTemplates_DeleteColumnTemplate_Call) Return(_a0 error) *MockBoardTemplates_DeleteColumnTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBoardTemplates_DeleteColumnTemplate_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error) *MockBoardTemplates_DeleteColumnTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockBoardTemplates) Get(ctx context.Context, id uuid.UUID) (*dto.BoardTemplate, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dto.BoardTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*dto.BoardTemplate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *dto.BoardTemplate); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBoardTemplates_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockBoardTemplates_Expecter) Get(ctx interface{}, id interface{}) *MockBoardTemplates_Get_Call {
	return &MockBoardTemplates_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockBoardTemplates_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockBoardTemplates_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardTemplates_Get_Call) Return(_a0 *dto.BoardTemplate, _a1 error) *MockBoardTemplates_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*dto.BoardTemplate, error)) *MockBoardTemplates_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetColumnTemplate provides a mock function with given fields: ctx, boardID, columnID
func (_m *MockBoardTemplates) GetColumnTemplate(ctx context.Context, boardID uuid.UUID, columnID uuid.UUID) (*dto.ColumnTemplate, error) {
	ret := _m.Called(ctx, boardID, columnID)

	if len(ret) == 0 {
		panic("no return value specified for GetColumnTemplate")
	}

	var r0 *dto.ColumnTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*dto.ColumnTemplate, error)); ok {
		return rf(ctx, boardID, columnID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *dto.ColumnTemplate); ok {
		r0 = rf(ctx, boardID, columnID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ColumnTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, columnID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_GetColumnTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetColumnTemplate'
type MockBoardTemplates_GetColumnTemplate_Call struct {
	*mock.Call
}

// GetColumnTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - columnID uuid.UUID
func (_e *MockBoardTemplates_Expecter) GetColumnTemplate(ctx interface{}, boardID interface{}, columnID interface{}) *MockBoardTemplates_GetColumnTemplate_Call {
	return &MockBoardTemplates_GetColumnTemplate_Call{Call: _e.mock.On("GetColumnTemplate", ctx, boardID, columnID)}
}

func (_c *MockBoardTemplates_GetColumnTemplate_Call) Run(run func(ctx context.Context, boardID uuid.UUID, columnID uuid.UUID)) *MockBoardTemplates_GetColumnTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardTemplates_GetColumnTemplate_Call) Return(_a0 *dto.ColumnTemplate, _a1 error) *MockBoardTemplates_GetColumnTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_GetColumnTemplate_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*dto.ColumnTemplate, error)) *MockBoardTemplates_GetColumnTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, user
func (_m *MockBoardTemplates) List(ctx context.Context, user uuid.UUID) ([]*dto.BoardTemplateFull, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*dto.BoardTemplateFull
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dto.BoardTemplateFull, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dto.BoardTemplateFull); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BoardTemplateFull)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBoardTemplates_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - user uuid.UUID
func (_e *MockBoardTemplates_Expecter) List(ctx interface{}, user interface{}) *MockBoardTemplates_List_Call {
	return &MockBoardTemplates_List_Call{Call: _e.mock.On("List", ctx, user)}
}

func (_c *MockBoardTemplates_List_Call) Run(run func(ctx context.Context, user uuid.UUID)) *MockBoardTemplates_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardTemplates_List_Call) Return(_a0 []*dto.BoardTemplateFull, _a1 error) *MockBoardTemplates_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_List_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*dto.BoardTemplateFull, error)) *MockBoardTemplates_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListColumnTemplates provides a mock function with given fields: ctx, board
func (_m *MockBoardTemplates) ListColumnTemplates(ctx context.Context, board uuid.UUID) ([]*dto.ColumnTemplate, error) {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for ListColumnTemplates")
	}

	var r0 []*dto.ColumnTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*dto.ColumnTemplate, error)); ok {
		return rf(ctx, board)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*dto.ColumnTemplate); ok {
		r0 = rf(ctx, board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.ColumnTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, board)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_ListColumnTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListColumnTemplates'
type MockBoardTemplates_ListColumnTemplates_Call struct {
	*mock.Call
}

// ListColumnTemplates is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
func (_e *MockBoardTemplates_Expecter) ListColumnTemplates(ctx interface{}, board interface{}) *MockBoardTemplates_ListColumnTemplates_Call {
	return &MockBoardTemplates_ListColumnTemplates_Call{Call: _e.mock.On("ListColumnTemplates", ctx, board)}
}

func (_c *MockBoardTemplates_ListColumnTemplates_Call) Run(run func(ctx context.Context, board uuid.UUID)) *MockBoardTemplates_ListColumnTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardTemplates_ListColumnTemplates_Call) Return(_a0 []*dto.ColumnTemplate, _a1 error) *MockBoardTemplates_ListColumnTemplates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_ListColumnTemplates_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*dto.ColumnTemplate, error)) *MockBoardTemplates_ListColumnTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, body
func (_m *MockBoardTemplates) Update(ctx context.Context, body dto.BoardTemplateUpdateRequest) (*dto.BoardTemplate, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *dto.BoardTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardTemplateUpdateRequest) (*dto.BoardTemplate, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardTemplateUpdateRequest) *dto.BoardTemplate); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BoardTemplateUpdateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBoardTemplates_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.BoardTemplateUpdateRequest
func (_e *MockBoardTemplates_Expecter) Update(ctx interface{}, body interface{}) *MockBoardTemplates_Update_Call {
	return &MockBoardTemplates_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockBoardTemplates_Update_Call) Run(run func(ctx context.Context, body dto.BoardTemplateUpdateRequest)) *MockBoardTemplates_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.BoardTemplateUpdateRequest))
	})
	return _c
}

func (_c *MockBoardTemplates_Update_Call) Return(_a0 *dto.BoardTemplate, _a1 error) *MockBoardTemplates_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_Update_Call) RunAndReturn(run func(context.Context, dto.BoardTemplateUpdateRequest) (*dto.BoardTemplate, error)) *MockBoardTemplates_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateColumnTemplate provides a mock function with given fields: ctx, body
func (_m *MockBoardTemplates) UpdateColumnTemplate(ctx context.Context, body dto.ColumnTemplateUpdateRequest) (*dto.ColumnTemplate, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateColumnTemplate")
	}

	var r0 *dto.ColumnTemplate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.ColumnTemplateUpdateRequest) (*dto.ColumnTemplate, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.ColumnTemplateUpdateRequest) *dto.ColumnTemplate); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.ColumnTemplate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.ColumnTemplateUpdateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardTemplates_UpdateColumnTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateColumnTemplate'
type MockBoardTemplates_UpdateColumnTemplate_Call struct {
	*mock.Call
}

// UpdateColumnTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.ColumnTemplateUpdateRequest
func (_e *MockBoardTemplates_Expecter) UpdateColumnTemplate(ctx interface{}, body interface{}) *MockBoardTemplates_UpdateColumnTemplate_Call {
	return &MockBoardTemplates_UpdateColumnTemplate_Call{Call: _e.mock.On("UpdateColumnTemplate", ctx, body)}
}

func (_c *MockBoardTemplates_UpdateColumnTemplate_Call) Run(run func(ctx context.Context, body dto.ColumnTemplateUpdateRequest)) *MockBoardTemplates_UpdateColumnTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.ColumnTemplateUpdateRequest))
	})
	return _c
}

func (_c *MockBoardTemplates_UpdateColumnTemplate_Call) Return(_a0 *dto.ColumnTemplate, _a1 error) *MockBoardTemplates_UpdateColumnTemplate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardTemplates_UpdateColumnTemplate_Call) RunAndReturn(run func(context.Context, dto.ColumnTemplateUpdateRequest) (*dto.ColumnTemplate, error)) *MockBoardTemplates_UpdateColumnTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBoardTemplates creates a new instance of MockBoardTemplates. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBoardTemplates(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBoardTemplates {
	mock := &MockBoardTemplates{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
