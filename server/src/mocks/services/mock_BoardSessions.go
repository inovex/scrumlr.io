// Code generated by mockery v2.52.3. DO NOT EDIT.

package services

import (
	context "context"

	dto "scrumlr.io/server/common/dto"
	filter "scrumlr.io/server/common/filter"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockBoardSessions is an autogenerated mock type for the BoardSessions type
type MockBoardSessions struct {
	mock.Mock
}

type MockBoardSessions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBoardSessions) EXPECT() *MockBoardSessions_Expecter {
	return &MockBoardSessions_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) Connect(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBoardSessions_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockBoardSessions_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) Connect(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_Connect_Call {
	return &MockBoardSessions_Connect_Call{Call: _e.mock.On("Connect", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_Connect_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_Connect_Call) Return(_a0 error) *MockBoardSessions_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBoardSessions_Connect_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockBoardSessions_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) Create(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*dto.BoardSession, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *dto.BoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSession, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *dto.BoardSession); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockBoardSessions_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) Create(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_Create_Call {
	return &MockBoardSessions_Create_Call{Call: _e.mock.On("Create", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_Create_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_Create_Call) Return(_a0 *dto.BoardSession, _a1 error) *MockBoardSessions_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_Create_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSession, error)) *MockBoardSessions_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSessionRequest provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) CreateSessionRequest(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*dto.BoardSessionRequest, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateSessionRequest")
	}

	var r0 *dto.BoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSessionRequest, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *dto.BoardSessionRequest); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardSessionRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_CreateSessionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSessionRequest'
type MockBoardSessions_CreateSessionRequest_Call struct {
	*mock.Call
}

// CreateSessionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) CreateSessionRequest(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_CreateSessionRequest_Call {
	return &MockBoardSessions_CreateSessionRequest_Call{Call: _e.mock.On("CreateSessionRequest", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_CreateSessionRequest_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_CreateSessionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_CreateSessionRequest_Call) Return(_a0 *dto.BoardSessionRequest, _a1 error) *MockBoardSessions_CreateSessionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_CreateSessionRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSessionRequest, error)) *MockBoardSessions_CreateSessionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) Disconnect(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) error {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBoardSessions_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockBoardSessions_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) Disconnect(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_Disconnect_Call {
	return &MockBoardSessions_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_Disconnect_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_Disconnect_Call) Return(_a0 error) *MockBoardSessions_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBoardSessions_Disconnect_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *MockBoardSessions_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) Get(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*dto.BoardSession, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *dto.BoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSession, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *dto.BoardSession); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockBoardSessions_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) Get(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_Get_Call {
	return &MockBoardSessions_Get_Call{Call: _e.mock.On("Get", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_Get_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_Get_Call) Return(_a0 *dto.BoardSession, _a1 error) *MockBoardSessions_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSession, error)) *MockBoardSessions_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetSessionRequest provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) GetSessionRequest(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (*dto.BoardSessionRequest, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionRequest")
	}

	var r0 *dto.BoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSessionRequest, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *dto.BoardSessionRequest); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardSessionRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_GetSessionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSessionRequest'
type MockBoardSessions_GetSessionRequest_Call struct {
	*mock.Call
}

// GetSessionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) GetSessionRequest(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_GetSessionRequest_Call {
	return &MockBoardSessions_GetSessionRequest_Call{Call: _e.mock.On("GetSessionRequest", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_GetSessionRequest_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_GetSessionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_GetSessionRequest_Call) Return(_a0 *dto.BoardSessionRequest, _a1 error) *MockBoardSessions_GetSessionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_GetSessionRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*dto.BoardSessionRequest, error)) *MockBoardSessions_GetSessionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, boardID, f
func (_m *MockBoardSessions) List(ctx context.Context, boardID uuid.UUID, f filter.BoardSessionFilter) ([]*dto.BoardSession, error) {
	ret := _m.Called(ctx, boardID, f)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*dto.BoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, filter.BoardSessionFilter) ([]*dto.BoardSession, error)); ok {
		return rf(ctx, boardID, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, filter.BoardSessionFilter) []*dto.BoardSession); ok {
		r0 = rf(ctx, boardID, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, filter.BoardSessionFilter) error); ok {
		r1 = rf(ctx, boardID, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBoardSessions_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - f filter.BoardSessionFilter
func (_e *MockBoardSessions_Expecter) List(ctx interface{}, boardID interface{}, f interface{}) *MockBoardSessions_List_Call {
	return &MockBoardSessions_List_Call{Call: _e.mock.On("List", ctx, boardID, f)}
}

func (_c *MockBoardSessions_List_Call) Run(run func(ctx context.Context, boardID uuid.UUID, f filter.BoardSessionFilter)) *MockBoardSessions_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(filter.BoardSessionFilter))
	})
	return _c
}

func (_c *MockBoardSessions_List_Call) Return(_a0 []*dto.BoardSession, _a1 error) *MockBoardSessions_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_List_Call) RunAndReturn(run func(context.Context, uuid.UUID, filter.BoardSessionFilter) ([]*dto.BoardSession, error)) *MockBoardSessions_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListSessionRequest provides a mock function with given fields: ctx, boardID, statusQuery
func (_m *MockBoardSessions) ListSessionRequest(ctx context.Context, boardID uuid.UUID, statusQuery string) ([]*dto.BoardSessionRequest, error) {
	ret := _m.Called(ctx, boardID, statusQuery)

	if len(ret) == 0 {
		panic("no return value specified for ListSessionRequest")
	}

	var r0 []*dto.BoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]*dto.BoardSessionRequest, error)); ok {
		return rf(ctx, boardID, statusQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []*dto.BoardSessionRequest); ok {
		r0 = rf(ctx, boardID, statusQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BoardSessionRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, boardID, statusQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_ListSessionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSessionRequest'
type MockBoardSessions_ListSessionRequest_Call struct {
	*mock.Call
}

// ListSessionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - statusQuery string
func (_e *MockBoardSessions_Expecter) ListSessionRequest(ctx interface{}, boardID interface{}, statusQuery interface{}) *MockBoardSessions_ListSessionRequest_Call {
	return &MockBoardSessions_ListSessionRequest_Call{Call: _e.mock.On("ListSessionRequest", ctx, boardID, statusQuery)}
}

func (_c *MockBoardSessions_ListSessionRequest_Call) Run(run func(ctx context.Context, boardID uuid.UUID, statusQuery string)) *MockBoardSessions_ListSessionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *MockBoardSessions_ListSessionRequest_Call) Return(_a0 []*dto.BoardSessionRequest, _a1 error) *MockBoardSessions_ListSessionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_ListSessionRequest_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) ([]*dto.BoardSessionRequest, error)) *MockBoardSessions_ListSessionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// ModeratorSessionExists provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) ModeratorSessionExists(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ModeratorSessionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_ModeratorSessionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ModeratorSessionExists'
type MockBoardSessions_ModeratorSessionExists_Call struct {
	*mock.Call
}

// ModeratorSessionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) ModeratorSessionExists(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_ModeratorSessionExists_Call {
	return &MockBoardSessions_ModeratorSessionExists_Call{Call: _e.mock.On("ModeratorSessionExists", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_ModeratorSessionExists_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_ModeratorSessionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_ModeratorSessionExists_Call) Return(_a0 bool, _a1 error) *MockBoardSessions_ModeratorSessionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_ModeratorSessionExists_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockBoardSessions_ModeratorSessionExists_Call {
	_c.Call.Return(run)
	return _c
}

// ParticipantBanned provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) ParticipantBanned(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ParticipantBanned")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_ParticipantBanned_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParticipantBanned'
type MockBoardSessions_ParticipantBanned_Call struct {
	*mock.Call
}

// ParticipantBanned is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) ParticipantBanned(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_ParticipantBanned_Call {
	return &MockBoardSessions_ParticipantBanned_Call{Call: _e.mock.On("ParticipantBanned", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_ParticipantBanned_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_ParticipantBanned_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_ParticipantBanned_Call) Return(_a0 bool, _a1 error) *MockBoardSessions_ParticipantBanned_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_ParticipantBanned_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockBoardSessions_ParticipantBanned_Call {
	_c.Call.Return(run)
	return _c
}

// SessionExists provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) SessionExists(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for SessionExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_SessionExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionExists'
type MockBoardSessions_SessionExists_Call struct {
	*mock.Call
}

// SessionExists is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) SessionExists(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_SessionExists_Call {
	return &MockBoardSessions_SessionExists_Call{Call: _e.mock.On("SessionExists", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_SessionExists_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_SessionExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_SessionExists_Call) Return(_a0 bool, _a1 error) *MockBoardSessions_SessionExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_SessionExists_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockBoardSessions_SessionExists_Call {
	_c.Call.Return(run)
	return _c
}

// SessionRequestExists provides a mock function with given fields: ctx, boardID, userID
func (_m *MockBoardSessions) SessionRequestExists(ctx context.Context, boardID uuid.UUID, userID uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, boardID, userID)

	if len(ret) == 0 {
		panic("no return value specified for SessionRequestExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, boardID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, boardID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, boardID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_SessionRequestExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SessionRequestExists'
type MockBoardSessions_SessionRequestExists_Call struct {
	*mock.Call
}

// SessionRequestExists is a helper method to define mock.On call
//   - ctx context.Context
//   - boardID uuid.UUID
//   - userID uuid.UUID
func (_e *MockBoardSessions_Expecter) SessionRequestExists(ctx interface{}, boardID interface{}, userID interface{}) *MockBoardSessions_SessionRequestExists_Call {
	return &MockBoardSessions_SessionRequestExists_Call{Call: _e.mock.On("SessionRequestExists", ctx, boardID, userID)}
}

func (_c *MockBoardSessions_SessionRequestExists_Call) Run(run func(ctx context.Context, boardID uuid.UUID, userID uuid.UUID)) *MockBoardSessions_SessionRequestExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockBoardSessions_SessionRequestExists_Call) Return(_a0 bool, _a1 error) *MockBoardSessions_SessionRequestExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_SessionRequestExists_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (bool, error)) *MockBoardSessions_SessionRequestExists_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, body
func (_m *MockBoardSessions) Update(ctx context.Context, body dto.BoardSessionUpdateRequest) (*dto.BoardSession, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *dto.BoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardSessionUpdateRequest) (*dto.BoardSession, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardSessionUpdateRequest) *dto.BoardSession); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BoardSessionUpdateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBoardSessions_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.BoardSessionUpdateRequest
func (_e *MockBoardSessions_Expecter) Update(ctx interface{}, body interface{}) *MockBoardSessions_Update_Call {
	return &MockBoardSessions_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockBoardSessions_Update_Call) Run(run func(ctx context.Context, body dto.BoardSessionUpdateRequest)) *MockBoardSessions_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.BoardSessionUpdateRequest))
	})
	return _c
}

func (_c *MockBoardSessions_Update_Call) Return(_a0 *dto.BoardSession, _a1 error) *MockBoardSessions_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_Update_Call) RunAndReturn(run func(context.Context, dto.BoardSessionUpdateRequest) (*dto.BoardSession, error)) *MockBoardSessions_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAll provides a mock function with given fields: ctx, body
func (_m *MockBoardSessions) UpdateAll(ctx context.Context, body dto.BoardSessionsUpdateRequest) ([]*dto.BoardSession, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAll")
	}

	var r0 []*dto.BoardSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardSessionsUpdateRequest) ([]*dto.BoardSession, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardSessionsUpdateRequest) []*dto.BoardSession); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.BoardSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BoardSessionsUpdateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_UpdateAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAll'
type MockBoardSessions_UpdateAll_Call struct {
	*mock.Call
}

// UpdateAll is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.BoardSessionsUpdateRequest
func (_e *MockBoardSessions_Expecter) UpdateAll(ctx interface{}, body interface{}) *MockBoardSessions_UpdateAll_Call {
	return &MockBoardSessions_UpdateAll_Call{Call: _e.mock.On("UpdateAll", ctx, body)}
}

func (_c *MockBoardSessions_UpdateAll_Call) Run(run func(ctx context.Context, body dto.BoardSessionsUpdateRequest)) *MockBoardSessions_UpdateAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.BoardSessionsUpdateRequest))
	})
	return _c
}

func (_c *MockBoardSessions_UpdateAll_Call) Return(_a0 []*dto.BoardSession, _a1 error) *MockBoardSessions_UpdateAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_UpdateAll_Call) RunAndReturn(run func(context.Context, dto.BoardSessionsUpdateRequest) ([]*dto.BoardSession, error)) *MockBoardSessions_UpdateAll_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSessionRequest provides a mock function with given fields: ctx, body
func (_m *MockBoardSessions) UpdateSessionRequest(ctx context.Context, body dto.BoardSessionRequestUpdate) (*dto.BoardSessionRequest, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSessionRequest")
	}

	var r0 *dto.BoardSessionRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardSessionRequestUpdate) (*dto.BoardSessionRequest, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.BoardSessionRequestUpdate) *dto.BoardSessionRequest); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.BoardSessionRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.BoardSessionRequestUpdate) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBoardSessions_UpdateSessionRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSessionRequest'
type MockBoardSessions_UpdateSessionRequest_Call struct {
	*mock.Call
}

// UpdateSessionRequest is a helper method to define mock.On call
//   - ctx context.Context
//   - body dto.BoardSessionRequestUpdate
func (_e *MockBoardSessions_Expecter) UpdateSessionRequest(ctx interface{}, body interface{}) *MockBoardSessions_UpdateSessionRequest_Call {
	return &MockBoardSessions_UpdateSessionRequest_Call{Call: _e.mock.On("UpdateSessionRequest", ctx, body)}
}

func (_c *MockBoardSessions_UpdateSessionRequest_Call) Run(run func(ctx context.Context, body dto.BoardSessionRequestUpdate)) *MockBoardSessions_UpdateSessionRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.BoardSessionRequestUpdate))
	})
	return _c
}

func (_c *MockBoardSessions_UpdateSessionRequest_Call) Return(_a0 *dto.BoardSessionRequest, _a1 error) *MockBoardSessions_UpdateSessionRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBoardSessions_UpdateSessionRequest_Call) RunAndReturn(run func(context.Context, dto.BoardSessionRequestUpdate) (*dto.BoardSessionRequest, error)) *MockBoardSessions_UpdateSessionRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBoardSessions creates a new instance of MockBoardSessions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBoardSessions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBoardSessions {
	mock := &MockBoardSessions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
