// Code generated by mockery v2.52.2. DO NOT EDIT.

package services

import (
	context "context"

	dto "scrumlr.io/server/common/dto"
	filter "scrumlr.io/server/common/filter"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	votes "scrumlr.io/server/votes"
)

// MockVotings is an autogenerated mock type for the Votings type
type MockVotings struct {
	mock.Mock
}

type MockVotings_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVotings) EXPECT() *MockVotings_Expecter {
	return &MockVotings_Expecter{mock: &_m.Mock}
}

// AddVote provides a mock function with given fields: ctx, req
func (_m *MockVotings) AddVote(ctx context.Context, req dto.VoteRequest) (*dto.Vote, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 *dto.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.VoteRequest) (*dto.Vote, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.VoteRequest) *dto.Vote); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Vote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.VoteRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotings_AddVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddVote'
type MockVotings_AddVote_Call struct {
	*mock.Call
}

// AddVote is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.VoteRequest
func (_e *MockVotings_Expecter) AddVote(ctx interface{}, req interface{}) *MockVotings_AddVote_Call {
	return &MockVotings_AddVote_Call{Call: _e.mock.On("AddVote", ctx, req)}
}

func (_c *MockVotings_AddVote_Call) Run(run func(ctx context.Context, req dto.VoteRequest)) *MockVotings_AddVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.VoteRequest))
	})
	return _c
}

func (_c *MockVotings_AddVote_Call) Return(_a0 *dto.Vote, _a1 error) *MockVotings_AddVote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotings_AddVote_Call) RunAndReturn(run func(context.Context, dto.VoteRequest) (*dto.Vote, error)) *MockVotings_AddVote_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, body
func (_m *MockVotings) Create(ctx context.Context, body votes.VotingCreateRequest) (*votes.Voting, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *votes.Voting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, votes.VotingCreateRequest) (*votes.Voting, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, votes.VotingCreateRequest) *votes.Voting); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*votes.Voting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, votes.VotingCreateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotings_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockVotings_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - body votes.VotingCreateRequest
func (_e *MockVotings_Expecter) Create(ctx interface{}, body interface{}) *MockVotings_Create_Call {
	return &MockVotings_Create_Call{Call: _e.mock.On("Create", ctx, body)}
}

func (_c *MockVotings_Create_Call) Run(run func(ctx context.Context, body votes.VotingCreateRequest)) *MockVotings_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(votes.VotingCreateRequest))
	})
	return _c
}

func (_c *MockVotings_Create_Call) Return(_a0 *votes.Voting, _a1 error) *MockVotings_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotings_Create_Call) RunAndReturn(run func(context.Context, votes.VotingCreateRequest) (*votes.Voting, error)) *MockVotings_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, board, id
func (_m *MockVotings) Get(ctx context.Context, board uuid.UUID, id uuid.UUID) (*votes.Voting, error) {
	ret := _m.Called(ctx, board, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *votes.Voting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*votes.Voting, error)); ok {
		return rf(ctx, board, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *votes.Voting); ok {
		r0 = rf(ctx, board, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*votes.Voting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, board, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotings_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockVotings_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - id uuid.UUID
func (_e *MockVotings_Expecter) Get(ctx interface{}, board interface{}, id interface{}) *MockVotings_Get_Call {
	return &MockVotings_Get_Call{Call: _e.mock.On("Get", ctx, board, id)}
}

func (_c *MockVotings_Get_Call) Run(run func(ctx context.Context, board uuid.UUID, id uuid.UUID)) *MockVotings_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *MockVotings_Get_Call) Return(_a0 *votes.Voting, _a1 error) *MockVotings_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotings_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*votes.Voting, error)) *MockVotings_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetVotes provides a mock function with given fields: ctx, f
func (_m *MockVotings) GetVotes(ctx context.Context, f filter.VoteFilter) ([]*dto.Vote, error) {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for GetVotes")
	}

	var r0 []*dto.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filter.VoteFilter) ([]*dto.Vote, error)); ok {
		return rf(ctx, f)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filter.VoteFilter) []*dto.Vote); ok {
		r0 = rf(ctx, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Vote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, filter.VoteFilter) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotings_GetVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVotes'
type MockVotings_GetVotes_Call struct {
	*mock.Call
}

// GetVotes is a helper method to define mock.On call
//   - ctx context.Context
//   - f filter.VoteFilter
func (_e *MockVotings_Expecter) GetVotes(ctx interface{}, f interface{}) *MockVotings_GetVotes_Call {
	return &MockVotings_GetVotes_Call{Call: _e.mock.On("GetVotes", ctx, f)}
}

func (_c *MockVotings_GetVotes_Call) Run(run func(ctx context.Context, f filter.VoteFilter)) *MockVotings_GetVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filter.VoteFilter))
	})
	return _c
}

func (_c *MockVotings_GetVotes_Call) Return(_a0 []*dto.Vote, _a1 error) *MockVotings_GetVotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotings_GetVotes_Call) RunAndReturn(run func(context.Context, filter.VoteFilter) ([]*dto.Vote, error)) *MockVotings_GetVotes_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, board
func (_m *MockVotings) List(ctx context.Context, board uuid.UUID) ([]*votes.Voting, error) {
	ret := _m.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*votes.Voting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*votes.Voting, error)); ok {
		return rf(ctx, board)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*votes.Voting); ok {
		r0 = rf(ctx, board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*votes.Voting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, board)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotings_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockVotings_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
func (_e *MockVotings_Expecter) List(ctx interface{}, board interface{}) *MockVotings_List_Call {
	return &MockVotings_List_Call{Call: _e.mock.On("List", ctx, board)}
}

func (_c *MockVotings_List_Call) Run(run func(ctx context.Context, board uuid.UUID)) *MockVotings_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockVotings_List_Call) Return(_a0 []*votes.Voting, _a1 error) *MockVotings_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotings_List_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*votes.Voting, error)) *MockVotings_List_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveVote provides a mock function with given fields: ctx, req
func (_m *MockVotings) RemoveVote(ctx context.Context, req dto.VoteRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RemoveVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.VoteRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVotings_RemoveVote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveVote'
type MockVotings_RemoveVote_Call struct {
	*mock.Call
}

// RemoveVote is a helper method to define mock.On call
//   - ctx context.Context
//   - req dto.VoteRequest
func (_e *MockVotings_Expecter) RemoveVote(ctx interface{}, req interface{}) *MockVotings_RemoveVote_Call {
	return &MockVotings_RemoveVote_Call{Call: _e.mock.On("RemoveVote", ctx, req)}
}

func (_c *MockVotings_RemoveVote_Call) Run(run func(ctx context.Context, req dto.VoteRequest)) *MockVotings_RemoveVote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(dto.VoteRequest))
	})
	return _c
}

func (_c *MockVotings_RemoveVote_Call) Return(_a0 error) *MockVotings_RemoveVote_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVotings_RemoveVote_Call) RunAndReturn(run func(context.Context, dto.VoteRequest) error) *MockVotings_RemoveVote_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, body
func (_m *MockVotings) Update(ctx context.Context, body votes.VotingUpdateRequest) (*votes.Voting, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *votes.Voting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, votes.VotingUpdateRequest) (*votes.Voting, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, votes.VotingUpdateRequest) *votes.Voting); ok {
		r0 = rf(ctx, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*votes.Voting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, votes.VotingUpdateRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVotings_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockVotings_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - body votes.VotingUpdateRequest
func (_e *MockVotings_Expecter) Update(ctx interface{}, body interface{}) *MockVotings_Update_Call {
	return &MockVotings_Update_Call{Call: _e.mock.On("Update", ctx, body)}
}

func (_c *MockVotings_Update_Call) Run(run func(ctx context.Context, body votes.VotingUpdateRequest)) *MockVotings_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(votes.VotingUpdateRequest))
	})
	return _c
}

func (_c *MockVotings_Update_Call) Return(_a0 *votes.Voting, _a1 error) *MockVotings_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVotings_Update_Call) RunAndReturn(run func(context.Context, votes.VotingUpdateRequest) (*votes.Voting, error)) *MockVotings_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVotings creates a new instance of MockVotings. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVotings(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVotings {
	mock := &MockVotings{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
