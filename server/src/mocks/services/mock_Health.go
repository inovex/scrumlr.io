// Code generated by mockery v2.51.0. DO NOT EDIT.

package services

import mock "github.com/stretchr/testify/mock"

// MockHealth is an autogenerated mock type for the Health type
type MockHealth struct {
	mock.Mock
}

type MockHealth_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealth) EXPECT() *MockHealth_Expecter {
	return &MockHealth_Expecter{mock: &_m.Mock}
}

// IsDatabaseHealthy provides a mock function with no fields
func (_m *MockHealth) IsDatabaseHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsDatabaseHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockHealth_IsDatabaseHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsDatabaseHealthy'
type MockHealth_IsDatabaseHealthy_Call struct {
	*mock.Call
}

// IsDatabaseHealthy is a helper method to define mock.On call
func (_e *MockHealth_Expecter) IsDatabaseHealthy() *MockHealth_IsDatabaseHealthy_Call {
	return &MockHealth_IsDatabaseHealthy_Call{Call: _e.mock.On("IsDatabaseHealthy")}
}

func (_c *MockHealth_IsDatabaseHealthy_Call) Run(run func()) *MockHealth_IsDatabaseHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHealth_IsDatabaseHealthy_Call) Return(_a0 bool) *MockHealth_IsDatabaseHealthy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHealth_IsDatabaseHealthy_Call) RunAndReturn(run func() bool) *MockHealth_IsDatabaseHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// IsRealtimeHealthy provides a mock function with no fields
func (_m *MockHealth) IsRealtimeHealthy() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRealtimeHealthy")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockHealth_IsRealtimeHealthy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRealtimeHealthy'
type MockHealth_IsRealtimeHealthy_Call struct {
	*mock.Call
}

// IsRealtimeHealthy is a helper method to define mock.On call
func (_e *MockHealth_Expecter) IsRealtimeHealthy() *MockHealth_IsRealtimeHealthy_Call {
	return &MockHealth_IsRealtimeHealthy_Call{Call: _e.mock.On("IsRealtimeHealthy")}
}

func (_c *MockHealth_IsRealtimeHealthy_Call) Run(run func()) *MockHealth_IsRealtimeHealthy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHealth_IsRealtimeHealthy_Call) Return(_a0 bool) *MockHealth_IsRealtimeHealthy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHealth_IsRealtimeHealthy_Call) RunAndReturn(run func() bool) *MockHealth_IsRealtimeHealthy_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHealth creates a new instance of MockHealth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHealth(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHealth {
	mock := &MockHealth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
