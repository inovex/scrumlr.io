// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package reactions

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockReactionDatabase creates a new instance of MockReactionDatabase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReactionDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReactionDatabase {
	mock := &MockReactionDatabase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockReactionDatabase is an autogenerated mock type for the ReactionDatabase type
type MockReactionDatabase struct {
	mock.Mock
}

type MockReactionDatabase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReactionDatabase) EXPECT() *MockReactionDatabase_Expecter {
	return &MockReactionDatabase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockReactionDatabase
func (_mock *MockReactionDatabase) Create(ctx context.Context, board uuid.UUID, insert DatabaseReactionInsert) (DatabaseReaction, error) {
	ret := _mock.Called(ctx, board, insert)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 DatabaseReaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, DatabaseReactionInsert) (DatabaseReaction, error)); ok {
		return returnFunc(ctx, board, insert)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, DatabaseReactionInsert) DatabaseReaction); ok {
		r0 = returnFunc(ctx, board, insert)
	} else {
		r0 = ret.Get(0).(DatabaseReaction)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, DatabaseReactionInsert) error); ok {
		r1 = returnFunc(ctx, board, insert)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReactionDatabase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockReactionDatabase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - insert DatabaseReactionInsert
func (_e *MockReactionDatabase_Expecter) Create(ctx interface{}, board interface{}, insert interface{}) *MockReactionDatabase_Create_Call {
	return &MockReactionDatabase_Create_Call{Call: _e.mock.On("Create", ctx, board, insert)}
}

func (_c *MockReactionDatabase_Create_Call) Run(run func(ctx context.Context, board uuid.UUID, insert DatabaseReactionInsert)) *MockReactionDatabase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 DatabaseReactionInsert
		if args[2] != nil {
			arg2 = args[2].(DatabaseReactionInsert)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockReactionDatabase_Create_Call) Return(databaseReaction DatabaseReaction, err error) *MockReactionDatabase_Create_Call {
	_c.Call.Return(databaseReaction, err)
	return _c
}

func (_c *MockReactionDatabase_Create_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, insert DatabaseReactionInsert) (DatabaseReaction, error)) *MockReactionDatabase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockReactionDatabase
func (_mock *MockReactionDatabase) Delete(ctx context.Context, board uuid.UUID, user uuid.UUID, id uuid.UUID) error {
	ret := _mock.Called(ctx, board, user, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, board, user, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockReactionDatabase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockReactionDatabase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - user uuid.UUID
//   - id uuid.UUID
func (_e *MockReactionDatabase_Expecter) Delete(ctx interface{}, board interface{}, user interface{}, id interface{}) *MockReactionDatabase_Delete_Call {
	return &MockReactionDatabase_Delete_Call{Call: _e.mock.On("Delete", ctx, board, user, id)}
}

func (_c *MockReactionDatabase_Delete_Call) Run(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, id uuid.UUID)) *MockReactionDatabase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockReactionDatabase_Delete_Call) Return(err error) *MockReactionDatabase_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockReactionDatabase_Delete_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, id uuid.UUID) error) *MockReactionDatabase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockReactionDatabase
func (_mock *MockReactionDatabase) Get(ctx context.Context, id uuid.UUID) (DatabaseReaction, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 DatabaseReaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (DatabaseReaction, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) DatabaseReaction); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(DatabaseReaction)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReactionDatabase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockReactionDatabase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockReactionDatabase_Expecter) Get(ctx interface{}, id interface{}) *MockReactionDatabase_Get_Call {
	return &MockReactionDatabase_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockReactionDatabase_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockReactionDatabase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReactionDatabase_Get_Call) Return(databaseReaction DatabaseReaction, err error) *MockReactionDatabase_Get_Call {
	_c.Call.Return(databaseReaction, err)
	return _c
}

func (_c *MockReactionDatabase_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (DatabaseReaction, error)) *MockReactionDatabase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockReactionDatabase
func (_mock *MockReactionDatabase) GetAll(ctx context.Context, board uuid.UUID) ([]DatabaseReaction, error) {
	ret := _mock.Called(ctx, board)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []DatabaseReaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]DatabaseReaction, error)); ok {
		return returnFunc(ctx, board)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []DatabaseReaction); ok {
		r0 = returnFunc(ctx, board)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseReaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, board)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReactionDatabase_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockReactionDatabase_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
func (_e *MockReactionDatabase_Expecter) GetAll(ctx interface{}, board interface{}) *MockReactionDatabase_GetAll_Call {
	return &MockReactionDatabase_GetAll_Call{Call: _e.mock.On("GetAll", ctx, board)}
}

func (_c *MockReactionDatabase_GetAll_Call) Run(run func(ctx context.Context, board uuid.UUID)) *MockReactionDatabase_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReactionDatabase_GetAll_Call) Return(databaseReactions []DatabaseReaction, err error) *MockReactionDatabase_GetAll_Call {
	_c.Call.Return(databaseReactions, err)
	return _c
}

func (_c *MockReactionDatabase_GetAll_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID) ([]DatabaseReaction, error)) *MockReactionDatabase_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllForNote provides a mock function for the type MockReactionDatabase
func (_mock *MockReactionDatabase) GetAllForNote(ctx context.Context, note uuid.UUID) ([]DatabaseReaction, error) {
	ret := _mock.Called(ctx, note)

	if len(ret) == 0 {
		panic("no return value specified for GetAllForNote")
	}

	var r0 []DatabaseReaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]DatabaseReaction, error)); ok {
		return returnFunc(ctx, note)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []DatabaseReaction); ok {
		r0 = returnFunc(ctx, note)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DatabaseReaction)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, note)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReactionDatabase_GetAllForNote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllForNote'
type MockReactionDatabase_GetAllForNote_Call struct {
	*mock.Call
}

// GetAllForNote is a helper method to define mock.On call
//   - ctx context.Context
//   - note uuid.UUID
func (_e *MockReactionDatabase_Expecter) GetAllForNote(ctx interface{}, note interface{}) *MockReactionDatabase_GetAllForNote_Call {
	return &MockReactionDatabase_GetAllForNote_Call{Call: _e.mock.On("GetAllForNote", ctx, note)}
}

func (_c *MockReactionDatabase_GetAllForNote_Call) Run(run func(ctx context.Context, note uuid.UUID)) *MockReactionDatabase_GetAllForNote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockReactionDatabase_GetAllForNote_Call) Return(databaseReactions []DatabaseReaction, err error) *MockReactionDatabase_GetAllForNote_Call {
	_c.Call.Return(databaseReactions, err)
	return _c
}

func (_c *MockReactionDatabase_GetAllForNote_Call) RunAndReturn(run func(ctx context.Context, note uuid.UUID) ([]DatabaseReaction, error)) *MockReactionDatabase_GetAllForNote_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockReactionDatabase
func (_mock *MockReactionDatabase) Update(ctx context.Context, board uuid.UUID, user uuid.UUID, id uuid.UUID, update DatabaseReactionUpdate) (DatabaseReaction, error) {
	ret := _mock.Called(ctx, board, user, id, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 DatabaseReaction
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, DatabaseReactionUpdate) (DatabaseReaction, error)); ok {
		return returnFunc(ctx, board, user, id, update)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, DatabaseReactionUpdate) DatabaseReaction); ok {
		r0 = returnFunc(ctx, board, user, id, update)
	} else {
		r0 = ret.Get(0).(DatabaseReaction)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, uuid.UUID, DatabaseReactionUpdate) error); ok {
		r1 = returnFunc(ctx, board, user, id, update)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockReactionDatabase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockReactionDatabase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - board uuid.UUID
//   - user uuid.UUID
//   - id uuid.UUID
//   - update DatabaseReactionUpdate
func (_e *MockReactionDatabase_Expecter) Update(ctx interface{}, board interface{}, user interface{}, id interface{}, update interface{}) *MockReactionDatabase_Update_Call {
	return &MockReactionDatabase_Update_Call{Call: _e.mock.On("Update", ctx, board, user, id, update)}
}

func (_c *MockReactionDatabase_Update_Call) Run(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, id uuid.UUID, update DatabaseReactionUpdate)) *MockReactionDatabase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		var arg4 DatabaseReactionUpdate
		if args[4] != nil {
			arg4 = args[4].(DatabaseReactionUpdate)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockReactionDatabase_Update_Call) Return(databaseReaction DatabaseReaction, err error) *MockReactionDatabase_Update_Call {
	_c.Call.Return(databaseReaction, err)
	return _c
}

func (_c *MockReactionDatabase_Update_Call) RunAndReturn(run func(ctx context.Context, board uuid.UUID, user uuid.UUID, id uuid.UUID, update DatabaseReactionUpdate) (DatabaseReaction, error)) *MockReactionDatabase_Update_Call {
	_c.Call.Return(run)
	return _c
}
