{
	"info": {
		"_postman_id": "f8c3949e-0a5e-42f9-a0dc-93ed38f643f8",
		"name": "scrumlr.io",
		"description": "This is the documentation for the REST API server of the application [scrumlr.io](https://scrumlr.io). You get in touch with us and send an email to [info@scrumlr.io](info@scrumlr.io). The software is [MIT licensed](https://opensource.org/licenses/MIT) so do whatever you want with it. If you want to checkout the progress of our development and take a peek into our backlog you can checkout our [GitHub repository](https://github.com/inovex/scrumlr.io). By the way, this already the third iteration of our server and we're still working on the interface and on further improvements. Since the API is mainly intended for our web client we won't start with API versions at the moment so breaking changes may be incoming. Once it got stable we'll maybe start with that.\n\nIf you're using the postman collection in order to explore the different resources you should also checkout the variables of the collection. Anytime you'll create new resources (e.g. your login or a board) variables will be stored and used for subsequent calls on other resources.\n\nAccess to protected resources will be authorized if a bearer token is sent or it is included in the `jwt` Cookie, which will be automatically set upon login.\n\n## Getting started\n\nLet's try to explain the basic flow of how a new board can will be created and someone tries to join the board as a participant.\n\nFirst you can check whether you are already logged in by a `GET` request on `/user`. See the *User* section for more information.\n\n1.  A user signs into the application (see *Login* section)\n2.  The user creates a new board (`POST` on `/boards`, checkout *Boards* section)\n3.  Another logged in user tries to join the board (`POST` on `/boards/{id}/participants`, checkout *Participants* section)\n    1.  If the boards access policy is set to `PUBLIC` the participant will be added to the board and afterwards all resources will be available\n    2.  If the board requires a passphrase and the access policy is set to `BY_PASSPHRASE` a client error will be reported until the user sends the correct passphrase within the payload of the request\n    3.  If the boards access policy is set to `BY_INVITE` a session request will be created instead and the user will be redirected to the new resource. The board owner now needs to accept or reject the request until the user can continue\n\nThese are just the basic steps of how sessions can be created. You can also have a look into the section *Realtime* to see how you can open websockets and listen to live updates on the data.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32423964"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Create anonymous user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// store the user id within the collection variables\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"user_id\", jsonData.id);\r",
									"\r",
									"// store the jwt within the collection variables\r",
									"pm.collectionVariables.set(\"bearer_token\", pm.cookies.get(\"jwt\"));\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Check id is included\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Check name is included and trimmed\", function () {\r",
									"    var name = pm.response.json().name;\r",
									"    pm.expect(name).to.exist;\r",
									"    pm.expect(name).not.to.satisfy(s => s.startsWith(\" \"));\r",
									"    pm.expect(name).not.to.satisfy(s => s.endsWith(\" \"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"John Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/login/anonymous",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login",
								"anonymous"
							]
						},
						"description": "Create an anonymous user and sign-in into the application. You can choose a unique name for the user. The response will include an authorization token within the `jwt` Cookie.\n\n**Request body scheme**\n\n``` json\n{\n  // the display name of user\n  \"name\": \"Jane Doe\" \n}\n\n```\n\nThe specified `name` of the user will be trimmed before it gets persisted."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"John Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "/login/anonymous",
									"path": [
										"login",
										"anonymous"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Set-Cookie",
									"value": "jwt=eyJhbGciOiJFUzUxMiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjBkNDk5OTI3LTkwNDItNDc5MS1hYmQ3LWVhODg4NmYxOGRlZCJ9.AW3CGXASKlJhapE8xYYz4_F5tyTaZhfOvHGe-aEL9XuJYoJ4PphSCB0D8OqRXCzVP-okCy2b9U-_4Qrj7RYbOtsSAMkF2dWzDXv70LipEBxRAG6IXEKw83vS1hGYP9di765DmL4Q4gXKQ2Bi1ppYx2G126ClYoscrVXAY9kfmF_eqAvH; Path=/; HttpOnly; SameSite=Strict"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 14:47:04 GMT"
								},
								{
									"key": "Content-Length",
									"value": "64"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"0d499927-9042-4791-abd7-ea8886f18ded\",\n    \"name\": \"John Doe\"\n}"
						}
					]
				},
				{
					"name": "Sign-in with Google",
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/login/google",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login",
								"google"
							],
							"query": [
								{
									"key": "state",
									"value": "",
									"description": "URL to redirect to on successful authentication",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in with GitHub",
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/login/microsoft",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login",
								"microsoft"
							],
							"query": [
								{
									"key": "state",
									"value": "",
									"description": "URL to redirect to on successful authentication",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in with Microsoft",
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/login/github",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login",
								"github"
							],
							"query": [
								{
									"key": "state",
									"value": "",
									"description": "URL to redirect to on successful authentication",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in with Apple",
					"protocolProfileBehavior": {
						"followRedirects": false
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/login/apple",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"login",
								"apple"
							],
							"query": [
								{
									"key": "state",
									"value": "",
									"description": "URL to redirect to on successful authentication",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "These resources can be used to sign-in into the application.\n\nThe login's with third party providers will automatically sign-in the user, sync the user profile (e.g. the name or avatar URL) and redirect back to the URL specified by the `state` query parameter. Do not worry about CSRF vulnerabilities here, since we'll enrich your URL with a randomly generated nonce.",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check id is included\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Check name is included and trimmed\", function () {\r",
									"    var name = pm.response.json().name;\r",
									"    pm.expect(name).to.exist;\r",
									"    pm.expect(name).not.to.satisfy(s => s.startsWith(\" \"));\r",
									"    pm.expect(name).not.to.satisfy(s => s.endsWith(\" \"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Jane Doe\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						},
						"description": "**Request body scheme**\n\n``` json\n{\n  // the new display name of the user\n  \"name\": \"Jane Doe\" \n}\n\n```"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Jane Doe\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 20:09:59 GMT"
								},
								{
									"key": "Content-Length",
									"value": "64"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"34fc390b-8abe-458b-8a1e-9a918dec4b48\",\n    \"name\": \"Jane Doe\"\n}"
						}
					]
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check id is included\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Check name is included\", function () {\r",
									"    var name = pm.response.json().name;\r",
									"    pm.expect(name).to.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/user",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user"
							]
						},
						"description": "Returns the currently authenticated user or with status code `404` if no user is associated with the provided bearer token. Use this method to find out which is user is using the web application."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/user",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"user"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 20:10:12 GMT"
								},
								{
									"key": "Content-Length",
									"value": "64"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"34fc390b-8abe-458b-8a1e-9a918dec4b48\",\n    \"name\": \"Jane Doe\"\n}"
						}
					]
				}
			],
			"description": "These resources can update or read user information of the currently authenticated user. Since the `jwt` Cookie, which holds the user session, is set to HTTP only and therefore cannot be read from your web application you can use these methods to check which is user is actively using the application.",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearer_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Boards",
			"item": [
				{
					"name": "Create a new board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"board_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"My board\",\r\n    \"accessPolicy\": \"PUBLIC\",\r\n    \"columns\": [ \r\n        { \"name\": \"Lean coffee\", \"visible\": true, \"color\": \"backlog-blue\" },\r\n        { \"name\": \"Actions\", \"visible\": false, \"color\": \"planning-pink\" }\r\n    ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards"
							]
						},
						"description": "Create a new board with an initial set of columns. A board session for the calling user will automatically be created on creation of a board.\n\nThe access policy can be set to\n\n*   `PUBLIC` if the board should be accessible to everyone by the URL only\n*   `BY_PASSPHRASE` if the board should be protected by a passphrase and a challenge before someone is able to join and create a session. If this policy is selected a `passphrase` must be sent as part of the request\n*   `BY_INVITE` if the moderators want to manually verify each join request\n    \n\nCurrently following color are available for the column accent color:\n\n*   `backlog-blue`\n*   `grooming-green`\n*   `lean-lilac`\n*   `online-orange`\n*   `planning-pink`\n*   `poker-purple`\n*   `retro-red`\n    \n\n**Request body scheme**\n\n``` json\n{\n  // (optional) board name\n  \"name\": \"Awesome collaborative session\",\n  // the access policy of the board\n  \"accessPolicy\": \"BY_PASSPHRASE\",\n  // (optional) passphrase if the access policy is set as 'BY_PASSPHRASE'\n  \"passphrase\": \"***\"\n  // (optional) array of columns that should be set up initially.\n  // The index of the respective columns will be defined by the array position\n  \"columns\": [\n    {\n      // the name of the column\n      \"name\": \"My column name\",\n      // the visibility state of the column\n      \"visible\": true,\n      // the color of the column\n      \"color\": \"backlog-blue\"\n    }\n  ]\n}\n\n```\n\n**Response body scheme**\n\n``` json\n{\n  // the uuid (v4) of the created board   \n  \"id\": \"a4c93f30-a5ce-4d15-aa5a-92a0ae0831f1\",\n  // (optional) name of the baord  \n  \"name\": \"My board\",\n  // the access policy of the board\n  \"accessPolicy\": \"PUBLIC\",\n  // flag indicating whether the authors of notes are visible to others\n  \"showAuthors\": true,\n  // flag indicating whether the notes are visible between each other\n  \"showNotesOfOtherUsers\": true,\n  // flag indicating whether everyone or only moderators allowed to stack cards\n  \"allowStacking\": true,\n  // (optional) uuid (v4) of a note which is highlighted to everyone  \n  \"sharedNote\": null,\n  // (optional) uuid (v4) of the voting session which results are displayed to everyone\n  \"showVoting\": null\n}\n\n```"
					},
					"response": [
						{
							"name": "Success PUBLIC",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"My board\",\r\n    \"accessPolicy\": \"PUBLIC\",\r\n    \"columns\": [ \r\n        { \"name\": \"Lean coffee\", \"visible\": true, \"color\": \"backlog-blue\" },\r\n        { \"name\": \"Actions\", \"visible\": false, \"color\": \"planning-pink\" }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "/boards/a4c93f30-a5ce-4d15-aa5a-92a0ae0831f1"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 16:33:37 GMT"
								},
								{
									"key": "Content-Length",
									"value": "193"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"a4c93f30-a5ce-4d15-aa5a-92a0ae0831f1\",\n    \"name\": \"My board\",\n    \"accessPolicy\": \"PUBLIC\",\n    \"showAuthors\": true,\n    \"showNotesOfOtherUsers\": true,\n    \"allowStacking\": true,\n    \"sharedNote\": null,\n    \"showVoting\": null\n}"
						},
						{
							"name": "Success BY_PASSPHRASE",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"My board\",\r\n    \"accessPolicy\": \"BY_PASSPHRASE\",\r\n    \"passphrase\": \"topsecret\",\r\n    \"columns\": [ \r\n        { \"name\": \"Lean coffee\", \"visible\": true, \"color\": \"backlog-blue\" },\r\n        { \"name\": \"Actions\", \"visible\": false, \"color\": \"planning-pink\" }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "/boards/57523db5-39e0-4f9a-9557-9b6fb5330fa3"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 16:36:31 GMT"
								},
								{
									"key": "Content-Length",
									"value": "200"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"57523db5-39e0-4f9a-9557-9b6fb5330fa3\",\n    \"name\": \"My board\",\n    \"accessPolicy\": \"BY_PASSPHRASE\",\n    \"showAuthors\": true,\n    \"showNotesOfOtherUsers\": true,\n    \"allowStacking\": true,\n    \"sharedNote\": null,\n    \"showVoting\": null\n}"
						},
						{
							"name": "Sucess BY_INVITE",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"My board\",\r\n    \"accessPolicy\": \"BY_INVITE\",\r\n    \"columns\": [ \r\n        { \"name\": \"Lean coffee\", \"visible\": true, \"color\": \"backlog-blue\" },\r\n        { \"name\": \"Actions\", \"visible\": false, \"color\": \"planning-pink\" }\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "/boards/2f1fd73e-8f0a-44d7-9aa9-e61e2df2732f"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 16:36:52 GMT"
								},
								{
									"key": "Content-Length",
									"value": "196"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"2f1fd73e-8f0a-44d7-9aa9-e61e2df2732f\",\n    \"name\": \"My board\",\n    \"accessPolicy\": \"BY_INVITE\",\n    \"showAuthors\": true,\n    \"showNotesOfOtherUsers\": true,\n    \"allowStacking\": true,\n    \"sharedNote\": null,\n    \"showVoting\": null\n}"
						}
					]
				},
				{
					"name": "Update name of a board",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Update to new name\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}"
							]
						},
						"description": "All attributes of the board may be updated partially. Checkout the board body response scheme to see a list of all available attributes that you can also override.\n\n  \nHere's an example how you can update the board name."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Update to new name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards/{board}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 17:02:03 GMT"
								},
								{
									"key": "Content-Length",
									"value": "203"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"4051a56d-71c4-4d82-baff-d1b36f2925cb\",\n    \"name\": \"Update to new name\",\n    \"accessPolicy\": \"PUBLIC\",\n    \"showAuthors\": true,\n    \"showNotesOfOtherUsers\": true,\n    \"allowStacking\": true,\n    \"sharedNote\": null,\n    \"showVoting\": null\n}"
						}
					]
				},
				{
					"name": "Update access policy of board",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"accessPolicy\": \"BY_PASSPHRASE\",\r\n    \"passphrase\": \"supersecret\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}"
							]
						},
						"description": "You can switch the access policy from `PUBLIC` to `BY_PASSPHRASE` and vice versa. Beware that you can't change the access policy `BY_INVITE`, since all data is meant to be encrypted for this mode."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"accessPolicy\": \"BY_PASSPHRASE\",\r\n    \"passphrase\": \"supersecret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards/{board}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 16:44:52 GMT"
								},
								{
									"key": "Content-Length",
									"value": "182"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"2be6697e-ec73-4165-ad25-dab12de2a30b\",\n    \"accessPolicy\": \"BY_PASSPHRASE\",\n    \"showAuthors\": true,\n    \"showNotesOfOtherUsers\": true,\n    \"allowStacking\": true,\n    \"sharedNote\": null,\n    \"showVoting\": null\n}"
						}
					]
				},
				{
					"name": "Get a board",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}"
							]
						},
						"description": "Here you'll get the data of a board specified by the id of the URL.\n\n## Receiving realtime updates\n\nThis resource can also be upgraded for a websocket connection in order to receive realtime updates of changed data (e.g. added notes, started voting sessions etc.). You'll find the specification of the exchanged messages in a separate chapter here."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/boards/{board}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 16:49:39 GMT"
								},
								{
									"key": "Content-Length",
									"value": "182"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"2be6697e-ec73-4165-ad25-dab12de2a30b\",\n    \"accessPolicy\": \"BY_PASSPHRASE\",\n    \"showAuthors\": true,\n    \"showNotesOfOtherUsers\": true,\n    \"allowStacking\": true,\n    \"sharedNote\": null,\n    \"showVoting\": null\n}"
						}
					]
				},
				{
					"name": "Delete board",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}"
							]
						},
						"description": "Deleting a board will just return status `204` and all related resources will be deleted as well (... except for the users cause that seems cruel)."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/boards/{board}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 16:50:23 GMT"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Export board",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "text/csv",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/export",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"export"
							]
						},
						"description": "Export the complete board data. The `Content-Type` of the response will be either `application/json` if the request was send with `Accept: */*` or explicitly json or `text/csv` if it was specified."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/boards/{board}/export",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}",
										"export"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 23 Jan 2022 14:42:09 GMT"
								},
								{
									"key": "Content-Length",
									"value": "1030"
								}
							],
							"cookie": [],
							"body": "{\n    \"board\": {\n        \"id\": \"85ec5a10-9788-4df2-9647-0c7260cb07f7\",\n        \"name\": \"My board\",\n        \"accessPolicy\": \"PUBLIC\",\n        \"showAuthors\": true,\n        \"showNotesOfOtherUsers\": true,\n        \"allowStacking\": true,\n        \"sharedNote\": null,\n        \"showVoting\": \"71c8556d-5148-41dd-ad50-f96930af2f83\"\n    },\n    \"participants\": [\n        {\n            \"user\": {\n                \"id\": \"0d57fafe-76a4-4ae2-b643-a81af68fe487\",\n                \"name\": \"John Doe\"\n            },\n            \"connected\": false,\n            \"ready\": false,\n            \"raisedHand\": false,\n            \"role\": \"OWNER\"\n        }\n    ],\n    \"columns\": [\n        {\n            \"id\": \"851f600a-77f8-489a-a25b-4e3f8f9a25c3\",\n            \"name\": \"Lean coffee\",\n            \"color\": \"backlog-blue\",\n            \"visible\": true,\n            \"index\": 0\n        },\n        {\n            \"id\": \"b1391083-c333-4963-b6f1-af0b66e6826a\",\n            \"name\": \"My new column\",\n            \"color\": \"online-orange\",\n            \"visible\": false,\n            \"index\": 1\n        },\n        {\n            \"id\": \"4ebae212-80c9-46e4-abd9-e56b320ce937\",\n            \"name\": \"Actions\",\n            \"color\": \"planning-pink\",\n            \"visible\": false,\n            \"index\": 2\n        }\n    ],\n    \"notes\": [\n        {\n            \"id\": \"fdbc5abe-01f1-4a7d-b41d-06cb9915c608\",\n            \"author\": \"0d57fafe-76a4-4ae2-b643-a81af68fe487\",\n            \"text\": \"Just a note\",\n            \"position\": {\n                \"column\": \"b1391083-c333-4963-b6f1-af0b66e6826a\",\n                \"stack\": null,\n                \"rank\": 0\n            }\n        }\n    ],\n    \"votings\": [\n        {\n            \"id\": \"71c8556d-5148-41dd-ad50-f96930af2f83\",\n            \"voteLimit\": 5,\n            \"allowMultipleVotes\": true,\n            \"showVotesOfOthers\": true,\n            \"status\": \"CLOSED\"\n        }\n    ]\n}"
						},
						{
							"name": "Success (CSV)",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "text/csv",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/export",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"export"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "Date",
									"value": "Sun, 23 Jan 2022 15:13:41 GMT"
								},
								{
									"key": "Content-Length",
									"value": "380"
								},
								{
									"key": "Content-Type",
									"value": "text/plain; charset=utf-8"
								}
							],
							"cookie": [],
							"body": "note_id,author_id,author,text,column_id,column,rank,stack,voting_0\n74b1905f-4d01-462f-a149-9f0ea76f9ccd,0d57fafe-76a4-4ae2-b643-a81af68fe487,John Doe,\"Just a, note\",b1391083-c333-4963-b6f1-af0b66e6826a,My new column,1,null,0\nfdbc5abe-01f1-4a7d-b41d-06cb9915c608,0d57fafe-76a4-4ae2-b643-a81af68fe487,John Doe,Just a note,b1391083-c333-4963-b6f1-af0b66e6826a,My new column,0,null,0\n"
						}
					]
				},
				{
					"name": "Start a 5 minute timer",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"minutes\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/timer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"timer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Stop timer",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/timer",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"timer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Increment timer by 1 minute",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/timer/increment",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"timer",
								"increment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Board Request",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sharedNote\":null,\n    \"showVoting\":null,\n    \"timerStart\":\"2024-01-18T13:38:49.304Z\",\n    \"timerEnd\":\"2024-01-18T13:39:49.304Z\",\n    \"allowEditing\":true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sharedNote\":null,\n    \"showVoting\":null,\n    \"timerStart\":\"2024-01-18T13:38:49.304Z\",\n    \"timerEnd\":\"2024-01-18T13:39:49.304Z\",\n    \"allowEditing\":true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}"
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"{{board_id}}\",\n    \"accessPolicy\": \"PUBLIC\",\n    \"showAuthors\": true,\n    \"showNotesOfOtherUsers\": true,\n    \"showNoteReactions\": true,\n    \"allowStacking\": true,\n    \"allowEditing\": true,\n    \"timerStart\": \"2024-01-18T13:38:49.304Z\",\n    \"timerEnd\": \"2024-01-18T13:39:49.304Z\",\n    \"sharedNote\": null,\n    \"showVoting\": null\n}"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearer_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Columns",
			"item": [
				{
					"name": "Create column",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"column_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"My new column\",\r\n    \"visible\": false,\r\n    \"color\": \"lean-lilac\",\r\n    \"index\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/columns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"columns"
							]
						},
						"description": "Creates a new column at the specified `index` for sorting. If the index is out of the range of the pre-existing columns it will be automatically adjusted.\n\nThe `visible` attribute indicates whether the column should be visible for regular participants of a board.\n\nCurrently following color are available as the column accent color:\n\n*   `backlog-blue`\n*   `grooming-green`\n*   `lean-lilac`\n*   `online-orange`\n*   `planning-pink`\n*   `poker-purple`\n*   `retro-red`"
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"My new column\",\r\n    \"visible\": false,\r\n    \"color\": \"lean-lilac\",\r\n    \"index\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards/{board}/columns",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}",
										"columns"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "/boards/4051a56d-71c4-4d82-baff-d1b36f2925cb/columns/fecb346a-9d9e-43ca-b873-8fcb09f2b0c3"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 17:05:54 GMT"
								},
								{
									"key": "Content-Length",
									"value": "95"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"fecb346a-9d9e-43ca-b873-8fcb09f2b0c3\",\n    \"name\": \"My new column\",\n    \"color\": \"lean-lilac\",\n    \"visible\": false,\n    \"index\": 1\n}"
						}
					]
				},
				{
					"name": "Get columns",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/columns",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"columns"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/boards/{board}/columns",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}",
										"columns"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 17:08:51 GMT"
								},
								{
									"key": "Content-Length",
									"value": "278"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"526d5efb-281d-4f4f-b308-6537e6727381\",\n        \"name\": \"Lean coffee\",\n        \"color\": \"backlog-blue\",\n        \"visible\": true,\n        \"index\": 0\n    },\n    {\n        \"id\": \"fecb346a-9d9e-43ca-b873-8fcb09f2b0c3\",\n        \"name\": \"My new column\",\n        \"color\": \"lean-lilac\",\n        \"visible\": false,\n        \"index\": 1\n    },\n    {\n        \"id\": \"70cb04ee-b46e-4176-940c-cdf06cadef07\",\n        \"name\": \"Actions\",\n        \"color\": \"planning-pink\",\n        \"visible\": false,\n        \"index\": 2\n    }\n]"
						}
					]
				},
				{
					"name": "Get column",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/columns/{{column_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"columns",
								"{{column_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/boards/{board}/columns/{column}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}",
										"columns",
										"{column}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 17:09:02 GMT"
								},
								{
									"key": "Content-Length",
									"value": "95"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"fecb346a-9d9e-43ca-b873-8fcb09f2b0c3\",\n    \"name\": \"My new column\",\n    \"color\": \"lean-lilac\",\n    \"visible\": false,\n    \"index\": 1\n}"
						}
					]
				},
				{
					"name": "Update a column",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Updated column name\",\r\n    \"color\": \"online-orange\",\r\n    \"visible\": true,\r\n    \"index\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/columns/{{column_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"columns",
								"{{column_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Updated column name\",\r\n    \"color\": \"online-orange\",\r\n    \"visible\": true,\r\n    \"index\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards/{board}/columns/{column}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}",
										"columns",
										"{column}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 17:09:15 GMT"
								},
								{
									"key": "Content-Length",
									"value": "100"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"fecb346a-9d9e-43ca-b873-8fcb09f2b0c3\",\n    \"name\": \"Updated column name\",\n    \"color\": \"online-orange\",\n    \"visible\": true,\n    \"index\": 0\n}"
						}
					]
				},
				{
					"name": "Delete column",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/columns/{{column_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"columns",
								"{{column_id}}"
							]
						},
						"description": "Deletes the column and all associated resources (e.g. notes). The `index` value of the remaining columns will automatically be adjusted.\n\nIf the column was deleted the status `204` will be returned without any content."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/boards/{board}/columns/{column}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}",
										"columns",
										"{column}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 17:09:26 GMT"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"description": "The columns for a board, sorted in ascending fashion by the `index` value of each column. The index will be automatically updated on every change (e.g. creation of a new column or update of a previous one).",
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearer_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Notes",
			"item": [
				{
					"name": "Create note",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"note_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"column\": \"{{column_id}}\",\r\n    \"text\": \"Just a note\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/notes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"notes"
							]
						},
						"description": "Creates a new note at the highest available `rank`. The rank is meant for sorting purpose and all new notes will be put at the top in descending order. The rank is calculated for notes without a `stack` and for each stack with the same id separately."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"column\": \"{column}\",\r\n    \"text\": \"Just a note\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/boards/{board}/notes",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"boards",
										"{board}",
										"notes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "/boards/7d937278-0232-4293-84d6-b8abab8a71f9/notes/8792bb2b-b51f-415b-85a9-e3673fdca577"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:07:07 GMT"
								},
								{
									"key": "Content-Length",
									"value": "198"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"8792bb2b-b51f-415b-85a9-e3673fdca577\",\n    \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n    \"text\": \"Just a note\",\n    \"position\": {\n        \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n        \"stack\": null,\n        \"rank\": 4\n    }\n}"
						}
					]
				},
				{
					"name": "Get notes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/notes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"notes"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/notes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"notes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:08:49 GMT"
								},
								{
									"key": "Content-Length",
									"value": "992"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"8792bb2b-b51f-415b-85a9-e3673fdca577\",\n        \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n        \"text\": \"Just a note\",\n        \"position\": {\n            \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n            \"stack\": null,\n            \"rank\": 4\n        }\n    },\n    {\n        \"id\": \"9c282cb1-7968-4408-a3f5-20f0984dce6b\",\n        \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n        \"text\": \"Just a note\",\n        \"position\": {\n            \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n            \"stack\": null,\n            \"rank\": 3\n        }\n    },\n    {\n        \"id\": \"90863014-da93-4056-ba8d-286e980757d2\",\n        \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n        \"text\": \"Just a note\",\n        \"position\": {\n            \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n            \"stack\": null,\n            \"rank\": 2\n        }\n    },\n    {\n        \"id\": \"faa89a44-968e-43be-93d7-ea9a8c951076\",\n        \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n        \"text\": \"Just a note\",\n        \"position\": {\n            \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n            \"stack\": null,\n            \"rank\": 1\n        }\n    },\n    {\n        \"id\": \"ce7e4f4b-8ddd-4f98-b8c7-cfed199e26ed\",\n        \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n        \"text\": \"Just a note\",\n        \"position\": {\n            \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n            \"stack\": null,\n            \"rank\": 0\n        }\n    }\n]"
						}
					]
				},
				{
					"name": "Get note",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/notes/{{note_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/notes/{{note_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"notes",
										"{{note_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:09:00 GMT"
								},
								{
									"key": "Content-Length",
									"value": "198"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"8792bb2b-b51f-415b-85a9-e3673fdca577\",\n    \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n    \"text\": \"Just a note\",\n    \"position\": {\n        \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n        \"stack\": null,\n        \"rank\": 4\n    }\n}"
						}
					]
				},
				{
					"name": "Update note text",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\": \"Updated text\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/notes/{{note_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update note position",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"position\": {\r\n        \"column\": \"{{column_id}}\",\r\n        \"rank\": 1996\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/notes/{{note_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"position\": {\r\n        \"column\": \"{{column_id}}\",\r\n        \"rank\": 1996\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/notes/{{note_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"notes",
										"{{note_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:10:27 GMT"
								},
								{
									"key": "Content-Length",
									"value": "198"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"8792bb2b-b51f-415b-85a9-e3673fdca577\",\n    \"author\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n    \"text\": \"Just a note\",\n    \"position\": {\n        \"column\": \"52863204-1c62-44ef-95d8-37db81ffc7ee\",\n        \"stack\": null,\n        \"rank\": 4\n    }\n}"
						}
					]
				},
				{
					"name": "Delete note",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/notes/{{note_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"notes",
								"{{note_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/notes/{{note_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"notes",
										"{{note_id}}"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:10:56 GMT"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearer_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Votings",
			"item": [
				{
					"name": "Create voting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"voting_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"voteLimit\": 5,\r\n    \"allowMultipleVotes\": true,\r\n    \"showVotesOfOthers\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votings"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"voteLimit\": 5,\r\n    \"allowMultipleVotes\": true,\r\n    \"showVotesOfOthers\": false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votings",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votings"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Location",
									"value": "/boards/7d937278-0232-4293-84d6-b8abab8a71f9/votings/6ea90c4c-84df-4647-a6e1-3255299f2717"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:11:45 GMT"
								},
								{
									"key": "Content-Length",
									"value": "128"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"6ea90c4c-84df-4647-a6e1-3255299f2717\",\n    \"voteLimit\": 5,\n    \"allowMultipleVotes\": true,\n    \"showVotesOfOthers\": false,\n    \"status\": \"OPEN\"\n}"
						}
					]
				},
				{
					"name": "Get votings",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votings"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votings",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:14:47 GMT"
								},
								{
									"key": "Content-Length",
									"value": "771"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"3c3b64f1-5132-44c0-880d-82f545067cf3\",\n        \"voteLimit\": 5,\n        \"allowMultipleVotes\": false,\n        \"showVotesOfOthers\": true,\n        \"status\": \"OPEN\"\n    },\n    {\n        \"id\": \"4fb423b1-5cc7-4a52-9643-0408cd25652a\",\n        \"voteLimit\": 5,\n        \"allowMultipleVotes\": true,\n        \"showVotesOfOthers\": true,\n        \"status\": \"CLOSED\",\n        \"votes\": {\n            \"total\": 5,\n            \"votesPerNote\": {\n                \"3ab898f7-01d7-477a-93ef-c023074849f5\": {\n                    \"total\": 5,\n                    \"userVotes\": [\n                        {\n                            \"id\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n                            \"total\": 5\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    {\n        \"id\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n        \"voteLimit\": 5,\n        \"allowMultipleVotes\": true,\n        \"showVotesOfOthers\": false,\n        \"status\": \"CLOSED\",\n        \"votes\": {\n            \"total\": 5,\n            \"votesPerNote\": {\n                \"3ab898f7-01d7-477a-93ef-c023074849f5\": {\n                    \"total\": 5\n                }\n            }\n        }\n    },\n    {\n        \"id\": \"6ea90c4c-84df-4647-a6e1-3255299f2717\",\n        \"voteLimit\": 5,\n        \"allowMultipleVotes\": true,\n        \"showVotesOfOthers\": false,\n        \"status\": \"ABORTED\"\n    }\n]"
						}
					]
				},
				{
					"name": "Get voting",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votings/{{voting_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votings",
								"{{voting_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votings/{{voting_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votings",
										"{{voting_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:15:07 GMT"
								},
								{
									"key": "Content-Length",
									"value": "128"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"3c3b64f1-5132-44c0-880d-82f545067cf3\",\n    \"voteLimit\": 5,\n    \"allowMultipleVotes\": false,\n    \"showVotesOfOthers\": true,\n    \"status\": \"OPEN\"\n}"
						}
					]
				},
				{
					"name": "Close voting",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"CLOSED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votings/{{voting_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votings",
								"{{voting_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"CLOSED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votings/{{voting_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votings",
										"{{voting_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:13:36 GMT"
								},
								{
									"key": "Content-Length",
									"value": "218"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n    \"voteLimit\": 5,\n    \"allowMultipleVotes\": true,\n    \"showVotesOfOthers\": false,\n    \"status\": \"CLOSED\",\n    \"votes\": {\n        \"total\": 5,\n        \"votesPerNote\": {\n            \"3ab898f7-01d7-477a-93ef-c023074849f5\": {\n                \"total\": 5\n            }\n        }\n    }\n}"
						},
						{
							"name": "Success with details",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"CLOSED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votings/{{voting_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votings",
										"{{voting_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:14:04 GMT"
								},
								{
									"key": "Content-Length",
									"value": "287"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"4fb423b1-5cc7-4a52-9643-0408cd25652a\",\n    \"voteLimit\": 5,\n    \"allowMultipleVotes\": true,\n    \"showVotesOfOthers\": true,\n    \"status\": \"CLOSED\",\n    \"votes\": {\n        \"total\": 5,\n        \"votesPerNote\": {\n            \"3ab898f7-01d7-477a-93ef-c023074849f5\": {\n                \"total\": 5,\n                \"userVotes\": [\n                    {\n                        \"id\": \"f62a0cb4-937d-4883-812b-9b5c5dda718a\",\n                        \"total\": 5\n                    }\n                ]\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Abort voting",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"ABORTED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votings/{{voting_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votings",
								"{{voting_id}}"
							]
						},
						"description": "If the state will be set to `ABORTED` all associated votes will be deleted and the voting session, while still listed in all votings, will be no longer available."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"status\": \"ABORTED\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votings/{{voting_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votings",
										"{{voting_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:12:02 GMT"
								},
								{
									"key": "Content-Length",
									"value": "131"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"6ea90c4c-84df-4647-a6e1-3255299f2717\",\n    \"voteLimit\": 5,\n    \"allowMultipleVotes\": true,\n    \"showVotesOfOthers\": false,\n    \"status\": \"ABORTED\"\n}"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearer_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Votes",
			"item": [
				{
					"name": "Add vote",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"note\": \"{{note_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votes"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"note\": \"{{note_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votes"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:13:10 GMT"
								},
								{
									"key": "Content-Length",
									"value": "96"
								}
							],
							"cookie": [],
							"body": "{\n    \"voting\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n    \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n}"
						},
						{
							"name": "Error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"note\": \"{{note_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votes"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:13:23 GMT"
								},
								{
									"key": "Content-Length",
									"value": "89"
								}
							],
							"cookie": [],
							"body": "{\n    \"status\": \"Forbidden.\",\n    \"error\": \"voting limit reached or no active voting session found\"\n}"
						}
					]
				},
				{
					"name": "Remove vote",
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"note\": \"{{note_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votes"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"note\": \"{{note_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votes"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:18:38 GMT"
								}
							],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Get votes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/votes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"votes"
							]
						},
						"description": "Returns all votes for the currently authenticated user."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/votes",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"votes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 18:18:49 GMT"
								},
								{
									"key": "Content-Length",
									"value": "962"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"voting\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"fa7fd5b4-4e3f-43c8-951b-48a692f97e23\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"4fb423b1-5cc7-4a52-9643-0408cd25652a\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"4fb423b1-5cc7-4a52-9643-0408cd25652a\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"4fb423b1-5cc7-4a52-9643-0408cd25652a\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"4fb423b1-5cc7-4a52-9643-0408cd25652a\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    },\n    {\n        \"voting\": \"4fb423b1-5cc7-4a52-9643-0408cd25652a\",\n        \"note\": \"3ab898f7-01d7-477a-93ef-c023074849f5\"\n    }\n]"
						}
					]
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearer_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Participants",
			"item": [
				{
					"name": "Get board participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"owner_id\", jsonData[0].user.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/participants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get board participants filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"owner_id\", jsonData[0].user.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/participants?role=OWNER&connected=false&raisedHand=true&ready=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"participants"
							],
							"query": [
								{
									"key": "role",
									"value": "OWNER",
									"description": "role of participants to filter, can be one of `PARTCIPANT`, `MODERATOR` or `OWNER`"
								},
								{
									"key": "connected",
									"value": "false",
									"description": "connected state of the participants, where `true` means the users are online and active"
								},
								{
									"key": "raisedHand",
									"value": "true",
									"description": "raised hand state of the participants to filter"
								},
								{
									"key": "ready",
									"value": "true",
									"description": "ready state of the participants to filter"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get board participant",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/participants/{{owner_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"participants",
								"{{owner_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update board participant",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ready\": true,\r\n    \"raisedHand\": true,\r\n    \"banned\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/participants/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"participants",
								"{{user_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ready\": true,\r\n    \"raisedHand\": true,\r\n    \"banned\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/participants/{{user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"participants",
										"{{user_id}}"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": "{\n    \"user\": {\n        \"id\": \"{{user_id}}\",\n        \"name: \"\"\n    },\n    \"ready\": true,\n    \"raisedHand\": true,\n    \"banned\": true\n}"
						}
					]
				},
				{
					"name": "Update board participants",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"ready\": false,\r\n    \"raisedHand\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/participants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"participants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Join Board",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/participants",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"participants"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{bearer_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Realtime",
			"item": [],
			"description": "There are two types of realtime socket connections you can establish.\n\n*   **GET /boards/{board}:** Receive updates on all changes related to a specific board\n*   **GET /boards/{board}/requests/{user}:** Get updates on status changes for a `PENDING` board session request\n    \n\n## Receiving board updates\n\nIf you have a valid board session you can subscribe to realtime updates for all changes. The message you'll receive will all have a type and the associated data to the type.\n\n``` json\n{\n  // the message type\n  \"type\": \"INIT\"\n  // the data associated with the specified type\n  \"data\": {\n    // ...\n  }\n}\n\n```\n\nThere are several event types you'll receive upon subscription.\n\n| **type** | **description** |\n| --- | --- |\n| **INIT** | This event will be called once the connection is established and basically includes all data associated with the board. |\n| **BOARD_UPDATED** | You'll receive this message once some board configuration is changed. The data has the same format as the scheme defined in the board response. |\n| **BOARD_DELETED** | You'll receive this message if a board was deleted. The connection will be closed by the server automatically afterwards. |\n| **COLUMNS_UPDATED** | This event will send an array of all columns and will be triggered if any column configuration changes. |\n| **NOTES_UPDATED** | Once a note is created or a note is changed (e.g. the text, the rank or the stack etc.) you'll receive an array of all notes. |\n| **REQUEST_CREATED** | Fired when someone wants to gain access to a board. |\n| **REQUEST_UPDATED** | If a join request was accepted or rejected this event will be fired. |\n| **PARTICIPANT_CREATED** | This event will include a new participant of a board. |\n| **PARTICIPANT_UPDATED** | If a participant changes the `ready` state or goes on or offline (the `connected` attribute changes) this event will be fired. |\n| **PARTICIPANTS_UPDATED** | Since moderators can change settings of all participants at once (e.g. the `ready` state) this message will include an array of all participants with their latest settings. |\n| **VOTING_CREATED** | Fired once a new voting iteration is created. The data includes the voting settings. |\n| **VOTING_UPDATED** | Fired once a voting iteration is closed or aborted. In the first case the data will also include the voting results according to the settings of the voting. |",
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Miscellaneous",
			"item": [
				{
					"name": "Health state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check the health state of the application and whether the connections to the database and the realtime server are stable.  \n  \nThe resource will return the status `204` on success and `503` on errors."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"health"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 15:58:00 GMT"
								}
							],
							"cookie": [],
							"body": ""
						},
						{
							"name": "Error",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/health",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"health"
									]
								}
							},
							"status": "Service Unavailable",
							"code": 503,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Date",
									"value": "Sun, 16 Jan 2022 15:58:17 GMT"
								},
								{
									"key": "Content-Length",
									"value": "5"
								}
							],
							"cookie": [],
							"body": "null"
						}
					]
				}
			]
		},
		{
			"name": "Reactions",
			"item": [
				{
					"name": "Get reactions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/reactions/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"reactions",
								""
							]
						}
					},
					"response": [
						{
							"name": "Get reactions",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/reactions/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"reactions",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Jul 2023 15:52:53 GMT"
								},
								{
									"key": "Content-Length",
									"value": "323"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": \"58562099-099e-4436-ac4b-bfbde912c042\",\n        \"note\": \"69711746-baf2-42f5-bcaa-ce1bdcf45d75\",\n        \"user\": \"29358bed-2933-46c9-8fd3-6597d500493c\",\n        \"reactionType\": \"heart\"\n    },\n    {\n        \"id\": \"34dd8e86-42dc-46ad-8ee4-f0d301839ae4\",\n        \"note\": \"69711746-baf2-42f5-bcaa-ce1bdcf45d75\",\n        \"user\": \"29358bed-2933-46c9-8fd3-6597d500493c\",\n        \"reactionType\": \"like\"\n    }\n]"
						}
					]
				},
				{
					"name": "Create reaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"reaction_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"note\": \"{{note_id}}\",\n    \"reactionType\": \"like\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/reactions/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"reactions",
								""
							]
						}
					},
					"response": [
						{
							"name": "Create reaction",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"note\": \"{{note_id}}\",\n    \"reactionType\": \"like\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/reactions/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"reactions",
										""
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Jul 2023 16:09:42 GMT"
								},
								{
									"key": "Content-Length",
									"value": "160"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"f1a90e1d-d8b4-44b6-8b4f-c784ec191902\",\n    \"note\": \"34132d00-adf8-4dfa-8cfe-b00bc8a75ab1\",\n    \"user\": \"5828fb99-53ed-4224-87a7-3151a4c39ef6\",\n    \"reactionType\": \"like\"\n}"
						}
					]
				},
				{
					"name": "Get reaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"reaction_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/reactions/{{reaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"reactions",
								"{{reaction_id}}"
							]
						}
					},
					"response": [
						{
							"name": "Get reaction",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/boards/{{board_id}}/reactions/{{reaction_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"boards",
										"{{board_id}}",
										"reactions",
										"{{reaction_id}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Date",
									"value": "Thu, 13 Jul 2023 16:09:56 GMT"
								},
								{
									"key": "Content-Length",
									"value": "160"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"f1a90e1d-d8b4-44b6-8b4f-c784ec191902\",\n    \"note\": \"34132d00-adf8-4dfa-8cfe-b00bc8a75ab1\",\n    \"user\": \"5828fb99-53ed-4224-87a7-3151a4c39ef6\",\n    \"reactionType\": \"like\"\n}"
						}
					]
				},
				{
					"name": "Update reaction",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"reactionType\": \"laughing\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/reactions/{{reaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"reactions",
								"{{reaction_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete reaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/boards/{{board_id}}/reactions/{{reaction_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"boards",
								"{{board_id}}",
								"reactions",
								"{{reaction_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "bearer_token",
			"value": "{jwt}"
		},
		{
			"key": "board_id",
			"value": "{board}"
		},
		{
			"key": "column_id",
			"value": "{column}"
		},
		{
			"key": "owner_id",
			"value": "{user}"
		},
		{
			"key": "voting_id",
			"value": "{voting}"
		},
		{
			"key": "user_id",
			"value": "{user}"
		},
		{
			"key": "note_id",
			"value": "{note}"
		},
		{
			"key": "reaction_id",
			"value": "{reaction}"
		}
	]
}