---
# Source: scrumlr/charts/mongodb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scrumlr-database
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.23.13
    app.kubernetes.io/instance: scrumlr
    app.kubernetes.io/managed-by: Helm
secrets:
  - name: scrumlr-database
---
# Source: scrumlr/templates/dashboard/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: scrumlr-dashboard
  labels:
      app.kubernetes.io/name: scrumlr-dashboard
      app.kubernetes.io/components: dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
data:
  DASHBOARD_DEFAULT_PASSWORD: JDJhJDEyJFFKcjZGUG1LU2hLNTFGekt3RkJnMnVabEpCV3IuOEpULkRwT1RCOXlIT3N1c2VPREY0amU2
  MASTER_KEY: bWFzdGVyS2V5
---
# Source: scrumlr/templates/livequery/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: scrumlr-livequery
  labels:
      app.kubernetes.io/name: scrumlr-livequery
      app.kubernetes.io/components: livequery
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
data:
  SCRUMLR_API_MASTER_KEY: bWFzdGVyS2V5
---
# Source: scrumlr/templates/server/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: scrumlr-server
  labels:
      app.kubernetes.io/name: scrumlr-server
      app.kubernetes.io/components: server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
data:
  SCRUMLR_API_MASTER_KEY: bWFzdGVyS2V5
---
# Source: scrumlr/templates/dashboard/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: scrumlr-dashboard
  labels:
      app.kubernetes.io/name: scrumlr-dashboard
      app.kubernetes.io/components: dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
data:
  APP_ID: Scrumlr
  APP_NAME: Scrumlr
  DASHBOARD_DEFAULT_USER: scrumlr
  SERVER_URL: http://localhost/api
---
# Source: scrumlr/templates/livequery/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: scrumlr-livequery
  labels:
      app.kubernetes.io/name: scrumlr-livequery
      app.kubernetes.io/components: livequery
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
data:
  SCRUMLR_API_HOST: scrumlr-server
  SCRUMLR_API_PORT: "4000"
  SCRUMLR_CACHE_URL: redis://scrumlr-cache:6379
  SCRUMLR_DATABASE_URI: mongodb://scrumlr-database:27017/dev
  SCRUMLR_OPERATION_MODE: livequery
  SCRUMLR_SERVE_PRODUCTION_WEBAPP: "false"
---
# Source: scrumlr/templates/server/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: scrumlr-server
  labels:
      app.kubernetes.io/name: scrumlr-server
      app.kubernetes.io/components: server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
data:
  SCRUMLR_API_HOST: localhost
  SCRUMLR_API_PORT: "4000"
  SCRUMLR_CACHE_URL: redis://scrumlr-cache:6379
  SCRUMLR_DATABASE_URI: mongodb://scrumlr-database:27017/dev
  SCRUMLR_OPERATION_MODE: server
  SCRUMLR_SERVE_PRODUCTION_WEBAPP: "false"
---
# Source: scrumlr/charts/mongodb/templates/standalone/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: scrumlr-database
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.23.13
    app.kubernetes.io/instance: scrumlr
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "8Gi"
---
# Source: scrumlr/charts/mongodb/templates/standalone/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: scrumlr-database
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.23.13
    app.kubernetes.io/instance: scrumlr
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
spec:
  type: ClusterIP
  ports:
    - name: mongodb
      port: 27017
      targetPort: mongodb
      nodePort: null
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: scrumlr
    app.kubernetes.io/component: mongodb
---
# Source: scrumlr/templates/cache/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: scrumlr-cache
  labels:
      app.kubernetes.io/name: scrumlr-cache
      app.kubernetes.io/components: cache
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  ports:
    - port: 6379
      targetPort: 6379
      protocol: TCP
  selector:
      app.kubernetes.io/name: scrumlr-cache
      app.kubernetes.io/components: cache
---
# Source: scrumlr/templates/dashboard/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: scrumlr-dashboard
  labels:
      app.kubernetes.io/name: scrumlr-dashboard
      app.kubernetes.io/components: dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  ports:
    - port: 4040
      targetPort: 4040
      protocol: TCP
  selector:
      app.kubernetes.io/name: scrumlr-dashboard
      app.kubernetes.io/components: dashboard
---
# Source: scrumlr/templates/frontend/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: scrumlr-frontend
  labels:
      app.kubernetes.io/name: scrumlr-frontend
      app.kubernetes.io/components: frontend
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  selector:
      app.kubernetes.io/name: scrumlr-frontend
      app.kubernetes.io/components: frontend
---
# Source: scrumlr/templates/livequery/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: scrumlr-livequery
  labels:
      app.kubernetes.io/name: scrumlr-livequery
      app.kubernetes.io/components: livequery
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  ports:
    - port: 4000
      targetPort: 4000
      protocol: TCP
  selector:
      app.kubernetes.io/name: scrumlr-livequery
      app.kubernetes.io/components: livequery
---
# Source: scrumlr/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: scrumlr-server
  labels:
      app.kubernetes.io/name: scrumlr-server
      app.kubernetes.io/components: server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  ports:
    - port: 4000
      targetPort: 4000
      protocol: TCP
  selector:
      app.kubernetes.io/name: scrumlr-server
      app.kubernetes.io/components: server
---
# Source: scrumlr/charts/mongodb/templates/standalone/dep-sts.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scrumlr-database
  namespace: default
  labels:
    app.kubernetes.io/name: mongodb
    helm.sh/chart: mongodb-10.23.13
    app.kubernetes.io/instance: scrumlr
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: mongodb
    app.kubernetes.io/components: database
    app.kubernetes.io/name: scrumlr-database
    app.kubernetes.io/part-of: scrumlr
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/instance: scrumlr
      app.kubernetes.io/component: mongodb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mongodb
        helm.sh/chart: mongodb-10.23.13
        app.kubernetes.io/instance: scrumlr
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: mongodb
    spec:
      
      serviceAccountName: scrumlr-database
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: mongodb
                    app.kubernetes.io/instance: scrumlr
                    app.kubernetes.io/component: mongodb
                namespaces:
                  - "default"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        sysctls: []
      containers:
        - name: mongodb
          image: docker.io/bitnami/mongodb:4.4.8-debian-10-r24
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MONGODB_SYSTEM_LOG_VERBOSITY
              value: "0"
            - name: MONGODB_DISABLE_SYSTEM_LOG
              value: "no"
            - name: MONGODB_DISABLE_JAVASCRIPT
              value: "no"
            - name: MONGODB_ENABLE_JOURNAL
              value: "yes"
            - name: MONGODB_ENABLE_IPV6
              value: "no"
            - name: MONGODB_ENABLE_DIRECTORY_PER_DB
              value: "no"
          ports:
            - name: mongodb
              containerPort: 27017
          livenessProbe:
            exec:
              command:
                - mongo
                - --disableImplicitSessions
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  # Run the proper check depending on the version
                  [[ $(mongo --version | grep "MongoDB shell") =~ ([0-9]+\.[0-9]+\.[0-9]+) ]] && VERSION=${BASH_REMATCH[1]}
                  . /opt/bitnami/scripts/libversion.sh
                  VERSION_MAJOR="$(get_sematic_version "$VERSION" 1)"
                  VERSION_MINOR="$(get_sematic_version "$VERSION" 2)"
                  VERSION_PATCH="$(get_sematic_version "$VERSION" 3)"
                  if [[ "$VERSION_MAJOR" -ge 4 ]] && [[ "$VERSION_MINOR" -ge 4 ]] && [[ "$VERSION_PATCH" -ge 2 ]]; then
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.hello().isWritablePrimary || db.hello().secondary' | grep -q 'true'
                  else
                      mongo --disableImplicitSessions $TLS_OPTIONS --eval 'db.isMaster().ismaster || db.isMaster().secondary' | grep -q 'true'
                  fi
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
              subPath: 
      volumes:
        - name: datadir
          persistentVolumeClaim:
            claimName: scrumlr-database
---
# Source: scrumlr/templates/cache/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scrumlr-cache
  labels:
      app.kubernetes.io/name: scrumlr-cache
      app.kubernetes.io/components: cache
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: scrumlr-cache
      app.kubernetes.io/components: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scrumlr-cache
        app.kubernetes.io/components: cache
    spec:
      containers:
        - name: scrumlr-cache 
          image: redis:6.2.4-alpine
          imagePullPolicy: IfNotPresent
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 10
            periodSeconds: 20
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping
            initialDelaySeconds: 5
            periodSeconds: 10
      restartPolicy: Always
---
# Source: scrumlr/templates/dashboard/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scrumlr-dashboard
  labels:
      app.kubernetes.io/name: scrumlr-dashboard
      app.kubernetes.io/components: dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: scrumlr-dashboard
      app.kubernetes.io/components: dashboard
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scrumlr-dashboard
        app.kubernetes.io/components: dashboard
    spec:
      containers:
        - name: scrumlr-dashboard
          image: scrumlr-dashboard
          imagePullPolicy: IfNotPresent
          ports:
            - name: dashboard
              containerPort: 4040
          envFrom:
            - configMapRef:
                name: scrumlr-dashboard
            - secretRef:
                name: scrumlr-dashboard
          livenessProbe:
            httpGet:
              path: /dashboard
              port: 4040
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
      restartPolicy: Always
---
# Source: scrumlr/templates/frontend/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scrumlr-frontend
  labels:
      app.kubernetes.io/name: scrumlr-frontend
      app.kubernetes.io/components: frontend
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
        app.kubernetes.io/name: scrumlr-frontend
        app.kubernetes.io/components: frontend
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scrumlr-frontend
        app.kubernetes.io/components: frontend    
    spec:
      containers:
        - name: scrumlr-frontend
          image: scrumlr-frontend
          imagePullPolicy: IfNotPresent
          ports:
            - name: frontendport
              containerPort: 80
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 3
      restartPolicy: Always
---
# Source: scrumlr/templates/livequery/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scrumlr-livequery
  labels:
      app.kubernetes.io/name: scrumlr-livequery
      app.kubernetes.io/components: livequery
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: scrumlr-livequery
      app.kubernetes.io/components: livequery
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scrumlr-livequery
        app.kubernetes.io/components: livequery  
    spec:
      containers:
        - name: scrumlr-livequery
          image: scrumlr-parse
          imagePullPolicy:  Never
          envFrom:
            - configMapRef: 
                name: scrumlr-livequery
            - secretRef:
                name: scrumlr-livequery
          ports:
            - name: livequeryport
              containerPort: 4000
          livenessProbe:
            initialDelaySeconds: 10
            periodSeconds: 20
            tcpSocket:
              port: livequeryport
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            tcpSocket:
              port: livequeryport
      restartPolicy:  Always
---
# Source: scrumlr/templates/server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scrumlr-server
  labels:
      app.kubernetes.io/name: scrumlr-server
      app.kubernetes.io/components: server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: scrumlr-server
      app.kubernetes.io/components: server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: scrumlr-server
        app.kubernetes.io/components: server
    spec:
      containers:
        - name: scrumlr-server
          image: scrumlr-parse
          imagePullPolicy:  Never
          ports:
            - name: serverport
              containerPort: 4000
          envFrom:
            - configMapRef:
                name: scrumlr-server
            - secretRef:
                name: scrumlr-server
          livenessProbe:
            httpGet:
              path: /api/health
              port: 4000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              httpHeaders:
              - name: X-Parse-Application-Id
                value: Scrumlr
              path: /api/users
              port: 4000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 5
      restartPolicy:  Always
---
# Source: scrumlr/templates/dashboard/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scrumlr-dashboard
  labels:
      app.kubernetes.io/name: scrumlr-dashboard
      app.kubernetes.io/components: dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - http:
      paths:
      - path: /dashboard
        pathType: Prefix
        backend:
          service:
            name: scrumlr-dashboard
            port:
              number: 4040
---
# Source: scrumlr/templates/frontend/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scrumlr-frontend
  labels:
      app.kubernetes.io/name: scrumlr-frontend
      app.kubernetes.io/components: frontend
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: scrumlr-frontend
            port:
              number: 80 
      - path: /new
        pathType: Prefix
        backend:
          service:
            name: scrumlr-frontend
            port:
              number: 80 
      - path: /login 
        pathType: Prefix
        backend:
          service:
            name: scrumlr-frontend
            port:
              number: 80 
      - path: /board/
        pathType: Prefix
        backend:
          service:
            name: scrumlr-frontend
            port:
              number: 80
---
# Source: scrumlr/templates/livequery/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scrumlr-livequery
  labels:
      app.kubernetes.io/name: scrumlr-livequery
      app.kubernetes.io/components: livequery
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - http:
      paths:
      - path:  /ws
        pathType: Prefix
        backend:
          service:
            name: scrumlr-livequery
            port:
              number: 4000
---
# Source: scrumlr/templates/server/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: scrumlr-server
  labels:
      app.kubernetes.io/name: scrumlr-server
      app.kubernetes.io/components: server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/part-of: scrumlr
      helm.sh/chart: scrumlr-0.1.0
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - http:
      paths:
      - path:  /api
        pathType: Prefix
        backend:
          service:
            name: scrumlr-server
            port:
              number: 4000
